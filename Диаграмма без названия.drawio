<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 SberBrowser/28.0.0.0" version="27.2.0">
  <diagram name="Страница — 1" id="WULPb32uHRo-QUS4CWuH">
    <mxGraphModel dx="1372" dy="743" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="3300" pageHeight="4681" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <UserObject label="[tool.poetry]&#xa;name = &quot;aigw-rest-service&quot;&#xa;version = &quot;0.4.0&quot;&#xa;description = &quot;Python &#39;AI GateWay&#39; template for developing REST microservices&quot;&#xa;authors = [&#xa;    &quot;Michael S2pac &lt;MVStupak@sberbank.ru&gt;&quot;&#xa;]&#xa;maintainers = [&#xa;    &quot;Vyacheslav Dulnev &lt;VVaDulnev@sberbank.ru&gt;&quot;,&#xa;    &quot;Nickolay Evsin &lt;NOEvsin@sberbank.ru&gt;&quot;,&#xa;    &quot;AI GateWay &lt;OnlineML360@sberbank.ru&gt;&quot;&#xa;]&#xa;packages = [{ include = &quot;aigw_service&quot;, from = &quot;src&quot; }]&#xa;&#xa;&#xa;[tool.poetry.scripts]&#xa;aigw-rest-service-sh = &quot;aigw_service.__main__:main&quot;&#xa;&#xa;&#xa;[build-system]&#xa;requires = [&quot;poetry-core&quot;]&#xa;build-backend = &quot;poetry.core.masonry.api&quot;&#xa;&#xa;&#xa;[[tool.poetry.source]]&#xa;name = &quot;sberosc&quot;&#xa;url = &quot;https://sberosc.sigma.sbrf.ru/repo/pypi/simple&quot;&#xa;priority = &quot;primary&quot;&#xa;&#xa;&#xa;[tool.poetry.dependencies]&#xa;python = &quot;^3.11&quot;&#xa;fastapi = &quot;^0.115.6&quot;&#xa;asyncio = &quot;^3.4.3&quot;&#xa;loguru = &quot;^0.7.3&quot;&#xa;pydantic = &quot;^2.10.5&quot;&#xa;uvicorn = &quot;^0.34.0&quot;&#xa;pydantic-settings = &quot;^2.7.0&quot;&#xa;python-dotenv = &quot;^1.0.0&quot;&#xa;pytz = &quot;^2025.1&quot;&#xa;langchain = &quot;^0.3.20&quot;&#xa;langchain-community = &quot;^0.3.20&quot;&#xa;langchain-gigachat = &quot;^0.3.9&quot;&#xa;&#xa;&#xa;[tool.poetry.group.dev.dependencies]&#xa;httpx = &quot;^0.27.2&quot;&#xa;pylint = &quot;^3.3.1&quot;&#xa;pytest = &quot;^8.3.3&quot;&#xa;pytest_env = &quot;^1.1.5&quot;&#xa;pytest-asyncio = &quot;^0.24.0&quot;&#xa;ruff = &quot;^0.7.3&quot;&#xa;isort = &quot;^5.13.2&quot;&#xa;black = &quot;^24.10.0&quot;&#xa;&#xa;&#xa;[tool.isort]&#xa;profile = &quot;black&quot;&#xa;skip = [&quot;.venv&quot;, &quot;venv&quot;]&#xa;multi_line_output = 3&#xa;include_trailing_comma = true&#xa;force_grid_wrap = 0&#xa;use_parentheses = true&#xa;ensure_newline_before_comments = true&#xa;line_length = 120&#xa;&#xa;&#xa;[tool.black]&#xa;line-length = 120&#xa;&#xa;&#xa;[tool.ruff]&#xa;extend-select = [&quot;A&quot;, &quot;B&quot;, &quot;C4&quot;, &quot;C90&quot;, &quot;I&quot;, &quot;Q&quot;, &quot;PERF&quot;, &quot;PT&quot;, &quot;RUF100&quot;, &quot;UP&quot;, &quot;W&quot;]&#xa;line-length = 120&#xa;src = [&quot;src&quot;]&#xa;target-version = &quot;py311&quot;&#xa;exclude = [&#xa;    &quot;src/aigw_service/interfaces/gigachat&quot;&#xa;]&#xa;ignore = [&#xa;    &quot;Q000&quot;,&#xa;    &quot;I001&quot;,&#xa;    &quot;B008&quot;&#xa;]&#xa;&#xa;&#xa;[tool.pylint.&#39;MESSAGES CONTROL&#39;]&#xa;max-line-length = 120&#xa;disable = &quot;&quot;&quot;&#xa;    too-many-arguments,&#xa;    not-callable,&#xa;    missing-class-docstring,&#xa;    missing-module-docstring,&#xa;    too-few-public-methods,&#xa;    broad-except,&#xa;    import-outside-toplevel,&#xa;    missing-function-docstring&#xa;&quot;&quot;&quot;&#xa;&#xa;&#xa;&#xa;&#xa;[tool.pytest.ini_options]&#xa;pythonpath = [&#xa;    &quot;.&quot;, &quot;src&quot;,&#xa;]&#xa;asyncio_mode = &quot;auto&quot;&#xa;addopts = &quot;-s --verbose -W ignore::DeprecationWarning&quot;" link="[tool.poetry]&#xa;name = &quot;aigw-rest-service&quot;&#xa;version = &quot;0.4.0&quot;&#xa;description = &quot;Python &#39;AI GateWay&#39; template for developing REST microservices&quot;&#xa;authors = [&#xa;    &quot;Michael S2pac &lt;MVStupak@sberbank.ru&gt;&quot;&#xa;]&#xa;maintainers = [&#xa;    &quot;Vyacheslav Dulnev &lt;VVaDulnev@sberbank.ru&gt;&quot;,&#xa;    &quot;Nickolay Evsin &lt;NOEvsin@sberbank.ru&gt;&quot;,&#xa;    &quot;AI GateWay &lt;OnlineML360@sberbank.ru&gt;&quot;&#xa;]&#xa;packages = [{ include = &quot;aigw_service&quot;, from = &quot;src&quot; }]&#xa;&#xa;&#xa;[tool.poetry.scripts]&#xa;aigw-rest-service-sh = &quot;aigw_service.__main__:main&quot;&#xa;&#xa;&#xa;[build-system]&#xa;requires = [&quot;poetry-core&quot;]&#xa;build-backend = &quot;poetry.core.masonry.api&quot;&#xa;&#xa;&#xa;[[tool.poetry.source]]&#xa;name = &quot;sberosc&quot;&#xa;url = &quot;https://sberosc.sigma.sbrf.ru/repo/pypi/simple&quot;&#xa;priority = &quot;primary&quot;&#xa;&#xa;&#xa;[tool.poetry.dependencies]&#xa;python = &quot;^3.11&quot;&#xa;fastapi = &quot;^0.115.6&quot;&#xa;asyncio = &quot;^3.4.3&quot;&#xa;loguru = &quot;^0.7.3&quot;&#xa;pydantic = &quot;^2.10.5&quot;&#xa;uvicorn = &quot;^0.34.0&quot;&#xa;pydantic-settings = &quot;^2.7.0&quot;&#xa;python-dotenv = &quot;^1.0.0&quot;&#xa;pytz = &quot;^2025.1&quot;&#xa;langchain = &quot;^0.3.20&quot;&#xa;langchain-community = &quot;^0.3.20&quot;&#xa;langchain-gigachat = &quot;^0.3.9&quot;&#xa;&#xa;&#xa;[tool.poetry.group.dev.dependencies]&#xa;httpx = &quot;^0.27.2&quot;&#xa;pylint = &quot;^3.3.1&quot;&#xa;pytest = &quot;^8.3.3&quot;&#xa;pytest_env = &quot;^1.1.5&quot;&#xa;pytest-asyncio = &quot;^0.24.0&quot;&#xa;ruff = &quot;^0.7.3&quot;&#xa;isort = &quot;^5.13.2&quot;&#xa;black = &quot;^24.10.0&quot;&#xa;&#xa;&#xa;[tool.isort]&#xa;profile = &quot;black&quot;&#xa;skip = [&quot;.venv&quot;, &quot;venv&quot;]&#xa;multi_line_output = 3&#xa;include_trailing_comma = true&#xa;force_grid_wrap = 0&#xa;use_parentheses = true&#xa;ensure_newline_before_comments = true&#xa;line_length = 120&#xa;&#xa;&#xa;[tool.black]&#xa;line-length = 120&#xa;&#xa;&#xa;[tool.ruff]&#xa;extend-select = [&quot;A&quot;, &quot;B&quot;, &quot;C4&quot;, &quot;C90&quot;, &quot;I&quot;, &quot;Q&quot;, &quot;PERF&quot;, &quot;PT&quot;, &quot;RUF100&quot;, &quot;UP&quot;, &quot;W&quot;]&#xa;line-length = 120&#xa;src = [&quot;src&quot;]&#xa;target-version = &quot;py311&quot;&#xa;exclude = [&#xa;    &quot;src/aigw_service/interfaces/gigachat&quot;&#xa;]&#xa;ignore = [&#xa;    &quot;Q000&quot;,&#xa;    &quot;I001&quot;,&#xa;    &quot;B008&quot;&#xa;]&#xa;&#xa;&#xa;[tool.pylint.&#39;MESSAGES CONTROL&#39;]&#xa;max-line-length = 120&#xa;disable = &quot;&quot;&quot;&#xa;    too-many-arguments,&#xa;    not-callable,&#xa;    missing-class-docstring,&#xa;    missing-module-docstring,&#xa;    too-few-public-methods,&#xa;    broad-except,&#xa;    import-outside-toplevel,&#xa;    missing-function-docstring&#xa;&quot;&quot;&quot;&#xa;&#xa;&#xa;&#xa;&#xa;[tool.pytest.ini_options]&#xa;pythonpath = [&#xa;    &quot;.&quot;, &quot;src&quot;,&#xa;]&#xa;asyncio_mode = &quot;auto&quot;&#xa;addopts = &quot;-s --verbose -W ignore::DeprecationWarning&quot;" id="SYt-TXJ_Hw24SwqiqHZK-4">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="40" y="30" width="470" height="1580" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="import pytz&#xa;from httpx import RequestError&#xa;from langchain_community.chat_models import GigaChat&#xa;from langchain_community.embeddings import GigaChatEmbeddings&#xa;&#xa;&#xa;from aigw_service.base import Singleton&#xa;from aigw_service.config import APP_CONFIG, Secrets&#xa;from aigw_service.logger import ContextVarsContainer, LoggerConfigurator&#xa;&#xa;&#xa;&#xa;&#xa;class AppContext(metaclass=Singleton):&#xa;&#xa;&#xa;    @property&#xa;    def logger(self):&#xa;        return self._logger_manager.async_logger&#xa;&#xa;&#xa;    def __init__(self, secrets: Secrets):&#xa;        self.timezone = pytz.timezone(secrets.app.timezone)&#xa;        self.context_vars_container = ContextVarsContainer()&#xa;        self._logger_manager = LoggerConfigurator(&#xa;            log_lvl=secrets.log.log_lvl,&#xa;            log_file_path=secrets.log.log_file_abs_path,&#xa;            metric_file_path=secrets.log.metric_file_abs_path,&#xa;            audit_file_path=secrets.log.audit_file_abs_path,&#xa;            audit_host_ip=secrets.log.audit_host_ip,&#xa;            audit_host_uid=secrets.log.audit_host_uid,&#xa;            context_vars_container=self.context_vars_container,&#xa;            timezone=self.timezone,&#xa;            rotation=secrets.log.log_rotation,&#xa;        )&#xa;        self._gigachat_base_params = secrets.gigachat.base_params&#xa;        self.gigachat_embeddings = GigaChatEmbeddings(**self._gigachat_base_params)&#xa;        self.logger.info(&quot;App context initialized.&quot;)&#xa;&#xa;&#xa;    def get_logger(self):&#xa;        return self.logger&#xa;&#xa;&#xa;    def get_context_vars_container(self):&#xa;        return self.context_vars_container&#xa;&#xa;&#xa;    def get_pytz_timezone(self):&#xa;        return self.timezone&#xa;&#xa;&#xa;    def get_gigachat_base_params(self):&#xa;        return self._gigachat_base_params&#xa;&#xa;&#xa;    def get_gigachat_embeddings(self):&#xa;        return self.gigachat_embeddings&#xa;&#xa;&#xa;    def _check_gigachat_connection(self):&#xa;        gigachat = GigaChat(**self._gigachat_base_params)&#xa;        try:&#xa;            self.logger.info(f&quot;Attempt to connect to GigaChat at host {gigachat.base_url}.&quot;)&#xa;            gigachat.get_models()&#xa;            self.logger.info(f&quot;Connection to GigaChat at host {gigachat.base_url} successfully established.&quot;)&#xa;        except RequestError as e:&#xa;            self.logger.error(f&quot;Error connecting to GigaChat at host {gigachat.base_url}: {e}&quot;)&#xa;&#xa;&#xa;    async def on_startup(self):&#xa;        self.logger.info(&quot;Application is starting up.&quot;)&#xa;        self._check_gigachat_connection()&#xa;        self.logger.info(&quot;All connections checked. Application is up and ready.&quot;)&#xa;&#xa;&#xa;    async def on_shutdown(self):&#xa;        self.logger.info(&quot;Application is shutting down.&quot;)&#xa;        self._logger_manager.remove_logger_handlers()&#xa;&#xa;&#xa;&#xa;&#xa;APP_CTX = AppContext(APP_CONFIG)&#xa;&#xa;&#xa;&#xa;&#xa;__all__ = [&#xa;    &quot;APP_CTX&quot;,&#xa;]" link="import pytz&#xa;from httpx import RequestError&#xa;from langchain_community.chat_models import GigaChat&#xa;from langchain_community.embeddings import GigaChatEmbeddings&#xa;&#xa;&#xa;from aigw_service.base import Singleton&#xa;from aigw_service.config import APP_CONFIG, Secrets&#xa;from aigw_service.logger import ContextVarsContainer, LoggerConfigurator&#xa;&#xa;&#xa;&#xa;&#xa;class AppContext(metaclass=Singleton):&#xa;&#xa;&#xa;    @property&#xa;    def logger(self):&#xa;        return self._logger_manager.async_logger&#xa;&#xa;&#xa;    def __init__(self, secrets: Secrets):&#xa;        self.timezone = pytz.timezone(secrets.app.timezone)&#xa;        self.context_vars_container = ContextVarsContainer()&#xa;        self._logger_manager = LoggerConfigurator(&#xa;            log_lvl=secrets.log.log_lvl,&#xa;            log_file_path=secrets.log.log_file_abs_path,&#xa;            metric_file_path=secrets.log.metric_file_abs_path,&#xa;            audit_file_path=secrets.log.audit_file_abs_path,&#xa;            audit_host_ip=secrets.log.audit_host_ip,&#xa;            audit_host_uid=secrets.log.audit_host_uid,&#xa;            context_vars_container=self.context_vars_container,&#xa;            timezone=self.timezone,&#xa;            rotation=secrets.log.log_rotation,&#xa;        )&#xa;        self._gigachat_base_params = secrets.gigachat.base_params&#xa;        self.gigachat_embeddings = GigaChatEmbeddings(**self._gigachat_base_params)&#xa;        self.logger.info(&quot;App context initialized.&quot;)&#xa;&#xa;&#xa;    def get_logger(self):&#xa;        return self.logger&#xa;&#xa;&#xa;    def get_context_vars_container(self):&#xa;        return self.context_vars_container&#xa;&#xa;&#xa;    def get_pytz_timezone(self):&#xa;        return self.timezone&#xa;&#xa;&#xa;    def get_gigachat_base_params(self):&#xa;        return self._gigachat_base_params&#xa;&#xa;&#xa;    def get_gigachat_embeddings(self):&#xa;        return self.gigachat_embeddings&#xa;&#xa;&#xa;    def _check_gigachat_connection(self):&#xa;        gigachat = GigaChat(**self._gigachat_base_params)&#xa;        try:&#xa;            self.logger.info(f&quot;Attempt to connect to GigaChat at host {gigachat.base_url}.&quot;)&#xa;            gigachat.get_models()&#xa;            self.logger.info(f&quot;Connection to GigaChat at host {gigachat.base_url} successfully established.&quot;)&#xa;        except RequestError as e:&#xa;            self.logger.error(f&quot;Error connecting to GigaChat at host {gigachat.base_url}: {e}&quot;)&#xa;&#xa;&#xa;    async def on_startup(self):&#xa;        self.logger.info(&quot;Application is starting up.&quot;)&#xa;        self._check_gigachat_connection()&#xa;        self.logger.info(&quot;All connections checked. Application is up and ready.&quot;)&#xa;&#xa;&#xa;    async def on_shutdown(self):&#xa;        self.logger.info(&quot;Application is shutting down.&quot;)&#xa;        self._logger_manager.remove_logger_handlers()&#xa;&#xa;&#xa;&#xa;&#xa;APP_CTX = AppContext(APP_CONFIG)&#xa;&#xa;&#xa;&#xa;&#xa;__all__ = [&#xa;    &quot;APP_CTX&quot;,&#xa;]" id="SYt-TXJ_Hw24SwqiqHZK-5">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="670" y="50" width="560" height="1350" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
