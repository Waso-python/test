<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 SberBrowser/28.0.0.0" version="27.2.0">
  <diagram name="Страница — 1" id="WULPb32uHRo-QUS4CWuH">
    <mxGraphModel dx="1372" dy="743" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="3300" pageHeight="4681" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <UserObject label="LOGGING_CONFIG = {&#xa;    &quot;version&quot;: 1,&#xa;    &quot;disable_existing_loggers&quot;: False,&#xa;    &quot;formatters&quot;: {&#xa;        &quot;default&quot;: {&#xa;            &quot;()&quot;: &quot;uvicorn.logging.DefaultFormatter&quot;,&#xa;            &quot;fmt&quot;: &quot;%(levelname)-7s | %(asctime)s.%(msecs)03d | %(message)s&quot;,&#xa;            &quot;datefmt&quot;: &quot;%Y-%m-%d %H:%M:%S&quot;,&#xa;        }&#xa;    },&#xa;    &quot;handlers&quot;: {&#xa;        &quot;default&quot;: {&#xa;            &quot;formatter&quot;: &quot;default&quot;,&#xa;            &quot;class&quot;: &quot;logging.StreamHandler&quot;,&#xa;            &quot;stream&quot;: &quot;ext://sys.stderr&quot;,&#xa;        }&#xa;    },&#xa;    &quot;loggers&quot;: {&#xa;        &quot;uvicorn&quot;: {&#xa;            &quot;handlers&quot;: [&quot;default&quot;],&#xa;            &quot;level&quot;: &quot;INFO&quot;,&#xa;            &quot;propagate&quot;: False,&#xa;        },&#xa;        # httpx логгер отвечает за логирование langchain&#xa;        &quot;httpx&quot;: {&#xa;            &quot;handlers&quot;: [&quot;default&quot;],&#xa;            &quot;level&quot;: &quot;INFO&quot;,&#xa;            &quot;propagate&quot;: False,&#xa;        }&#xa;    },&#xa;}" link="LOGGING_CONFIG = {&#xa;    &quot;version&quot;: 1,&#xa;    &quot;disable_existing_loggers&quot;: False,&#xa;    &quot;formatters&quot;: {&#xa;        &quot;default&quot;: {&#xa;            &quot;()&quot;: &quot;uvicorn.logging.DefaultFormatter&quot;,&#xa;            &quot;fmt&quot;: &quot;%(levelname)-7s | %(asctime)s.%(msecs)03d | %(message)s&quot;,&#xa;            &quot;datefmt&quot;: &quot;%Y-%m-%d %H:%M:%S&quot;,&#xa;        }&#xa;    },&#xa;    &quot;handlers&quot;: {&#xa;        &quot;default&quot;: {&#xa;            &quot;formatter&quot;: &quot;default&quot;,&#xa;            &quot;class&quot;: &quot;logging.StreamHandler&quot;,&#xa;            &quot;stream&quot;: &quot;ext://sys.stderr&quot;,&#xa;        }&#xa;    },&#xa;    &quot;loggers&quot;: {&#xa;        &quot;uvicorn&quot;: {&#xa;            &quot;handlers&quot;: [&quot;default&quot;],&#xa;            &quot;level&quot;: &quot;INFO&quot;,&#xa;            &quot;propagate&quot;: False,&#xa;        },&#xa;        # httpx логгер отвечает за логирование langchain&#xa;        &quot;httpx&quot;: {&#xa;            &quot;handlers&quot;: [&quot;default&quot;],&#xa;            &quot;level&quot;: &quot;INFO&quot;,&#xa;            &quot;propagate&quot;: False,&#xa;        }&#xa;    },&#xa;}" id="SYt-TXJ_Hw24SwqiqHZK-21">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="40" y="50" width="440" height="470" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="path_fields = {&#xa;    &quot;common&quot;: {&#xa;        &quot;request&quot;: [],&#xa;        &quot;response&quot;: [],&#xa;        &quot;common&quot;: [],&#xa;    },&#xa;    &quot;/api/v1/predict&quot;: {&#xa;        &quot;request&quot;: [],&#xa;        &quot;response&quot;: [],&#xa;        &quot;common&quot;: [],&#xa;    },&#xa;    &quot;gc.chat&quot;: {&#xa;        &quot;request&quot;: [],&#xa;        &quot;response&quot;: [],&#xa;        &quot;common&quot;: [],&#xa;    },&#xa;    &quot;gc.embeddings&quot;: {&#xa;        &quot;request&quot;: [],&#xa;        &quot;response&quot;: [],&#xa;        &quot;common&quot;: [],&#xa;    },&#xa;}&#xa;&#xa;&#xa;&#xa;&#xa;def mask_sensitive_data(data, path=&quot;common&quot;, message_type=&quot;common&quot;):&#xa;    path = path_fields.get(path, path_fields[&quot;common&quot;])&#xa;    mask_fields = path.get(message_type, [])&#xa;    return _masker(data, mask_fields)&#xa;&#xa;&#xa;&#xa;&#xa;def _masker(data, mask_fields):&#xa;    &quot;&quot;&quot;Маскирует поля с чувствительными данными в словаре&quot;&quot;&quot;&#xa;    if isinstance(data, dict):&#xa;        return {&#xa;            k: (&quot;***&quot; if not mask_fields or k.lower() in mask_fields else _masker(v, mask_fields))&#xa;            for k, v in data.items()&#xa;        }&#xa;    if isinstance(data, list):&#xa;        return [_masker(item, mask_fields) for item in data]&#xa;    return data" link="path_fields = {&#xa;    &quot;common&quot;: {&#xa;        &quot;request&quot;: [],&#xa;        &quot;response&quot;: [],&#xa;        &quot;common&quot;: [],&#xa;    },&#xa;    &quot;/api/v1/predict&quot;: {&#xa;        &quot;request&quot;: [],&#xa;        &quot;response&quot;: [],&#xa;        &quot;common&quot;: [],&#xa;    },&#xa;    &quot;gc.chat&quot;: {&#xa;        &quot;request&quot;: [],&#xa;        &quot;response&quot;: [],&#xa;        &quot;common&quot;: [],&#xa;    },&#xa;    &quot;gc.embeddings&quot;: {&#xa;        &quot;request&quot;: [],&#xa;        &quot;response&quot;: [],&#xa;        &quot;common&quot;: [],&#xa;    },&#xa;}&#xa;&#xa;&#xa;&#xa;&#xa;def mask_sensitive_data(data, path=&quot;common&quot;, message_type=&quot;common&quot;):&#xa;    path = path_fields.get(path, path_fields[&quot;common&quot;])&#xa;    mask_fields = path.get(message_type, [])&#xa;    return _masker(data, mask_fields)&#xa;&#xa;&#xa;&#xa;&#xa;def _masker(data, mask_fields):&#xa;    &quot;&quot;&quot;Маскирует поля с чувствительными данными в словаре&quot;&quot;&quot;&#xa;    if isinstance(data, dict):&#xa;        return {&#xa;            k: (&quot;***&quot; if not mask_fields or k.lower() in mask_fields else _masker(v, mask_fields))&#xa;            for k, v in data.items()&#xa;        }&#xa;    if isinstance(data, list):&#xa;        return [_masker(item, mask_fields) for item in data]&#xa;    return data" id="SYt-TXJ_Hw24SwqiqHZK-22">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="520" y="50" width="510" height="660" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="import json&#xa;from dataclasses import asdict, dataclass&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class ContextLog:&#xa;    # pylint: disable=C0103,R0902&#xa;    rqUId: None | str&#xa;    rqTime: None | str&#xa;    systemId: None | str&#xa;    gwSessionId: None | str&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class Log:&#xa;    # pylint: disable=C0103,R0902&#xa;    levelName: str&#xa;    asctime: str&#xa;    moduleName: str&#xa;    funcName: str&#xa;    message: str&#xa;    stackTrace: str | None&#xa;    rqUId: None | str&#xa;    rqTime: None | str&#xa;    systemId: None | str&#xa;    gwSessionId: None | str&#xa;    args: str | None&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class Metric:&#xa;    # pylint: disable=C0103,R0902&#xa;    rqUId: str&#xa;    metric_name: str&#xa;    metric_value: int&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class EventParam:&#xa;    # pylint: disable=C0103,R0902&#xa;    name: str&#xa;    value: str&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class Event:&#xa;    # pylint: disable=C0103,R0902&#xa;    name: str&#xa;    createdAt: int&#xa;    params: list[EventParam]&#xa;&#xa;&#xa;&#xa;&#xa;def dataclass_as_json_str(dataclass_object) -&gt; str:&#xa;    return json.dumps(asdict(dataclass_object), ensure_ascii=False)" link="import json&#xa;from dataclasses import asdict, dataclass&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class ContextLog:&#xa;    # pylint: disable=C0103,R0902&#xa;    rqUId: None | str&#xa;    rqTime: None | str&#xa;    systemId: None | str&#xa;    gwSessionId: None | str&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class Log:&#xa;    # pylint: disable=C0103,R0902&#xa;    levelName: str&#xa;    asctime: str&#xa;    moduleName: str&#xa;    funcName: str&#xa;    message: str&#xa;    stackTrace: str | None&#xa;    rqUId: None | str&#xa;    rqTime: None | str&#xa;    systemId: None | str&#xa;    gwSessionId: None | str&#xa;    args: str | None&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class Metric:&#xa;    # pylint: disable=C0103,R0902&#xa;    rqUId: str&#xa;    metric_name: str&#xa;    metric_value: int&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class EventParam:&#xa;    # pylint: disable=C0103,R0902&#xa;    name: str&#xa;    value: str&#xa;&#xa;&#xa;&#xa;&#xa;@dataclass&#xa;class Event:&#xa;    # pylint: disable=C0103,R0902&#xa;    name: str&#xa;    createdAt: int&#xa;    params: list[EventParam]&#xa;&#xa;&#xa;&#xa;&#xa;def dataclass_as_json_str(dataclass_object) -&gt; str:&#xa;    return json.dumps(asdict(dataclass_object), ensure_ascii=False)" id="SYt-TXJ_Hw24SwqiqHZK-23">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="1110" y="60" width="390" height="970" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
