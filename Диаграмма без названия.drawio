<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 SberBrowser/28.0.0.0" version="27.2.0">
  <diagram name="Страница — 1" id="WULPb32uHRo-QUS4CWuH">
    <mxGraphModel dx="1372" dy="743" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="3300" pageHeight="4681" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <UserObject label="&quot;&quot;&quot;&#xa;Здесь можно разместить функции, не связанные с бизнес-логикой, например, нормализация ответов, обогащение данных и т.д.&#xa;&quot;&quot;&quot;&#xa;&#xa;&#xa;import uuid&#xa;from datetime import datetime&#xa;&#xa;&#xa;from fastapi import Header&#xa;&#xa;&#xa;from aigw_service.context import APP_CTX&#xa;&#xa;&#xa;&#xa;&#xa;# pylint: disable=C0103&#xa;def common_headers(&#xa;    header_Request_Id: str = Header(default=uuid.uuid4(), alias=&quot;Request-Id&quot;),&#xa;    header_Request_Time: str = Header(&#xa;        str(datetime.now(tz=APP_CTX.get_pytz_timezone()).isoformat()), alias=&quot;Request-Time&quot;&#xa;    ),&#xa;    header_System_Id: str = Header(alias=&quot;System-Id&quot;),&#xa;    header_GateWay_Session_Id: str = Header(alias=&quot;GateWay-Session-Id&quot;, default=None),&#xa;    header_Client_Id: str = Header(alias=&quot;Client-Id&quot;, default=None),&#xa;) -&gt; dict:&#xa;    return {&#xa;        &quot;Request-Id&quot;: header_Request_Id,&#xa;        &quot;Request-Time&quot;: header_Request_Time,&#xa;        &quot;System-Id&quot;: header_System_Id,&#xa;        &quot;GateWay-Session-Id&quot;: header_GateWay_Session_Id,&#xa;        &quot;Client-Id&quot;: header_Client_Id,&#xa;    }" link="&quot;&quot;&quot;&#xa;Здесь можно разместить функции, не связанные с бизнес-логикой, например, нормализация ответов, обогащение данных и т.д.&#xa;&quot;&quot;&quot;&#xa;&#xa;&#xa;import uuid&#xa;from datetime import datetime&#xa;&#xa;&#xa;from fastapi import Header&#xa;&#xa;&#xa;from aigw_service.context import APP_CTX&#xa;&#xa;&#xa;&#xa;&#xa;# pylint: disable=C0103&#xa;def common_headers(&#xa;    header_Request_Id: str = Header(default=uuid.uuid4(), alias=&quot;Request-Id&quot;),&#xa;    header_Request_Time: str = Header(&#xa;        str(datetime.now(tz=APP_CTX.get_pytz_timezone()).isoformat()), alias=&quot;Request-Time&quot;&#xa;    ),&#xa;    header_System_Id: str = Header(alias=&quot;System-Id&quot;),&#xa;    header_GateWay_Session_Id: str = Header(alias=&quot;GateWay-Session-Id&quot;, default=None),&#xa;    header_Client_Id: str = Header(alias=&quot;Client-Id&quot;, default=None),&#xa;) -&gt; dict:&#xa;    return {&#xa;        &quot;Request-Id&quot;: header_Request_Id,&#xa;        &quot;Request-Time&quot;: header_Request_Time,&#xa;        &quot;System-Id&quot;: header_System_Id,&#xa;        &quot;GateWay-Session-Id&quot;: header_GateWay_Session_Id,&#xa;        &quot;Client-Id&quot;: header_Client_Id,&#xa;    }" id="SYt-TXJ_Hw24SwqiqHZK-14">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="30" y="50" width="560" height="530" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="SYt-TXJ_Hw24SwqiqHZK-15" value="&quot;&quot;&quot;&#xa;Здесь можно организовать бизнес-логику, специфичную для конкретного сервиса.&#xa;&quot;&quot;&quot;" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="610" y="50" width="490" height="70" as="geometry" />
        </mxCell>
        <UserObject label="&quot;&quot;&quot;&#xa;Здесь расположены Pydantic модели для описания ответов, тел запросов, возвращаемых ошибок и т.д.&#xa;&quot;&quot;&quot;&#xa;&#xa;&#xa;from typing import Optional&#xa;&#xa;&#xa;from pydantic import BaseModel, Field&#xa;&#xa;&#xa;&#xa;&#xa;class FailedDependencyResponse(BaseModel):&#xa;    &quot;&quot;&quot;&#xa;    Реализация текущего запроса может зависеть от успешности выполнения другой операции.&#xa;    Если она не выполнена и из-за этого нельзя выполнить текущий запрос, то сервер вернёт этот код.&#xa;    &quot;&quot;&quot;&#xa;&#xa;&#xa;    error_description: str = Field(&#xa;        description=&quot;Описание возникшей ошибки.&quot;,&#xa;        examples=[&quot;GigaChat aigw_service temporary unavailable.&quot;],&#xa;    )&#xa;&#xa;&#xa;&#xa;&#xa;class GigachatTestInvokeResponse(BaseModel):&#xa;    &quot;&quot;&quot;Ответ для роута /test_invoke&quot;&quot;&quot;&#xa;&#xa;&#xa;    answer: str = Field(&#xa;        description=&quot;Ответ от GigaChat на вопрос пользователя с применением LangChain.&quot;,&#xa;    )&#xa;&#xa;&#xa;&#xa;&#xa;class GigachatTestInvokeRequest(BaseModel):&#xa;    &quot;&quot;&quot;Тело запроса для роута /test_invoke&quot;&quot;&quot;&#xa;&#xa;&#xa;    question: str = Field(&#xa;        description=&quot;Вопрос к GigaChat от пользователя с применением LangChain.&quot;,&#xa;        min_length=4,&#xa;        examples=[&quot;Какой год основания Москвы?&quot;],&#xa;    )&#xa;    generation_params: Optional[dict] = Field(&#xa;        description=(&#xa;            &quot;Параметры для генерации ответа GigaChat. Подробнее о возможных параметрах: &quot;&#xa;            &quot;https://developers.sber.ru/docs/ru/gigachat/api/reference/rest/post-chat&quot;&#xa;        ),&#xa;        default={},&#xa;        examples=[&#xa;            {&#xa;                &quot;model&quot;: &quot;GigaChat&quot;,&#xa;                &quot;temperature&quot;: 1.0,&#xa;                &quot;max_tokens&quot;: 1024,&#xa;                &quot;top_p&quot;: 0.5,&#xa;                &quot;repetition_penalty&quot;: 1.0,&#xa;            }&#xa;        ],&#xa;    )&#xa;&#xa;&#xa;&#xa;&#xa;class GigachatTestEmbeddingsResponse(BaseModel):&#xa;    &quot;&quot;&quot;Ответ для роута /test_embeddings&quot;&quot;&quot;&#xa;&#xa;&#xa;    embeddings: list[float] = Field(&#xa;        description=&quot;Эмбеддинги, полученные с помощью GigaChatEmbeddings из LangChain.&quot;,&#xa;    )&#xa;&#xa;&#xa;&#xa;&#xa;class GigachatTestEmbeddingsRequest(BaseModel):&#xa;    &quot;&quot;&quot;Тело запроса для роута /test_embeddings&quot;&quot;&quot;&#xa;&#xa;&#xa;    query: str = Field(&#xa;        description=&quot;Текст для получения эмбеддингов с помощью GigaChatEmbeddings из LangChain.&quot;,&#xa;        min_length=4,&#xa;        examples=[&quot;Привет!&quot;],&#xa;    )" link="&quot;&quot;&quot;&#xa;Здесь расположены Pydantic модели для описания ответов, тел запросов, возвращаемых ошибок и т.д.&#xa;&quot;&quot;&quot;&#xa;&#xa;&#xa;from typing import Optional&#xa;&#xa;&#xa;from pydantic import BaseModel, Field&#xa;&#xa;&#xa;&#xa;&#xa;class FailedDependencyResponse(BaseModel):&#xa;    &quot;&quot;&quot;&#xa;    Реализация текущего запроса может зависеть от успешности выполнения другой операции.&#xa;    Если она не выполнена и из-за этого нельзя выполнить текущий запрос, то сервер вернёт этот код.&#xa;    &quot;&quot;&quot;&#xa;&#xa;&#xa;    error_description: str = Field(&#xa;        description=&quot;Описание возникшей ошибки.&quot;,&#xa;        examples=[&quot;GigaChat aigw_service temporary unavailable.&quot;],&#xa;    )&#xa;&#xa;&#xa;&#xa;&#xa;class GigachatTestInvokeResponse(BaseModel):&#xa;    &quot;&quot;&quot;Ответ для роута /test_invoke&quot;&quot;&quot;&#xa;&#xa;&#xa;    answer: str = Field(&#xa;        description=&quot;Ответ от GigaChat на вопрос пользователя с применением LangChain.&quot;,&#xa;    )&#xa;&#xa;&#xa;&#xa;&#xa;class GigachatTestInvokeRequest(BaseModel):&#xa;    &quot;&quot;&quot;Тело запроса для роута /test_invoke&quot;&quot;&quot;&#xa;&#xa;&#xa;    question: str = Field(&#xa;        description=&quot;Вопрос к GigaChat от пользователя с применением LangChain.&quot;,&#xa;        min_length=4,&#xa;        examples=[&quot;Какой год основания Москвы?&quot;],&#xa;    )&#xa;    generation_params: Optional[dict] = Field(&#xa;        description=(&#xa;            &quot;Параметры для генерации ответа GigaChat. Подробнее о возможных параметрах: &quot;&#xa;            &quot;https://developers.sber.ru/docs/ru/gigachat/api/reference/rest/post-chat&quot;&#xa;        ),&#xa;        default={},&#xa;        examples=[&#xa;            {&#xa;                &quot;model&quot;: &quot;GigaChat&quot;,&#xa;                &quot;temperature&quot;: 1.0,&#xa;                &quot;max_tokens&quot;: 1024,&#xa;                &quot;top_p&quot;: 0.5,&#xa;                &quot;repetition_penalty&quot;: 1.0,&#xa;            }&#xa;        ],&#xa;    )&#xa;&#xa;&#xa;&#xa;&#xa;class GigachatTestEmbeddingsResponse(BaseModel):&#xa;    &quot;&quot;&quot;Ответ для роута /test_embeddings&quot;&quot;&quot;&#xa;&#xa;&#xa;    embeddings: list[float] = Field(&#xa;        description=&quot;Эмбеддинги, полученные с помощью GigaChatEmbeddings из LangChain.&quot;,&#xa;    )&#xa;&#xa;&#xa;&#xa;&#xa;class GigachatTestEmbeddingsRequest(BaseModel):&#xa;    &quot;&quot;&quot;Тело запроса для роута /test_embeddings&quot;&quot;&quot;&#xa;&#xa;&#xa;    query: str = Field(&#xa;        description=&quot;Текст для получения эмбеддингов с помощью GigaChatEmbeddings из LangChain.&quot;,&#xa;        min_length=4,&#xa;        examples=[&quot;Привет!&quot;],&#xa;    )" id="SYt-TXJ_Hw24SwqiqHZK-16">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="1140" y="60" width="560" height="1350" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="&quot;&quot;&quot;&#xa;Основное ядро API co всеми endpoint-ми.&#xa;&quot;&quot;&quot;&#xa;from fastapi import APIRouter, Depends, status&#xa;from fastapi.responses import JSONResponse&#xa;from langchain_gigachat.chat_models import GigaChat&#xa;&#xa;&#xa;from aigw_service.context import APP_CTX&#xa;&#xa;&#xa;from . import schemas&#xa;from .schemas import FailedDependencyResponse&#xa;from .utils import common_headers&#xa;&#xa;&#xa;router = APIRouter()&#xa;logger = APP_CTX.get_logger()&#xa;&#xa;&#xa;&#xa;&#xa;@router.post(&#xa;    &quot;/test_invoke&quot;,&#xa;    status_code=status.HTTP_200_OK,&#xa;    response_model=schemas.GigachatTestInvokeResponse,&#xa;    responses={&#xa;        status.HTTP_424_FAILED_DEPENDENCY: {&#xa;            &quot;description&quot;: &quot;Ошибка при взаимодействии с внешней системой&quot;,&#xa;            &quot;model&quot;: schemas.FailedDependencyResponse,&#xa;        },&#xa;    },&#xa;)&#xa;async def gigachat_test_invoke(&#xa;    # pylint: disable=C0103,W0613,R0914,R0917&#xa;    request: schemas.GigachatTestInvokeRequest,&#xa;    headers: dict = Depends(common_headers),&#xa;    gigachat_base_params=Depends(APP_CTX.get_gigachat_base_params),&#xa;):&#xa;    &quot;&quot;&quot;&#xa;    Простой пример эндпоинта, в котором можно задать вопрос к GigaChat методом invoke из библитеки langchain.&#xa;    &quot;&quot;&quot;&#xa;    gigachat = GigaChat(**gigachat_base_params, **request.generation_params)&#xa;    logger.info(&quot;Generating an answer based on the given question...&quot;)&#xa;    try:&#xa;        answer = gigachat.invoke(request.question)&#xa;        logger.info(f&quot;Generated answer: {answer}&quot;)&#xa;    except Exception as e:&#xa;        # pylint: disable=no-member&#xa;        logger.error(f&quot;Request failed: {e.args[1]} for {e.args[0]}&quot;, exception=str(e))&#xa;        return JSONResponse(&#xa;            status_code=status.HTTP_424_FAILED_DEPENDENCY,&#xa;            content=FailedDependencyResponse(error_description=str(e)).model_dump(),&#xa;        )&#xa;    logger.info(&quot;Got response from GigaChat&quot;)&#xa;    return schemas.GigachatTestInvokeResponse(answer=answer.content)&#xa;&#xa;&#xa;&#xa;&#xa;@router.post(&#xa;    &quot;/test_embeddings&quot;,&#xa;    status_code=status.HTTP_200_OK,&#xa;    response_model=schemas.GigachatTestEmbeddingsResponse,&#xa;    responses={&#xa;        status.HTTP_424_FAILED_DEPENDENCY: {&#xa;            &quot;description&quot;: &quot;Ошибка при взаимодействии с внешней системой&quot;,&#xa;            &quot;model&quot;: schemas.FailedDependencyResponse,&#xa;        },&#xa;    },&#xa;)&#xa;async def gigachat_test_embeddings(&#xa;    # pylint: disable=C0103,W0613,R0914,R0917&#xa;    request: schemas.GigachatTestEmbeddingsRequest,&#xa;    headers: dict = Depends(common_headers),&#xa;    gigachat_embeddings=Depends(APP_CTX.get_gigachat_embeddings),&#xa;):&#xa;    &quot;&quot;&quot;&#xa;    Простой пример эндпоинта, в котором можно получить эмбеддинги с помощью GigaChat&#xa;    методом embed_query из библитеки langchain.&#xa;    &quot;&quot;&quot;&#xa;    logger.info(&quot;Performing request for making embeddings...&quot;)&#xa;    try:&#xa;        embeddings = gigachat_embeddings.embed_query(request.query)&#xa;        logger.info(&quot;Embeddings successfully received.&quot;)&#xa;    except Exception as e:&#xa;        # pylint: disable=no-member&#xa;        logger.error(f&quot;Request failed: {e.args[1]} for {e.args[0]}&quot;, exception=str(e))&#xa;        return JSONResponse(&#xa;            status_code=status.HTTP_424_FAILED_DEPENDENCY,&#xa;            content=FailedDependencyResponse(error_description=str(e)).model_dump(),&#xa;        )&#xa;    logger.info(&quot;Got response from GigaChat Embeddings&quot;)&#xa;    return schemas.GigachatTestEmbeddingsResponse(embeddings=embeddings)" link="&quot;&quot;&quot;&#xa;Основное ядро API co всеми endpoint-ми.&#xa;&quot;&quot;&quot;&#xa;from fastapi import APIRouter, Depends, status&#xa;from fastapi.responses import JSONResponse&#xa;from langchain_gigachat.chat_models import GigaChat&#xa;&#xa;&#xa;from aigw_service.context import APP_CTX&#xa;&#xa;&#xa;from . import schemas&#xa;from .schemas import FailedDependencyResponse&#xa;from .utils import common_headers&#xa;&#xa;&#xa;router = APIRouter()&#xa;logger = APP_CTX.get_logger()&#xa;&#xa;&#xa;&#xa;&#xa;@router.post(&#xa;    &quot;/test_invoke&quot;,&#xa;    status_code=status.HTTP_200_OK,&#xa;    response_model=schemas.GigachatTestInvokeResponse,&#xa;    responses={&#xa;        status.HTTP_424_FAILED_DEPENDENCY: {&#xa;            &quot;description&quot;: &quot;Ошибка при взаимодействии с внешней системой&quot;,&#xa;            &quot;model&quot;: schemas.FailedDependencyResponse,&#xa;        },&#xa;    },&#xa;)&#xa;async def gigachat_test_invoke(&#xa;    # pylint: disable=C0103,W0613,R0914,R0917&#xa;    request: schemas.GigachatTestInvokeRequest,&#xa;    headers: dict = Depends(common_headers),&#xa;    gigachat_base_params=Depends(APP_CTX.get_gigachat_base_params),&#xa;):&#xa;    &quot;&quot;&quot;&#xa;    Простой пример эндпоинта, в котором можно задать вопрос к GigaChat методом invoke из библитеки langchain.&#xa;    &quot;&quot;&quot;&#xa;    gigachat = GigaChat(**gigachat_base_params, **request.generation_params)&#xa;    logger.info(&quot;Generating an answer based on the given question...&quot;)&#xa;    try:&#xa;        answer = gigachat.invoke(request.question)&#xa;        logger.info(f&quot;Generated answer: {answer}&quot;)&#xa;    except Exception as e:&#xa;        # pylint: disable=no-member&#xa;        logger.error(f&quot;Request failed: {e.args[1]} for {e.args[0]}&quot;, exception=str(e))&#xa;        return JSONResponse(&#xa;            status_code=status.HTTP_424_FAILED_DEPENDENCY,&#xa;            content=FailedDependencyResponse(error_description=str(e)).model_dump(),&#xa;        )&#xa;    logger.info(&quot;Got response from GigaChat&quot;)&#xa;    return schemas.GigachatTestInvokeResponse(answer=answer.content)&#xa;&#xa;&#xa;&#xa;&#xa;@router.post(&#xa;    &quot;/test_embeddings&quot;,&#xa;    status_code=status.HTTP_200_OK,&#xa;    response_model=schemas.GigachatTestEmbeddingsResponse,&#xa;    responses={&#xa;        status.HTTP_424_FAILED_DEPENDENCY: {&#xa;            &quot;description&quot;: &quot;Ошибка при взаимодействии с внешней системой&quot;,&#xa;            &quot;model&quot;: schemas.FailedDependencyResponse,&#xa;        },&#xa;    },&#xa;)&#xa;async def gigachat_test_embeddings(&#xa;    # pylint: disable=C0103,W0613,R0914,R0917&#xa;    request: schemas.GigachatTestEmbeddingsRequest,&#xa;    headers: dict = Depends(common_headers),&#xa;    gigachat_embeddings=Depends(APP_CTX.get_gigachat_embeddings),&#xa;):&#xa;    &quot;&quot;&quot;&#xa;    Простой пример эндпоинта, в котором можно получить эмбеддинги с помощью GigaChat&#xa;    методом embed_query из библитеки langchain.&#xa;    &quot;&quot;&quot;&#xa;    logger.info(&quot;Performing request for making embeddings...&quot;)&#xa;    try:&#xa;        embeddings = gigachat_embeddings.embed_query(request.query)&#xa;        logger.info(&quot;Embeddings successfully received.&quot;)&#xa;    except Exception as e:&#xa;        # pylint: disable=no-member&#xa;        logger.error(f&quot;Request failed: {e.args[1]} for {e.args[0]}&quot;, exception=str(e))&#xa;        return JSONResponse(&#xa;            status_code=status.HTTP_424_FAILED_DEPENDENCY,&#xa;            content=FailedDependencyResponse(error_description=str(e)).model_dump(),&#xa;        )&#xa;    logger.info(&quot;Got response from GigaChat Embeddings&quot;)&#xa;    return schemas.GigachatTestEmbeddingsResponse(embeddings=embeddings)" id="SYt-TXJ_Hw24SwqiqHZK-17">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="1760" y="70" width="560" height="1390" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="SYt-TXJ_Hw24SwqiqHZK-18" value="&quot;&quot;&quot;&#xa;Здесь можно разместить модели для работы с БД, дата классами, именованными кортежами и т.д.&#xa;&quot;&quot;&quot;" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="2350" y="60" width="560" height="80" as="geometry" />
        </mxCell>
        <mxCell id="SYt-TXJ_Hw24SwqiqHZK-19" value="&quot;&quot;&quot;&#xa;Здесь можно разместить кастомные исключения, относящиеся к конкретному сервису.&#xa;&quot;&quot;&quot;" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="2930" y="60" width="520" height="70" as="geometry" />
        </mxCell>
        <mxCell id="SYt-TXJ_Hw24SwqiqHZK-20" value="from .router import router&#xa;&#xa;&#xa;__all__ = [&#xa;    &quot;router&quot;,&#xa;]" style="text;whiteSpace=wrap;" vertex="1" parent="1">
          <mxGeometry x="3500" y="80" width="170" height="110" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
