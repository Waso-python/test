<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Safari/537.36" version="28.2.5">
  <diagram name="Страница — 1" id="UEoj7QPsIXpe_KQzLWxL">
    <mxGraphModel dx="1152" dy="692" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="dUc_57Bg2O3dePhUninS-1" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;xslData;XLSY;v2;5618;-1;-1;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&quot; style=&quot;border-collapse: collapse;font-family:Calibri;font-size:11pt;color:#000;background-color:transparent;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height:226.29pt&quot;&gt;&lt;td style=&quot;width:820.7142857142857pt;white-space:normal;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;Автовывод: Финансовое состояние, рассчитанное моделью &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Удовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Результативность (операционные результаты)&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Хорошее&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Увеличение выручки LTM по сравнению с АППГ 10.3%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Выручка за квартал увеличивается хотя бы в одном из 2х кварталов подряд: относительно прошлого периода ((15.6)% и 24.4%) и АППГ (39.4% и 6.8%).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Рентабельность EBITDA LTM составила 4.5%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Чистая прибыль 23 354 тыс. руб.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Качество активов и управление ими&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Удовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;КТЛ 5.22, выше порогового значения 1.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость ДЗ LTM 9 дней - соответствует оборачиваемости большинства компаний данного ОКК (63 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость КЗ LTM 5 дней - соответствует оборачиваемости большинства компаний данного ОКК (48 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость запасов LTM 107 дней - выше оборачиваемости большинства компаний данного ОКК (59 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Возможность исполнения обязательств&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Хорошее&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Долг(за искл. субор. займов)/EBITDA LTM 3.39, ниже порогового значения 3.5 для данного ОКК.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;ICR LTM 2.94 - выше порогового значения 1.5.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Доля ЧА в структуре баланса 57.8% (&amp;gt;=20%).&lt;br&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="40" y="10" width="560" height="380" as="geometry" />
        </mxCell>
        <mxCell id="dUc_57Bg2O3dePhUninS-2" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;xslData;XLSY;v2;5678;-1;-1;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&quot; style=&quot;border-collapse: collapse;font-family:Calibri;font-size:11pt;color:#000;background-color:transparent;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height:226.29pt&quot;&gt;&lt;td style=&quot;width:820.7142857142857pt;white-space:normal;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;Автовывод: Финансовое состояние, рассчитанное моделью &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Результативность (операционные результаты)&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Снижение выручки LTM по сравнению с АППГ (31.9)%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Выручка за квартал снижается в течение 2х кварталов подряд: относительно прошлого периода ((5.5)% и (27.5)%) и АППГ ((57.1)% и (37.6)%).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Рентабельность EBITDA LTM составила 6.3%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Чистая прибыль 39 725 тыс. руб.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Качество активов и управление ими&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Удовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;КТЛ 3.04, выше порогового значения 1.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость ДЗ LTM 75 дней - соответствует оборачиваемости большинства компаний данного ОКК (87 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость КЗ LTM 83 дней - соответствует оборачиваемости большинства компаний данного ОКК (92 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость запасов LTM 135 дней - выше оборачиваемости большинства компаний данного ОКК (89 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Возможность исполнения обязательств&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Долг(за искл. субор. займов)/EBITDA LTM 3.88, соответствует диапазону от 3.5 до 4 для данного ОКК.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;ICR LTM 1.48 - ниже порогового значения 1.5.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Доля ЧА в структуре баланса 29.6% (&amp;gt;=20%).&lt;br&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="580" y="540" width="560" height="380" as="geometry" />
        </mxCell>
        <mxCell id="dUc_57Bg2O3dePhUninS-3" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;xslData;XLSY;v2;5822;-1;-1;BwaAAgAAB5sCAAAJKwQAAAFABgAAAuQUAAADOwQAAARegwADQAOAA8A+wAHAAAA+hIAAAAA+wKLAQAA+gAYAAAAMQAyADAAMQAzADEAMwA2ADYAOQA5ADcAMQA1ADAAOQA5ADgAMwAuAHgAbABzAHgAAhYAAAAyADAANwAzADQAOQA3ADYAQABzAGkAZwBtAGEALgBzAGIAcgBmAC4AcgB1AAMBAAAAMQAEFAAAADIAMAAyADUALQAwADcALQAwADkAVAAxADEAOgA0ADAAOgAyADYAWgAFFAAAADIAMAAyADUALQAwADcALQAxADcAVAAxADEAOgA1ADMAOgAyADUAWgD7AL0AAAD6Bz4AAAAvAGgAbwBtAGUALwBzAGkAZwBtAGEALgBzAGIAcgBmAC4AcgB1AEAAMgAwADcAMwA0ADkANwA2AC8AFwQwBDMEQARDBDcEOgQ4BC8AMQAyADAAMQAzADEAMwA2ADYAOQA5ADcAMQA1ADAAOQA5ADgAMwAuAHgAbABzAHgACRQAAAA0ADUAZQA3AGEAMAA2ADAAMwBkADAAOQA2ADUAMgBkADUAYQA5AGQACwQAAAAxADAANAA5APswCwAAAPr7AAQAAAAAAAAAHwAAAAAAAAAAAQsAAAACBgAAAAAEAQAAAAMAAAAADwAAAADeAQAAANkBAAABQQAAAAAGKAAAACQEOAQ9BDAEPQRBBD4EMgQ+BDUEIABBBD4EQQRCBD4ETwQ9BDgENQQBBAEAAAACAQIDBgQAAABBADQAAjwAAAADGQAAAAIEAQAAAAMEAQAAAAUFAAAAACCJY0AGAQEDGQAAAAIEAgAAAAMEAgAAAAUFAAAAAAAkL0AGAQEWJQAAABcgAAAAFBsAAAAABAAAAEEANAABBAAAAAAAAAACBAAAAEEANAALCgAAAAEFzczMzMxMLEAOPAAAAAAFR+F6FK7HMUABBczMzMzMDDNAAgVH4XoUrscxQAMFzMzMzMwMM0AEBXsUrkfheh5ABQV7FK5H4XoeQA8/AAAAAQEJAgEAAwEABAQBAAAABQEABgEACAQBAAAACQQBAAAACgRYAgAAAAEBCwEADwRkAAAAEAEAEQEBEgRYAgAAEAYAAAAAAQABAQAJMgAAACMtAAAAxQUAAJEBAAARAwAAAAAAAADIEgAAAAAAAAAHDgAAAAABAAAAAAAAAAAAkgEABQAAAAAHAAAAABsAAAAAKT4AAAAEBggAAABBADQAQwAxAAUBAQcBAQgBAQkBAQoBAQsBAQwBAQ0BAQ4BAQ8BARABAREBARIBABMBABQBARUBAaAOAAAAmw4AAAGXAAAAAiEAAAAAAQEEBg4AAABQAFQAIABTAGEAbgBzAAYFAAAAAAAAIkADbAAAABAEMgRCBD4EMgRLBDIEPgQ0BDoAIAAkBDgEPQQwBD0EQQQ+BDIEPgQ1BCAAQQQ+BEEEQgQ+BE8EPQQ4BDUELAAgAEAEMARBBEEERwQ4BEIEMAQ9BD0EPgQ1BCAAPAQ+BDQENQQ7BEwETgQgAAFXAAAAAiEAAAAAAQEEBg4AAABQAFQAIABTAGEAbgBzAAYFAAAAAAAAIkADLAAAAC0AIAAdBDUEQwQ0BD4EMgQ7BDUEQgQyBD4EQAQ4BEIENQQ7BEwEPQQ+BDUEATkAAAACLQAAAAEGBgAAAAAEAAAAAAQGDgAAAEMAYQBsAGkAYgByAGkACQEBBgUAAAAAAAAmQAMCAAAACgABggAAAAIkAAAAAAEBBAYOAAAAUABUACAAUwBhAG4AcwAGBQAAAAAAACJABwEDA1QAAAAgBDUENwRDBDsETARCBDAEQgQ4BDIEPQQ+BEEEQgRMBCAAKAA+BD8ENQRABDAERgQ4BD4EPQQ9BEsENQQgAEAENQQ3BEMEOwRMBEIEMARCBEsEKQABOQAAAAItAAAAAQYGAAAAAAQAAAAABAYOAAAAQwBhAGwAaQBiAHIAaQAJAQEGBQAAAAAAACZAAwIAAAAgAAFTAAAAAiEAAAAAAQEEBg4AAABQAFQAIABTAGEAbgBzAAYFAAAAAAAAIkADKAAAAC0AIAAjBDQEPgQyBDsENQRCBDIEPgRABDgEQgQ1BDsETAQ9BD4ENQQBOQAAAAItAAAAAQYGAAAAAAQAAAAABAYOAAAAQwBhAGwAaQBiAHIAaQAJAQEGBQAAAAAAACZAAwIAAAAKAAGZAAAAAi0AAAABBgYAAAAABAAAAAAEBg4AAABDAGEAbABpAGIAcgBpAAkBAQYFAAAAAAAAJkADYgAAACEEPQQ4BDYENQQ9BDgENQQgADIESwRABEMERwQ6BDgEIABMAFQATQAgAD8EPgQgAEEEQAQwBDIEPQQ1BD0EOAROBCAAQQQgABAEHwQfBBMEIAAoADUALgA4ACkAJQAuAAoAAREBAAACLQAAAAEGBgAAAAAEAAAAAAQGDgAAAEMAYQBsAGkAYgByAGkACQEBBgUAAAAAAAAmQAPaAAAAEgRLBEAEQwRHBDoEMAQgADcEMAQgADoEMgQwBEAEQgQwBDsEIAA+BEIEPQQ+BEEEOARCBDUEOwRMBD0EPgQgAD8EQAQ1BDQESwQ0BEMESQQ1BDMEPgQgAEEEPQQ4BDYEMAQ1BEIEQQRPBCAAMgAgADoEMgQwBEAEQgQwBDsEMAQgAD8EPgQ0BEAETwQ0BCAAKAAoADEAOAAuADYAKQAlACAAOAQgACgANwAuADIAKQAlACkALAAgADAEPQQwBDsEPgQzBDgERwQ9BD4EIAAQBB8EHwQTBC4ACgAB2wAAAAItAAAAAQYGAAAAAAQAAAAABAYOAAAAQwBhAGwAaQBiAHIAaQAJAQEGBQAAAAAAACZAA6QAAAASBEsEQARDBEcEOgQwBCAANwQwBCAAOgQyBDAEQARCBDAEOwQgAD4EQgQ9BD4EQQQ4BEIENQQ7BEwEPQQ+BCAAEAQfBB8EEwQgAEEEPQQ4BDYEMAQ1BEIEQQRPBCAAMgAgADoEMgQwBEAEQgQwBDsEMAQgAD8EPgQ0BEAETwQ0BCAAKAAoADYALgAzACkAJQAgADgEIAAoADgAKQAlACkALgAKAAGLAAAAAi0AAAABBgYAAAAABAAAAAAEBg4AAABDAGEAbABpAGIAcgBpAAkBAQYFAAAAAAAAJkADVAAAACAENQQ9BEIEMAQxBDUEOwRMBD0EPgRBBEIETAQgAEUAQgBJAFQARABBACAATABUAE0AIABBBD4EQQRCBDAEMgQ4BDsEMAQgADUALgA1ACUALgAKAAF1AAAAAi0AAAABBgYAAAAABAAAAAAEBg4AAABDAGEAbABpAGIAcgBpAAkBAQYFAAAAAAAAJkADPgAAACcEOARBBEIEMARPBCAAPwRABDgEMQRLBDsETAQgADgAIAAxADYANQAgAEIESwRBBC4AIABABEMEMQQuAAoAAXAAAAACJAAAAAABAQQGDgAAAFAAVAAgAFMAYQBuAHMABgUAAAAAAAAiQAcBAwNCAAAAGgQwBEcENQRBBEIEMgQ+BCAAMAQ6BEIEOAQyBD4EMgQgADgEIABDBD8EQAQwBDIEOwQ1BD0EOAQ1BCAAOAQ8BDgEATkAAAACLQAAAAEGBgAAAAAEAAAAAAQGDgAAAEMAYQBsAGkAYgByAGkACQEBBgUAAAAAAAAmQAMCAAAAIAABPQAAAAIhAAAAAAEBBAYOAAAAUABUACAAUwBhAG4AcwAGBQAAAAAAACJAAxIAAAAtACAAJQQ+BEAEPgRIBDUENQQBOQAAAAItAAAAAQYGAAAAAAQAAAAABAYOAAAAQwBhAGwAaQBiAHIAaQAJAQEGBQAAAAAAACZAAwIAAAAKAAGDAAAAAi0AAAABBgYAAAAABAAAAAAEBg4AAABDAGEAbABpAGIAcgBpAAkBAQYFAAAAAAAAJkADTAAAABoEIgQbBCAAMwAuADMANgAsACAAMgRLBEgENQQgAD8EPgRABD4EMwQ+BDIEPgQzBD4EIAA3BD0EMARHBDUEPQQ4BE8EIAAxAC4ACgABDQEAAAItAAAAAQYGAAAAAAQAAAAABAYOAAAAQwBhAGwAaQBiAHIAaQAJAQEGBQAAAAAAACZAA9YAAAAeBDEEPgRABDAERwQ4BDIEMAQ1BDwEPgRBBEIETAQgABQEFwQgAEwAVABNACAAMwA2ACAANAQ9BDUEOQQgAC0AIABBBD4EPgRCBDIENQRCBEEEQgQyBEMENQRCBCAAPgQxBD4EQAQwBEcEOAQyBDAENQQ8BD4EQQRCBDgEIAAxBD4EOwRMBEgEOAQ9BEEEQgQyBDAEIAA6BD4EPAQ/BDAEPQQ4BDkEIAA0BDAEPQQ9BD4EMwQ+BCAAHgQaBBoEIAAoADQANAAgADQEPQQ1BDkEKQAuAAoAAQ0BAAACLQAAAAEGBgAAAAAEAAAAAAQGDgAAAEMAYQBsAGkAYgByAGkACQEBBgUAAAAAAAAmQAPWAAAAHgQxBD4EQAQwBEcEOAQyBDAENQQ8BD4EQQRCBEwEIAAaBBcEIABMAFQATQAgADQAOAAgADQEPQQ1BDkEIAAtACAAQQQ+BD4EQgQyBDUEQgRBBEIEMgRDBDUEQgQgAD4EMQQ+BEAEMARHBDgEMgQwBDUEPAQ+BEEEQgQ4BCAAMQQ+BDsETARIBDgEPQRBBEIEMgQwBCAAOgQ+BDwEPwQwBD0EOAQ5BCAANAQwBD0EPQQ+BDMEPgQgAB4EGgQaBCAAKAA3ADEAIAA0BD0ENQQ5BCkALgAKAAEbAQAAAi0AAAABBgYAAAAABAAAAAAEBg4AAABDAGEAbABpAGIAcgBpAAkBAQYFAAAAAAAAJkAD5AAAAB4EMQQ+BEAEMARHBDgEMgQwBDUEPAQ+BEEEQgRMBCAANwQwBD8EMARBBD4EMgQgAEwAVABNACAAMQAxADgAIAA0BD0ENQQ5BCAALQAgAEEEPgQ+BEIEMgQ1BEIEQQRCBDIEQwQ1BEIEIAA+BDEEPgRABDAERwQ4BDIEMAQ1BDwEPgRBBEIEOAQgADEEPgQ7BEwESAQ4BD0EQQRCBDIEMAQgADoEPgQ8BD8EMAQ9BDgEOQQgADQEMAQ9BD0EPgQzBD4EIAAeBBoEGgQgACgAMQA3ADEAIAA0BD0ENQQ5BCkALgAKAAF0AAAAAiQAAAAAAQEEBg4AAABQAFQAIABTAGEAbgBzAAYFAAAAAAAAIkAHAQMDRgAAABIEPgQ3BDwEPgQ2BD0EPgRBBEIETAQgADgEQQQ/BD4EOwQ9BDUEPQQ4BE8EIAA+BDEETwQ3BDAEQgQ1BDsETARBBEIEMgQBOQAAAAItAAAAAQYGAAAAAAQAAAAABAYOAAAAQwBhAGwAaQBiAHIAaQAJAQEGBQAAAAAAACZAAwIAAAAgAAFXAAAAAiEAAAAAAQEEBg4AAABQAFQAIABTAGEAbgBzAAYFAAAAAAAAIkADLAAAAC0AIAAdBDUEQwQ0BD4EMgQ7BDUEQgQyBD4EQAQ4BEIENQQ7BEwEPQQ+BDUEATkAAAACLQAAAAEGBgAAAAAEAAAAAAQGDgAAAEMAYQBsAGkAYgByAGkACQEBBgUAAAAAAAAmQAMCAAAACgAB7wAAAAItAAAAAQYGAAAAAAQAAAAABAYOAAAAQwBhAGwAaQBiAHIAaQAJAQEGBQAAAAAAACZAA7gAAAAUBD4EOwQzBCgANwQwBCAAOARBBDoEOwQuACAAQQRDBDEEPgRABC4AIAA3BDAEOQQ8BD4EMgQpAC8ARQBCAEkAVABEAEEAIABMAFQATQAgADMALgA5ADMALAAgADIESwRIBDUEIAA/BD4EQAQ+BDMEPgQyBD4EMwQ+BCAANwQ9BDAERwQ1BD0EOARPBCAAMwAuADUAIAA0BDsETwQgADQEMAQ9BD0EPgQzBD4EIAAeBBoEGgQuAAoAAZEAAAACLQAAAAEGBgAAAAAEAAAAAAQGDgAAAEMAYQBsAGkAYgByAGkACQEBBgUAAAAAAAAmQANaAAAASQBDAFIAIABMAFQATQAgADIALgA3ADMAIAAtACAAMgRLBEgENQQgAD8EPgRABD4EMwQ+BDIEPgQzBD4EIAA3BD0EMARHBDUEPQQ4BE8EIAAxAC4ANQAuAAoAAY0AAAACLQAAAAEGBgAAAAAEAAAAAAQGDgAAAEMAYQBsAGkAYgByAGkACQEBBgUAAAAAAAAmQANWAAAAFAQ+BDsETwQgACcEEAQgADIEIABBBEIEQARDBDoEQgRDBEAENQQgADEEMAQ7BDAEPQRBBDAEIAAzADEALgA4ACUAIAAoAD4APQAyADAAJQApAC4ACgDWAQAAAC0AAAABKAAAAAADAAAAAQEKAQMAAAABAQoCAwAAAAEBCgQDAAAAAQEKBQMAAAABAQoEIAAAAAULAAAAAAYAAAACAQAAABEFCwAAAAAGAAAAAgEAAAAIBjIAAAAHLQAAAAEGBgAAAAAEAAAAAAQGDgAAAEMAYQBsAGkAYgByAGkACQEBBgUAAAAAAAAmQA4pAAAAAyQAAAABAQEGBAAAAAACAQEHBAAAAAADAQEIBAAAAAAEAQEJBAAAAAACUgAAAAMeAAAABgQAAAAABwQAAAAACAQAAAAACQQAAAAADAQAAAAAAyoAAAAGBAAAAAAHBAAAAAAIBAAAAAAJBAAAAAAAAQENBgMAAAAIAQEMBAAAAAAPKgAAABAlAAAAAAQAAAAAAAAABA4AAAAeBDEESwRHBD0ESwQ5BAUEAAAAAAAAAAxOAAAAACIAAABUAGEAYgBsAGUAUwB0AHkAbABlAE0AZQBkAGkAdQBtADIAASIAAABQAGkAdgBvAHQAUwB0AHkAbABlAEwAaQBnAGgAdAAxADYAETcAAAAAMgAAAPoAEQAAAFMAbABpAGMAZQByAFMAdAB5AGwAZQBMAGkAZwBoAHQAMQD7AAQAAAAAAAAACAAAAAA=&quot; style=&quot;border-collapse: collapse;font-family:Calibri;font-size:11pt;color:#000;background-color:transparent;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height:240.43pt&quot;&gt;&lt;td style=&quot;width:820.7142857142857pt;white-space:normal;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;Автовывод: Финансовое состояние, рассчитанное моделью &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Результативность (операционные результаты)&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Удовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Снижение выручки LTM по сравнению с АППГ (5.8)%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Выручка за квартал относительно предыдущего снижается 2 квартала подряд ((18.6)% и (7.2)%), аналогично АППГ.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Выручка за квартал относительно АППГ снижается 2 квартала подряд ((6.3)% и (8)%).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Рентабельность EBITDA LTM составила 5.5%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Чистая прибыль 8 165 тыс. руб.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Качество активов и управление ими&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Хорошее&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;КТЛ 3.36, выше порогового значения 1.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость ДЗ LTM 36 дней - соответствует оборачиваемости большинства компаний данного ОКК (44 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость КЗ LTM 48 дней - соответствует оборачиваемости большинства компаний данного ОКК (71 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость запасов LTM 118 дней - соответствует оборачиваемости большинства компаний данного ОКК (171 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Возможность исполнения обязательств&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Долг(за искл. субор. займов)/EBITDA LTM 3.93, выше порогового значения 3.5 для данного ОКК.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;ICR LTM 2.73 - выше порогового значения 1.5.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Доля ЧА в структуре баланса 31.8% (&amp;gt;=20%).&lt;br&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="490" y="770" width="560" height="410" as="geometry" />
        </mxCell>
        <mxCell id="dUc_57Bg2O3dePhUninS-4" value="&quot;Автовывод: Финансовое состояние, рассчитанное моделью - Удовлетворительное&#xa;Результативность (операционные результаты) - Неудовлетворительное&#xa;Снижение выручки LTM по сравнению с АППГ (33.3)%.&#xa;Выручка за квартал увеличивается хотя бы в одном из 2х кварталов подряд: относительно прошлого периода ((95.8)% и 1772.9%) и АППГ ((76.5)% и 50.5%).&#xa;Рентабельность EBITDA LTM составила 22.3%.&#xa;Чистая прибыль 79 585 тыс. руб.&#xa;Качество активов и управление ими - Удовлетворительное&#xa;КТЛ 1.84, выше порогового значения 1.&#xa;Оборачиваемость ДЗ LTM 108 дней - соответствует оборачиваемости большинства компаний данного ОКК (135 дней).&#xa;Оборачиваемость КЗ LTM 183 дней - соответствует оборачиваемости большинства компаний данного ОКК (192 дней).&#xa;Оборачиваемость запасов LTM 340 дней - выше оборачиваемости большинства компаний данного ОКК (204 дней).&#xa;Возможность исполнения обязательств - Удовлетворительное&#xa;Чистый долг(за искл. субор. займов)/EBITDA LTM 3.63, соответствует диапазону от 3.5 до 4 для данного ОКК.&#xa;ICR LTM 2.1 - выше порогового значения 2.&#xa;Доля ЧА в структуре баланса 19.7% (&lt;20%).&#xa;&quot;" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="520" y="1180" width="560" height="330" as="geometry" />
        </mxCell>
        <mxCell id="dUc_57Bg2O3dePhUninS-5" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;x_xslData;XLSY;v2;4053;-1;-1;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&quot; style=&quot;color: rgb(0, 0, 0); font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: transparent; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; border-collapse: collapse; font-family: Calibri; font-size: 11pt;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height: 14pt;&quot;&gt;&lt;/tr&gt;&lt;tr style=&quot;height: 14pt;&quot;&gt;&lt;td style=&quot;width: 135pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;рейтинг (от 10 до 26)&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 89.375pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;ОКС&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 200pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;Кредитная история&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 96.875pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;вывод УФА&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height: 14pt;&quot;&gt;&lt;td style=&quot;width: 135pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;8&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 89.375pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;сокращать&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 200pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;просрочка 10 дней&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 96.875pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height: 14pt;&quot;&gt;&lt;td style=&quot;width: 135pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;10&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 89.375pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;наращивать&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 200pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;просрочка отсутствует&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 96.875pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height: 14pt;&quot;&gt;&lt;td style=&quot;width: 135pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;15&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 89.375pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;держать&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 200pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;просрочка отсутствует&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 96.875pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height: 14pt;&quot;&gt;&lt;td style=&quot;width: 135pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;17&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 89.375pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;сокращать&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 200pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;нарушены сроки возврата кредита&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 96.875pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height: 14pt;&quot;&gt;&lt;td style=&quot;width: 135pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;19&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 89.375pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;наращивать&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 200pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;просрочка 50 дней&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 96.875pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height: 14pt;&quot;&gt;&lt;td style=&quot;width: 135pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;20&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 89.375pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;держать&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 200pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;просрочка 30 дней&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 96.875pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height: 14pt;&quot;&gt;&lt;td style=&quot;width: 135pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;26&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 89.375pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;наращивать&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 200pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;span style=&quot;vertical-align: baseline; font-family: Calibri, serif, EmojiFont;&quot;&gt;просрочка 100 дней&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width: 96.875pt; vertical-align: bottom; border-width: 1px; border-style: solid; border-color: rgb(0, 0, 0);&quot;&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br class=&quot;Apple-interchange-newline&quot;&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="40" y="760" width="560" height="240" as="geometry" />
        </mxCell>
        <mxCell id="JJz8-9tXR7XxKiCPV7C5-7" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;xslData;XLSY;v2;5995;-1;-1;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&quot; style=&quot;border-collapse: collapse;font-family:Calibri;font-size:11pt;color:#000;background-color:transparent;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height:15.43pt&quot;&gt;&lt;td style=&quot;width:820.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-family:PT Sans;font-weight:bold;vertical-align:baseline;&quot;&gt;Финансовое состояние&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:240.43pt&quot;&gt;&lt;td style=&quot;width:820.7142857142857pt;white-space:normal;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;Автовывод: Финансовое состояние, рассчитанное моделью &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Результативность (операционные результаты)&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Удовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Снижение выручки LTM по сравнению с АППГ (5.8)%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Выручка за квартал относительно предыдущего снижается 2 квартала подряд ((18.6)% и (7.2)%), аналогично АППГ.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Выручка за квартал относительно АППГ снижается 2 квартала подряд ((6.3)% и (8)%).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Рентабельность EBITDA LTM составила 5.5%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Чистая прибыль 8 165 тыс. руб.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Качество активов и управление ими&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Хорошее&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;КТЛ 3.36, выше порогового значения 1.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость ДЗ LTM 36 дней - соответствует оборачиваемости большинства компаний данного ОКК (44 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость КЗ LTM 48 дней - соответствует оборачиваемости большинства компаний данного ОКК (71 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость запасов LTM 118 дней - соответствует оборачиваемости большинства компаний данного ОКК (171 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Возможность исполнения обязательств&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Долг(за искл. субор. займов)/EBITDA LTM 3.93, выше порогового значения 3.5 для данного ОКК.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;ICR LTM 2.73 - выше порогового значения 1.5.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Доля ЧА в структуре баланса 31.8% (&amp;gt;=20%).&lt;br&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="100" y="1160" width="560" height="430" as="geometry" />
        </mxCell>
        <mxCell id="JJz8-9tXR7XxKiCPV7C5-8" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;xslData;XLSY;v2;5851;-1;-1;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&quot; style=&quot;border-collapse: collapse;font-family:Calibri;font-size:11pt;color:#000;background-color:transparent;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height:15.43pt&quot;&gt;&lt;td style=&quot;width:820.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-family:PT Sans;font-weight:bold;vertical-align:baseline;&quot;&gt;Финансовое состояние&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:226.29pt&quot;&gt;&lt;td style=&quot;width:820.7142857142857pt;white-space:normal;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;Автовывод: Финансовое состояние, рассчитанное моделью &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Результативность (операционные результаты)&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Снижение выручки LTM по сравнению с АППГ (31.9)%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Выручка за квартал снижается в течение 2х кварталов подряд: относительно прошлого периода ((5.5)% и (27.5)%) и АППГ ((57.1)% и (37.6)%).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Рентабельность EBITDA LTM составила 6.3%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Чистая прибыль 39 725 тыс. руб.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Качество активов и управление ими&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Удовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;КТЛ 3.04, выше порогового значения 1.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость ДЗ LTM 75 дней - соответствует оборачиваемости большинства компаний данного ОКК (87 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость КЗ LTM 83 дней - соответствует оборачиваемости большинства компаний данного ОКК (92 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость запасов LTM 135 дней - выше оборачиваемости большинства компаний данного ОКК (89 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Возможность исполнения обязательств&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Неудовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Долг(за искл. субор. займов)/EBITDA LTM 3.88, соответствует диапазону от 3.5 до 4 для данного ОКК.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;ICR LTM 1.48 - ниже порогового значения 1.5.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Доля ЧА в структуре баланса 29.6% (&amp;gt;=20%).&lt;br&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="90" y="1590" width="560" height="400" as="geometry" />
        </mxCell>
        <mxCell id="JJz8-9tXR7XxKiCPV7C5-9" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;xslData;XLSY;v2;5791;-1;-1;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&quot; style=&quot;border-collapse: collapse;font-family:Calibri;font-size:11pt;color:#000;background-color:transparent;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height:15.43pt&quot;&gt;&lt;td style=&quot;width:820.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-family:PT Sans;font-weight:bold;vertical-align:baseline;&quot;&gt;Финансовое состояние&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:226.29pt&quot;&gt;&lt;td style=&quot;width:820.7142857142857pt;white-space:normal;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;Автовывод: Финансовое состояние, рассчитанное моделью &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Удовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Результативность (операционные результаты)&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Хорошее&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Увеличение выручки LTM по сравнению с АППГ 10.3%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Выручка за квартал увеличивается хотя бы в одном из 2х кварталов подряд: относительно прошлого периода ((15.6)% и 24.4%) и АППГ (39.4% и 6.8%).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Рентабельность EBITDA LTM составила 4.5%.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Чистая прибыль 23 354 тыс. руб.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Качество активов и управление ими&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Удовлетворительное&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;КТЛ 5.22, выше порогового значения 1.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость ДЗ LTM 9 дней - соответствует оборачиваемости большинства компаний данного ОКК (63 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость КЗ LTM 5 дней - соответствует оборачиваемости большинства компаний данного ОКК (48 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Оборачиваемость запасов LTM 107 дней - выше оборачиваемости большинства компаний данного ОКК (59 дней).&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;text-decoration:underline;vertical-align:baseline;&quot;&gt;Возможность исполнения обязательств&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;font-family:PT Sans;font-size:9pt;font-weight:bold;vertical-align:baseline;&quot;&gt;- Хорошее&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Долг(за искл. субор. займов)/EBITDA LTM 3.39, ниже порогового значения 3.5 для данного ОКК.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;ICR LTM 2.94 - выше порогового значения 1.5.&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Доля ЧА в структуре баланса 57.8% (&amp;gt;=20%).&lt;br&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="190" y="2040" width="560" height="400" as="geometry" />
        </mxCell>
        <mxCell id="JJz8-9tXR7XxKiCPV7C5-10" value="&lt;p&gt;1.Отстутствуют случаи возникновения просроченной задолженности 5 р.д. и выше в течение 180 дней до даты оценки&lt;/p&gt;&lt;p&gt;Примеры: отсутствуют случаи нарушения сроков возврата кредита, наличия текущей просрочки от 1 дня (у нас в банке этот есть в АС КЮЛ).&lt;/p&gt;&lt;p&gt;3. заемщик имеет положительную кредитную историю&lt;/p&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="180" y="2510" width="540" height="140" as="geometry" />
        </mxCell>
        <mxCell id="JJz8-9tXR7XxKiCPV7C5-11" value="&lt;p&gt;если у модели итоговый вывод по уровню риска: &quot;риск высокий (приемлемый)&quot;, &quot;риск средний&quot;, &quot;риск низкий&quot;, он же Вывод﻿, то хорошо.&lt;/p&gt;&lt;p&gt;Если у модели риск &quot;высокий (неприемлемый)&quot; он же Вывод 2 ,то плохо&lt;/p&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="180" y="2650" width="560" height="100" as="geometry" />
        </mxCell>
        <mxCell id="JJz8-9tXR7XxKiCPV7C5-12" value="&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;b style=&quot;color: rgb(33, 202, 154);&quot;&gt; Вывод №1&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b style=&quot;color: rgb(33, 202, 154);&quot;&gt;«Модель ДДС утверждена. Заложенные в модель структура денежных потоков и используемые предпосылки построения модели ДДС позволяют сделать вывод о возможности Контрагента исполнять свои обязательства»:&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b style=&quot;color: rgb(33, 202, 154);&quot;&gt; риск высокий (приемлемый), риск средний, риск низкий﻿.&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b style=&quot;color: rgb(33, 202, 154);&quot;&gt;﻿&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;﻿&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 113, 83);&quot;&gt;﻿Вывод №2&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(255, 113, 83);&quot;&gt;«Модель ДДС утверждена, однако заложенная в модель структура денежных потоков и используемые предпосылки построения модели ДДС позволяют сделать вывод о невозможности Контрагента исполнять свои обязательства»: риск высокий (неприемлемый). &lt;/span&gt;&lt;/p&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="300" y="2820" width="560" height="280" as="geometry" />
        </mxCell>
        <UserObject label="You are CreditDecisionAgent, a specialized AI agent for automated credit decisioning in a large bank. &#xa;You must perform two phases:&#xa;&#xa;&#xa;1. **Detailed criterion-by-criterion analysis** (Custom Chain of Thought).&#xa;2. **Return the final decision** in strict JSON format (Structured Output).&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ������ INPUT BLOCKS (the LLM receives exactly these 4 textual blocks, verbatim)&#xa;&#xa;&#xa;#### 1. АС УФА:&#xa;{ufa_block}&#xa;&#xa;&#xa;#### 2. Рейтинг:&#xa;{rating_block}&#xa;&#xa;&#xa;#### 3. ОКС:&#xa;{oks_block}&#xa;&#xa;&#xa;#### 4. Cashflow:&#xa;{cf_block}&#xa;&#xa;&#xa;#### 5. Кредитная история:&#xa;{history_block}&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ⚙️ MODULE 1: Analysis Schema&#xa;&#xa;&#xa;Each criterion must be evaluated with:&#xa;- `name`&#xa;- `value`&#xa;- `status`: &quot;ХОРОШО&quot; | &quot;ПЛОХО&quot;&#xa;- `comment`&#xa;- `weight` (default 1 unless specified)&#xa;&#xa;&#xa;Available criteria:&#xa;- Динамика бизнеса (выручка LTM, EBITDA LTM, квартальный рост)&#xa;- Оборачиваемость запасов, ДЗ, КЗ LTM&#xa;- Уровень долговой нагрузки (debt/EBITDA, ICR)&#xa;- Текущая ликвидность (КТЛ)&#xa;- Рентабельность (чистая прибыль, EBITDA-margin)&#xa;- Доля чистых активов&#xa;- Рейтинг&#xa;- Собственный оборотный капитал&#xa;- Соответствие ОКС&#xa;- Вывод модели CF (Вывод №1 vs №2)&#xa;- Кредитная история (наличие просрочек)&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ������ MODULE 2: Custom Chain of Thought&#xa;&#xa;&#xa;You must analyze **each criterion step-by-step**, with this structure:&#xa;&#xa;&#xa;For criterion **[NAME]**:&#xa;1. explanation: &quot;Проверяем [NAME]: значение = X, порог = Y&quot;&#xa;2. determine status: &quot;ХОРОШО&quot; or &quot;ПЛОХО&#xa;3. comment: короткое объяснение&#xa;4. record weight: default 1 (or overridden)&#xa;&#xa;&#xa;Proceed through all criteria. After each, retain reasoning in the response.&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ������ MODULE 3: Aggregation Rule&#xa;&#xa;&#xa;After evaluating all criteria:&#xa;- If **any** criterion.status == &quot;ПЛОХО&quot; → final_decision = &quot;ОТКАЗ&quot;&#xa;- Else → final_decision = &quot;ОДОБРЕНО&quot;&#xa;&#xa;&#xa;final_comment must list **all плохие критерии** (if отказ) или общий позитивный вывод.&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ������ MODULE 4: JSON Structured Output&#xa;&#xa;&#xa;Return *only* the following JSON (no extra text outside it):&#xa;&#xa;&#xa;```json&#xa;{&#xa;  &quot;criteria&quot;: [&#xa;    {&quot;name&quot;: &quot;...&quot;, &quot;value&quot;: &quot;...&quot;, &quot;status&quot;: &quot;ХОРОШО/ПЛОХО&quot;, &quot;comment&quot;: &quot;...&quot;, &quot;weight&quot;: 1},&#xa;    ... (one entry per criterion)&#xa;  ],&#xa;  &quot;final_decision&quot;: &quot;ОДОБРЕНО/ОТКАЗ&quot;,&#xa;  &quot;final_comment&quot;: &quot;...&quot;&#xa;}" link="You are CreditDecisionAgent, a specialized AI agent for automated credit decisioning in a large bank. &#xa;You must perform two phases:&#xa;&#xa;&#xa;1. **Detailed criterion-by-criterion analysis** (Custom Chain of Thought).&#xa;2. **Return the final decision** in strict JSON format (Structured Output).&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ������ INPUT BLOCKS (the LLM receives exactly these 4 textual blocks, verbatim)&#xa;&#xa;&#xa;#### 1. АС УФА:&#xa;{ufa_block}&#xa;&#xa;&#xa;#### 2. Рейтинг:&#xa;{rating_block}&#xa;&#xa;&#xa;#### 3. ОКС:&#xa;{oks_block}&#xa;&#xa;&#xa;#### 4. Cashflow:&#xa;{cf_block}&#xa;&#xa;&#xa;#### 5. Кредитная история:&#xa;{history_block}&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ⚙️ MODULE 1: Analysis Schema&#xa;&#xa;&#xa;Each criterion must be evaluated with:&#xa;- `name`&#xa;- `value`&#xa;- `status`: &quot;ХОРОШО&quot; | &quot;ПЛОХО&quot;&#xa;- `comment`&#xa;- `weight` (default 1 unless specified)&#xa;&#xa;&#xa;Available criteria:&#xa;- Динамика бизнеса (выручка LTM, EBITDA LTM, квартальный рост)&#xa;- Оборачиваемость запасов, ДЗ, КЗ LTM&#xa;- Уровень долговой нагрузки (debt/EBITDA, ICR)&#xa;- Текущая ликвидность (КТЛ)&#xa;- Рентабельность (чистая прибыль, EBITDA-margin)&#xa;- Доля чистых активов&#xa;- Рейтинг&#xa;- Собственный оборотный капитал&#xa;- Соответствие ОКС&#xa;- Вывод модели CF (Вывод №1 vs №2)&#xa;- Кредитная история (наличие просрочек)&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ������ MODULE 2: Custom Chain of Thought&#xa;&#xa;&#xa;You must analyze **each criterion step-by-step**, with this structure:&#xa;&#xa;&#xa;For criterion **[NAME]**:&#xa;1. explanation: &quot;Проверяем [NAME]: значение = X, порог = Y&quot;&#xa;2. determine status: &quot;ХОРОШО&quot; or &quot;ПЛОХО&#xa;3. comment: короткое объяснение&#xa;4. record weight: default 1 (or overridden)&#xa;&#xa;&#xa;Proceed through all criteria. After each, retain reasoning in the response.&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ������ MODULE 3: Aggregation Rule&#xa;&#xa;&#xa;After evaluating all criteria:&#xa;- If **any** criterion.status == &quot;ПЛОХО&quot; → final_decision = &quot;ОТКАЗ&quot;&#xa;- Else → final_decision = &quot;ОДОБРЕНО&quot;&#xa;&#xa;&#xa;final_comment must list **all плохие критерии** (if отказ) или общий позитивный вывод.&#xa;&#xa;&#xa;------&#xa;&#xa;&#xa;### ������ MODULE 4: JSON Structured Output&#xa;&#xa;&#xa;Return *only* the following JSON (no extra text outside it):&#xa;&#xa;&#xa;```json&#xa;{&#xa;  &quot;criteria&quot;: [&#xa;    {&quot;name&quot;: &quot;...&quot;, &quot;value&quot;: &quot;...&quot;, &quot;status&quot;: &quot;ХОРОШО/ПЛОХО&quot;, &quot;comment&quot;: &quot;...&quot;, &quot;weight&quot;: 1},&#xa;    ... (one entry per criterion)&#xa;  ],&#xa;  &quot;final_decision&quot;: &quot;ОДОБРЕНО/ОТКАЗ&quot;,&#xa;  &quot;final_comment&quot;: &quot;...&quot;&#xa;}" id="DvTzBklmQQ-uR9xNobqU-1">
          <mxCell style="text;whiteSpace=wrap;" parent="1" vertex="1">
            <mxGeometry x="200" y="3230" width="560" height="1660" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="CF2Xue_zBJq6MxR_8Y5s-1" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;xslData;XLSY;v2;6012;-1;-1;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BDgENQQgAD8EPgQ6BDAENwQwBEIENQQ7BE8EIAA0BD4EOwQzBD4EMgQ+BDkEIAA9BDAEMwRABEMENwQ6BDgEAPMIAAAD7ggAAB8EQAQ1BDIESwRIBDUEPQQ4BDUEIAAyBCAAPgRCBD0EPgRIBDUEPQQ4BDgEIABDBEcEMARBBEIEPQQ4BDoEPgQyBCAAEwRABEMEPwQ/BEsELAAgAEMEOgQwBDcEMAQ9BD0EPgQ5BCAAMgQgAB8ENQRABDUERwQ9BDUEIAAxACAAHwRABDgEOwQ+BDYENQQ9BDgETwQgAKsAIQQ+BEEEQgQwBDIEIAATBEAEQwQ/BD8ESwS7ACAAOgQgABQEPgQzBD4EMgQ+BEAEQwQsACAAQQQ+BD4EQgQ9BD4ESAQ1BD0EOARPBCAAPwQ+BDoEMAQ3BDAEQgQ1BDsENQQ5BCAAFAQ+BDsEMwQvAEUAQgBJAFQARABBACwAIABDBEEEQgQwBD0EMAQyBDsEOAQyBDAENQQ8BD4EMwQ+BCAAPQQwBCAAOgQwBDYENARDBE4EIAA+BEIERwQ1BEIEPQRDBE4EIAA0BDAEQgRDBCAAKAA/BD4EIAAgBCEEEQQjBCkALAAgAEMEQAQ+BDIEPQRPBDoACgBBBCAAMQQ7BDgENgQwBDkESAQ1BDkEIAA+BEIERwQ1BEIEPQQ+BDkEIAA0BDAEQgRLBCAAKAA/BD4EIAAgBCEEEQQjBCkALAAgAEEEOwQ1BDQEQwROBEkENQQ5BCAANwQwBCAANAQwBEIEPgQ5BCAANwQwBDoEOwROBEcENQQ9BDgETwQgABQEPgQzBD4EMgQ+BEAEMAQsACAAEyAgADEEPgQ7BDUENQQgADMALAA1ACAAKAAiBEAENQRFBCAARgQ1BDsESwRFBCAAPwRPBEIEOAQgADQENQRBBE8EQgRLBEUEKQAgACgAMgQ6BDsETgRHBDgEQgQ1BDsETAQ9BD4EKQA7AAoAOAQ7BDgEIABBBD0EOAQ2BDUEPQQ4BDUEIABBBD4EPgRCBD0EPgRIBDUEPQQ4BE8EIAA/BD4EOgQwBDcEMARCBDUEOwQ1BDkEIAAUBD4EOwQzBC8ARQBCAEkAVABEAEEAIAA0BD4EIAA+BEIEQAQ4BEYEMARCBDUEOwRMBD0EPgQzBD4EIAA3BD0EMARHBDUEPQQ4BE8ELgAKABIEIABABDAEQQRHBDUEQgQgABQEPgQ7BDMEMAQgADIEOgQ7BE4ERwQwBE4EQgRBBE8EIAAwBDMENQQ9BEIEQQQ6BDgEOQQgAEQEMAQ6BEIEPgRABDgEPQQzBC4ACgASBCAAQAQwBEEERwQ1BEIEIAAUBD4EOwQzBDAEIAA9BDUEIAAyBDoEOwROBEcEMAROBEIEQQRPBCAAPwRABDUENAQ+BEEEQgQwBDIEOwQ1BD0EPQRLBDUEIABDBEcEMARBBEIEPQQ4BDoEQwQoADAEPAQpACAAEwRABEMEPwQ/BEsELAAgAEMEOgQwBDcEMAQ9BD0EPgQ5BCAAMgQgAB8ENQRABDUERwQ9BDUEIAAxACAAHwRABDgEOwQ+BDYENQQ9BDgETwQgAKsAIQQ+BEEEQgQwBDIEIAATBEAEQwQ/BD8ESwS7ACAAOgQgABQEPgQzBD4EMgQ+BEAEQwQsACAANwQwBDkEPARLBCwAIAA6BEAENQQ0BDgEQgRLBCAAOAQgADgEPQRLBDUEIAA0BDUEPQQ1BDYEPQRLBDUEIAA+BDEETwQ3BDAEQgQ1BDsETARBBEIEMgQwBCwAIABBBEMEMQQ+BEAENAQ4BD0EOARABD4EMgQwBD0EPQRLBDUEIABBBDsENQQ0BEMETgRJBDgEPAQoADgEPAQ4BCkAIABBBD8EPgRBBD4EMQQ+BDwEKAAwBDwEOAQpADoACgAxACkAIAA3BDAEOQQ8BEsELAAgADoEPgQ9BDIENQRABEIEOARABD4EMgQwBD0EPQRLBDUEIAAyBCAAMgQ1BDoEQQQ1BDsETwQgACgAPwRDBEIENQQ8BCAAMgRLBD8EQwRBBDoEMAQgAD8EQAQ+BEEEQgRLBEUEIAAyBDUEOgRBBDUEOwQ1BDkELAAgAD8EMARABDAEPAQ1BEIEQARLBCAAOgQ+BEIEPgRABEsERQQgAEEEPgQzBDsEMARBBD4EMgQwBD0ESwQgAEEEIAARBDAEPQQ6BD4EPAQpACwAIAA4BCAAPgREBD4EQAQ8BDsENQQ9BDgENQQgADcEMAQ7BD4EMwQwBCAANAQwBD0EPQRLBEUEIAAyBDUEOgRBBDUEOwQ1BDkEIAAyBCAAPwQ+BDsETAQ3BEMEIAARBDAEPQQ6BDAEIABBBCAAPwQ1BEAENQQ0BDAERwQ1BDkEIAARBDAEPQQ6BEMELgAKADIAKQAgADQENQQ9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&quot; style=&quot;border-collapse: collapse;font-family:Calibri;font-size:11pt;color:#000;background-color:transparent;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;Код&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;Краткое наименование&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;Полное наименование&lt;/span&gt;&lt;/td&gt;&lt;td colspan=&quot;4&quot; rowspan=&quot;1&quot; style=&quot;width:493.57142857142844pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;Ответ LLM&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;codeForPrint&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;name&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;text&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;Сокращенное&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;Знак&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;Значение&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:86.42857142857142pt;white-space:nowrap;text-align:center;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;font-weight:bold;vertical-align:baseline;&quot;&gt;Ед изм/валюта&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:311.15pt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V1&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:normal;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении участников Группы, указанной в Перечне 1 Приложения «Состав Группы» к Договору, соотношения показателей Долг/EBITDA, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 3,5 (Трех целых пяти десятых) (включительно);&lt;br&gt;или снижение соотношения показателей Долг/EBITDA до отрицательного значения.&lt;br&gt;В расчет Долга включаются агентский факторинг.&lt;br&gt;В расчет Долга не включаются предоставленные участнику(ам) Группы, указанной в Перечне 1 Приложения «Состав Группы» к Договору, займы, кредиты и иные денежные обязательства, субординированные следующим(ими) способом(ами):&lt;br&gt;1) займы, конвертированные в векселя (путем выпуска простых векселей, параметры которых согласованы с Банком), и оформление залога данных векселей в пользу Банка с передачей Банку.&lt;br&gt;2) денежные обязательства участников Группы, в отношении которых между соответствующим участником Группы, Банком и другими кредиторами заключено(ы) соглашение(ия) кредиторов о порядке удовлетворения их требований к соответствующему участнику Группы на условиях, согласованных с Банком.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Долг / EBITDA по ГК&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;3,5&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:86.42857142857142pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="90" y="4950" width="560" height="1310" as="geometry" />
        </mxCell>
        <mxCell id="CF2Xue_zBJq6MxR_8Y5s-2" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;xslData;XLSY;v2;4583;-1;-1;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EQAQQAsACAAQwRBBEIEMAQ9BDAEMgQ7BDgEMgQwBDUEPAQ+BDMEPgQgAD0EMAQgADoEMAQ2BDQEQwROBCAAPgRCBEcENQRCBD0EQwROBCAANAQwBEIEQwQgACgAPwQ+BCAAIAQhBBEEIwQpACwAIABDBEAEPgQyBD0ETwQ6AAoAQQQgADEEOwQ4BDYEMAQ5BEgENQQ5BCAAPgRCBEcENQRCBD0EPgQ5BCAANAQwBEIESwQgACgAPwQ+BCAAIAQhBBEEIwQpACwAIABBBDsENQQ0BEMETgRJBDUEOQQgADcEMAQgADQEMARCBD4EOQQgADcEMAQ6BDsETgRHBDUEPQQ4BE8EIAAUBD4EMwQ+BDIEPgRABDAELAAgABMgIAAxBD4EOwQ1BDUEIAA0ACwANQAgACgAJwQ1BEIESwRABDUERQQgAEYENQQ7BEsERQQgAD8ETwRCBDgEIAA0BDUEQQRPBEIESwRFBCkAIAAoADIEOgQ7BE4ERwQ4BEIENQQ7BEwEPQQ+BCkAOwAKADgEOwQ4BCAAQQQ9BDgENgQ1BD0EOAQ1BCAAQQQ+BD4EQgQ9BD4ESAQ1BD0EOARPBCAAPwQ+BDoEMAQ3BDAEQgQ1BDsENQQ5BCAAFAQ+BDsEMwQvAEUAQgBJAFQARABBACAANAQ+BCAAPgRCBEAEOARGBDAEQgQ1BDsETAQ9BD4EMwQ+BCAANwQ9BDAERwQ1BD0EOARPBC4ACgASBCAAQAQwBEEERwQ1BEIEIAAUBD4EOwQzBDAEIAA9BDUEIAAyBDoEOwROBEcEMAROBEIEQQRPBCAAPgQxBE8ENwQwBEIENQQ7BEwEQQRCBDIEMAQgAD8ENQRABDUENAQgAEEEOwQ1BDQEQwROBEkEOAQ8BDgEIAA7BDgERgQwBDwEOAQ6ACAAKAQYBBQEHgQSBCAAFwQQBCMEIAQgABwEIwQlBBAEHAQVBBQEHgQSBBgEJwQuAAAfAAAAAxoAAAAUBD4EOwQzBCAALwAgAEUAQgBJAFQARABBAAAJAAAAAwQAAAA8AD0AAH8CAAADegIAAB8EQAQ1BDIESwRIBDUEPQQ4BDUEIAAyBCAAPgRCBD0EPgRIBDUEPQQ4BDgEIAAaBDsEOAQ1BD0EQgQwBCAAQQQ+BD4EQgQ9BD4ESAQ1BD0EOARPBCAAPwQ+BDoEMAQ3BDAEQgQ1BDsENQQ5BCAAFAQ+BDsEMwQvAEUAQgBJAFQARABBACwAIABDBEEEQgQwBD0EMAQyBDsEOAQyBDAENQQ8BD4EMwQ+BCAAPQQwBCAAOgQwBDYENARDBE4EIAA+BEIERwQ1BEIEPQRDBE4EIAA0BDAEQgRDBCAAKAA/BD4EIAAgBCEEEQQjBCkALAAgAEMEQAQ+BDIEPQRPBDoACgBBBCAAMQQ7BDgENgQwBDkESAQ1BDkEIAA+BEIERwQ1BEIEPQQ+BDkEIAA0BDAEQgRLBCAAKAA/BD4EIAAgBCEEEQQjBCkALAAgAEEEOwQ1BDQEQwROBEkENQQ5BCAANwQwBCAANAQwBEIEPgQ5BCAANwQwBDoEOwROBEcENQQ9BDgETwQgABQEPgQzBD4EMgQ+BEAEMAQsACAAEyAgADEEPgQ7BDUENQQgADQAIAAoACcENQRCBEsEQAQ1BEUEKQAgACgAMgQ6BDsETgRHBDgEQgQ1BDsETAQ9BD4EKQA7AAoAOAQ7BDgEIABBBD0EOAQ2BDUEPQQ4BDUEIABBBD4EPgRCBD0EPgRIBDUEPQQ4BE8EIAA/BD4EOgQwBDcEMARCBDUEOwQ1BDkEIAAUBD4EOwQzBC8ARQBCAEkAVABEAEEAIAA0BD4EIAA+BEIEQAQ4BEYEMARCBDUEOwRMBD0EPgQzBD4EIAA3BD0EMARHBDUEPQQ4BE8ELgDeAgAAAC0AAAABKAAAAAADAAAAAQEKAQMAAAABAQoCAwAAAAEBCgQDAAAAAQEKBQMAAAABAQoEIAAAAAULAAAAAAYAAAACAQAAABEFCwAAAAAGAAAAAgEAAAAIBnsAAAAHKgAAAAEGAwAAAAIBAQQGDgAAAEMAYQBsAGkAYgByAGkACQEBBgUAAAAAAAAmQAdHAAAAAQYDAAAAAgEBBAYuAAAAVgBhAHIAKAAtAC0AdAB5AHAAbwAtAGYAbwBuAHQALQBmAGEAbQBpAGwAeQApAAYFAAAAAAAAJkAOKQAAAAMkAAAAAQEBBgQAAAAAAgEBBwQAAAAAAwEBCAQAAAAABAEBCQQAAAAAAhEBAAADHgAAAAYEAAAAAAcEAAAAAAgEAAAAAAkEAAAAAAwEAAAAAAMeAAAABgQAAAAABwQAAAAACAQAAAAACQQAAAAADAQAAAAAAy0AAAAGBAAAAAAHBAAAAAAIBAAAAAAJBAAAAAAAAQENBgYAAAAAAQAHAQQMBAAAAAADKgAAAAYEAAAAAAcEAAAAAAgEAAAAAAkEAAAAAAABAQ0GAwAAAAgBAQwEAAAAAAMwAAAABgQAAAAABwQAAAAAAwEBCAQBAAAACQQAAAAAAAEBDQYGAAAAAAEGBwEBDAQAAAAAAzAAAAAGBAAAAAAHBAAAAAADAQEIBAEAAAAJBAAAAAAAAQENBgYAAAAAAQAHAQQMBAAAAAAPKgAAABAlAAAAAAQAAAAAAAAABA4AAAAeBDEESwRHBD0ESwQ5BAUEAAAAAAAAAAxOAAAAACIAAABUAGEAYgBsAGUAUwB0AHkAbABlAE0AZQBkAGkAdQBtADIAASIAAABQAGkAdgBvAHQAUwB0AHkAbABlAEwAaQBnAGgAdAAxADYAETcAAAAAMgAAAPoAEQAAAFMAbABpAGMAZQByAFMAdAB5AGwAZQBMAGkAZwBoAHQAMQD7AAQAAAAAAAAACAAAAAA=&quot; style=&quot;border-collapse: collapse;font-family:Calibri;font-size:11pt;color:#000;background-color:transparent;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height:141.43pt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V1&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:normal;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении Клиента соотношения показателей Долг/EBITDA, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 4,5 (Четырех целых пяти десятых) (включительно);&lt;br&gt;или снижение соотношения показателей Долг/EBITDA до отрицательного значения.&lt;br&gt;В расчет Долга не включаются обязательства перед следующими лицами: ШИДОВ ЗАУР МУХАМЕДОВИЧ.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Долг / EBITDA&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;4,5&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V1&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении Клиента соотношения показателей Долг/EBITDA, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 4 (Четырех) (включительно);&lt;br&gt;или снижение соотношения показателей Долг/EBITDA до отрицательного значения.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Долг / EBITDA&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;4&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="120" y="6270" width="560" height="260" as="geometry" />
        </mxCell>
        <mxCell id="CF2Xue_zBJq6MxR_8Y5s-3" value="&lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;xslData;XLSY;v2;13232;-1;-1;&quot; style=&quot;border-collapse: collapse;font-family:Calibri;font-size:11pt;color:#000;background-color:transparent;&quot;&gt;&lt;tbody&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V1&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении участников Группы, указанной в Перечне 1 Приложения «Состав Группы» к Договору, соотношения показателей Долг/EBITDA, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 4 (Четырех) (включительно);&lt;br&gt;или снижение соотношения показателей Долг/EBITDA до отрицательного значения.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Долг / EBITDA по ГК&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;4&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V1&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении Клиента соотношения показателей Долг/EBITDA, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 2,5 (Двух целых пяти десятых) (включительно);&lt;br&gt;или снижение соотношения показателей Долг/EBITDA до отрицательного значения.&lt;br&gt;В расчет Долга не включаются предоставленные Клиенту займы, кредиты и иные денежные обязательства, субординированные следующим(ими) способом(ами):&lt;br&gt;1) займы, конвертированные в векселя (путем выпуска простых векселей, параметры которых согласованы с Банком), и оформление залога данных векселей в пользу Банка с передачей Банку.&lt;br&gt;2) денежные обязательства Клиента, в отношении которых между Клиентом, Банком и иными кредиторами заключено(ы) соглашение(ия) кредиторов о порядке удовлетворения их требований к Клиенту на условиях, согласованных с Банком.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Долг / EBITDA&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;2,5&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V1&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении Клиента соотношения показателей Долг/EBITDA, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 3 (Трех) (включительно);&lt;br&gt;или снижение соотношения показателей Долг/EBITDA до отрицательного значения.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Долг / EBITDA&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;3&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V2&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении Клиента соотношения показателей Чистый долг/EBITDA, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 5 (Пяти) (включительно);&lt;br&gt;или снижение соотношения показателей Чистый долг/EBITDA до отрицательного значения.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Чистый долг / EBITDA&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;5&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:86.42857142857142pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V2&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении участников Группы, указанной в Перечне 1 Приложения «Состав Группы» к Договору, соотношения показателей Чистый долг/EBITDA, устанавливаемого на каждую отчетную дату и на дату выдачи кредитных средств (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, или с даты первой выдачи кредита (включительно) (в зависимости от того, какое(ая) событие (дата) наступит ранее) – более 5 (Пяти) (включительно);&lt;br&gt;или снижение соотношения показателей Чистый долг/EBITDA до отрицательного значения.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Чистый долг / EBITDA по ГК&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;5&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:86.42857142857142pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V2&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении Клиента соотношения показателей Чистый долг/EBITDA, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 4 (Четырех) (включительно);&lt;br&gt;или снижение соотношения показателей Чистый долг/EBITDA до отрицательного значения.&lt;br&gt;В расчет Чистого Долга включаются непокрытые аккредитивы.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Чистый долг / EBITDA&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;4&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V3&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении Клиента соотношения показателей Долг/Выручка, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 0,4 (Ноля целых четырех десятых) (включительно);&lt;br&gt;или снижение соотношения показателей Долг/Выручка до отрицательного значения.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Долг / Выручка&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;0,4&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:86.42857142857142pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.1_V3&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Соблюдение показателя долговой нагрузки&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Превышение в отношении Клиента соотношения показателей ДÐ¾лг/Выручка, устанавливаемого на каждую отчетную дату (по РСБУ), уровня:&lt;br&gt;&lt;br&gt;с ближайшей отчетной даты (по РСБУ), следующей за датой заключения Договора, – более 0,25 (Ноля целых двадцати пяти сотых) (включительно);&lt;br&gt;&lt;br&gt;или снижение соотношения показателей Долг/Выручка до отрицательного значения.&lt;br&gt;&lt;br&gt;В расчет Долга не включаются обязательства перед следующими лицами: ШИДОВ ЗАУР МУХАМЕДОВИЧ.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Долг / Выручка&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;0,25&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.2_V1&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Ограничение объема предъявленных исков&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Предъявление любому Участнику сделки иска(ов) и/или принятие судом к производству искового(ых) заявления(ий) об уплате денежной суммы и/или об истребовании имущества на совокупную сумму, превышающую 10 000 000 (Десять миллионов) рублей в отношении любого из указанных в настоящем пункте лиц.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Ограничение объема предъявленных исков&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;10 000 000&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:86.42857142857142pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;рублей&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&quot;height:nullpt&quot;&gt;&lt;td style=&quot;width:92.14285714285712pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;SF_1.2_V2&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:230.7142857142857pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Ограничение объема предъявленных исков&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:337.85714285714283pt;white-space:nowrap;vertical-align:bottom;&quot;&gt;&lt;span style=&quot;vertical-align:baseline;&quot;&gt;Предъявление иска(ов) и/или принятие судом к производству искового(ых) заявления(ий) об уплате денежной суммы и/или об истребовании имущества:&lt;br&gt;– применительно к Клиенту в совокупном размере, превышающем 10 000 000 (Десять миллионов) рублей;&lt;br&gt;– применительно к поручителю и/или залогодателю и/или гаранту в совокупном размере, превышающем 10 000 000 (Десять миллионов) рублей.&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:271.4285714285714pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;Ограничение объема предъявленных исков&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:47.857142857142854pt;white-space:nowrap;text-align:center;vertical-align:top;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:87.85714285714285pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;10 000 000&lt;/span&gt;&lt;/td&gt;&lt;td style=&quot;width:86.42857142857142pt;white-space:nowrap;text-align:left;vertical-align:middle;&quot;&gt;&lt;span style=&quot;font-family:Var(--typo-font-family);vertical-align:baseline;&quot;&gt;рублей&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="170" y="6570" width="560" height="660" as="geometry" />
        </mxCell>
        <mxCell id="kW_1GkDuVryrUP6SlwmR-1" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.75;exitY=1;exitDx=0;exitDy=0;entryX=0.786;entryY=0;entryDx=0;entryDy=0;entryPerimeter=0;" parent="1" source="JJz8-9tXR7XxKiCPV7C5-8" target="JJz8-9tXR7XxKiCPV7C5-9" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="kW_1GkDuVryrUP6SlwmR-2" value="Вы — CreditDecisionAgent, экспертная система для автоматического принятия решений по онлайн-заявкам на кредит в крупном банке. Вам нужно выполнить два этапа:&#xa;1. Подробный анализ каждого критерия (Custom Chain of Thought).&#xa;2. Вывести итоговое заключение в строгом JSON-формате (Structured Output).&#xa;&#xa;&#xa;&#xa;&#xa;###  Входные блоки (передаются как есть):&#xa;Блок 1 – АС УФА:&#xa;{ufa_block}&#xa;&#xa;&#xa;&#xa;&#xa;Блок 2 – Рейтинг:&#xa;{rating_block}&#xa;&#xa;&#xa;&#xa;&#xa;Блок 3 – ОКС:&#xa;{oks_block}&#xa;&#xa;&#xa;&#xa;&#xa;Блок 4 – Cashflow:&#xa;{cf_block}&#xa;&#xa;&#xa;&#xa;&#xa;Блок 5 – Кредитная история:&#xa;{history_block}&#xa;&#xa;&#xa;Блок 6 – АС УФА (заключение):&#xa;{ufa_block_2}&#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;&#xa;&#xa;### Описание критериев анализа:&#xa;&#xa;&#xa;&#xa;&#xa;1. **Динамика бизнеса**:&#xa;    1.1 **Выручка LTM **:&#xa;должен быть положительный рост (&gt;0) - хорошо;&#xa;допустимое снижение в пределах 10% (было 100, стало 95 или 90) - удовлетворительно;&#xa;снижение больше 10% - плохо. &#xa;Рекомендация если удовлетворительно и плохо - Необходимо оформить поручительство платежеспособного юридического лица&#xa;Обязателен при принятии решения&#xa;    1.2 **EBITDA LTM**:&#xa;должен быть положительный рост (&gt;0) и сама EBITDA LTM должна быть (&gt;0) было 100 стало 120 - хорошо;&#xa;допускается сокращение не более на 10% и сама EBITDA LTM должна быть (&gt;0), было 100 стало 90 - удовлетворительно;&#xa;снижение в пределах больше 10%  было 100 стало 89, и/или само значение отрицательное (было - 500 млн, а стало -250 млн) - плохо.&#xa;EBITDA LTM определяется по рентабельности EBITDA LTM.&#xa;Обязателен при принятии решения&#xa;    1.3 **Прирост квартальной выручки** &#xa;должен быть положительный рост (&gt;0) хотя бы в одном из друх кварталов подряд - хорошо;&#xa;сокращение в двух кварталах подряд относительно АППГ (аналогичный период  прошлого года) не более 10%, 100 стало 90 млн - удовлетворительно;&#xa;сокращение в двух кварталах  подряд более 10% относительно АППГ (аналогичный период  прошлого года) - плохо&#xa;Рекомендация если удовлетворительно и плохо - Необходимо оформить поручительство платежеспособного юридического лица&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;2. **Оборачиваемость запасов LTM (дни)**:&#xa;Соответствует или выше оборачиваемости большинства компаний данного ОКК не более 10% (было 70 стало 77) - хорошо&#xa;Выше оборачиваемости большинства компаний данного ОКК (от 10% до 20%) - удовлетворительно&#xa;Выше оборачиваемости большинства компаний данного ОКК (от 20% и более) - плохо&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;3. **Оборачиваемость дебиторской задолженности (ДЗ) LTM**:&#xa;Соответствует или выше оборачиваемости большинства компаний данного ОКК не более 10% (было 70 стало 77) - хорошо&#xa;Выше оборачиваемости большинства компаний данного ОКК (от 10% до 20%) - удовлетворительно&#xa;Выше оборачиваемости большинства компаний данного ОКК (от 20% и более) - плохо&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;4. **Оборачиваемость кредиторской задолженности (КЗ) LTM**:&#xa;Соответствует или выше оборачиваемости большинства компаний данного ОКК не более 10% (было 70 стало 77) - хорошо&#xa;Выше оборачиваемости большинства компаний данного ОКК (от 10% до 20%) - удовлетворительно&#xa;Выше оборачиваемости большинства компаний данного ОКК (от 20% и более) - плохо&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;5. **Уровень долговой нагрузки**:&#xa; 5.1 **ICR LTM**:&#xa;  если выше порогового значения — хорошо, если ниже порогового значения — плохо&#xa;Обязателен при принятии решения&#xa;5.2 **Долговая нагрузка**:&#xa;   - Чистый долг/EBITDA если выше порогового значения - хорошо, если соответствует диапазону показателя для данного ОКК - удовлетворительно, если ниже порогового значения для данного ОКК - плохо&#xa;Обязателен при принятии решения&#xa;   - Долг/EBITDA если выше порогового значения - хорошо, если соответствует диапазону показателя для данного ОКК - удовлетворительно, если ниже порогового значения для данного ОКК - плохо&#xa;Обязателен при принятии решения&#xa;   - Чистый долг/Выручка LTM если выше порогового значения - хорошо, если соответствует диапазону показателя для данного ОКК - удовлетворительно, если ниже порогового значения для данного ОКК - плохо&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;6. **Текущая ликвидность (КТЛ)**:&#xa;   - КТЛ ≥ 1.5 — хорошо  (берём только значение КТЛ),  от 1 - 1.5 - удовлетворительно, &lt; 1 — плохо&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;7. **Рентабельность бизнеса**:&#xa;   - Чистая прибыль &gt;= 0 - хорошо, иначе - плохо&#xa;Необязателен при принятии решения&#xa;&#xa;&#xa;8. **Доля чистых активов (ЧА)**:&#xa;   - ≥ 20% — хорошо, 0-20% - удовлетворительно, &lt; 0 - плохо&#xa;Рекомендация если удовлетворительно и плохо - Необходимо оформить поручительство платежеспособного юридического лица&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;9. **Рейтинг**:&#xa;   - ≤ 17 — хорошо, от 18-22 - удовлетворительно, &gt;= 23 - плохо&#xa;Рекомендация если удовлетворительно и плохо - Необходимо оформить поручительство платежеспособного юридического лица&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;10. **Собственный оборотный капитал (СОК)**:&#xa;    - &gt;=0 — хорошо, &lt; 0 — плохо&#xa;Рекомендация если удовлетворительно и плохо - Необходимо оформить поручительство платежеспособного юридического лица&#xa;Необязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;11. **Соответствие сделки ОКС**:&#xa;    - значение “Наращивать” или “Держать” — хорошо; “Сокращать” — плохо&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;12. **Вывод CF‑модели**:&#xa;    - “Вывод №1” с любым уровнем риска — хорошо&#xa;    - “Вывод №2” — плохо&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;13. **Кредитная история**:&#xa;    - Нет просрочек ≥5 дней за последние 180 дней&#xa;    - В целом положительная&#xa;Обязателен при принятии решения&#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;&#xa;&#xa;###  Custom Chain of Thought&#xa;&#xa;&#xa;&#xa;&#xa;Для каждого критерия:&#xa;- **explanation**: «Проверяем [Название]: значение = X, порог = Y»&#xa;- **status**: «ХОРОШО», «УДОВЛЕТВОРИТЕЛЬНО» или «ПЛОХО»&#xa;- **comment**: короткое пояснение&#xa;- **has_value**: наличие значения (данных) по критерию&#xa;- **recommendation**: рекомендация если удовлетворительно и плохо&#xa;- **required**: обязательность критерия при принятии решения&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;Модель выводит промежуточные рассуждения для каждого критерия.&#xa;&#xa;&#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;&#xa;&#xa;### Агрегация решения&#xa;&#xa;&#xa;&#xa;&#xa;После анализа всех критериев:&#xa;- Если **хотя бы один** статус = «ПЛОХО» → `final_decision = &quot;ОТКАЗ&quot;`&#xa;- Если **отсутствует данные хотя бы по одному обязательному критерию**, то `final_decision = &quot;ОТКАЗ&quot;`&#xa;- Иначе → `final_decision = &quot;ОДОБРЕНО&quot;`&#xa;&#xa;&#xa;&#xa;&#xa;`final_comment`: при отказе — перечислить плохие критерии; при одобрении — общий позитивный итог.&#xa;&#xa;&#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;&#xa;&#xa;###  Выходной формат (только JSON!)&#xa;&#xa;&#xa;&#xa;&#xa;{json}" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="170" y="7410" width="560" height="3740" as="geometry" />
        </mxCell>
        <UserObject label="&lt;div class=&quot;page-metadata&quot; style=&quot;margin: -15px 0px 20px; padding: 0px; font-size: 12px; color: rgb(94, 108, 132); line-height: 1.5; font-weight: 300;&quot;&gt;&lt;ul style=&quot;margin: 0px; overflow: hidden; padding: 0px; list-style-type: none; line-height: 16px; display: inline-block; vertical-align: bottom;&quot;&gt;&lt;li class=&quot;page-metadata-modification-info&quot; style=&quot;list-style: none; float: left; padding: 0px; margin: 0px; line-height: 1.5;&quot;&gt;Создал(а)&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;author&quot;&gt;&lt;a href=&quot;https://confluence.delta.sbrf.ru/display/~23097935&quot; aria-label=&quot;создано Григорян Тигран Самвелович&quot; class=&quot;url fn confluence-userlink userlink-0&quot; data-username=&quot;23097935&quot; title=&quot;&quot; data-user-hover-bound=&quot;true&quot; style=&quot;color: rgb(94, 108, 132); text-decoration: none solid rgb(94, 108, 132); font-size: 12px; line-height: 1.5; font-weight: 300;&quot;&gt;Григорян Тигран Самвелович&lt;/a&gt;&lt;/span&gt;, редактировал(а)&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;editor&quot;&gt;&lt;a href=&quot;https://confluence.delta.sbrf.ru/display/~burnyshev-ov&quot; aria-label=&quot;модифицировано Бурнышев Олег Викторович&quot; class=&quot;url fn confluence-userlink userlink-1&quot; data-username=&quot;burnyshev-ov&quot; title=&quot;&quot; data-user-hover-bound=&quot;true&quot; style=&quot;color: rgb(94, 108, 132); text-decoration: none solid rgb(94, 108, 132); font-size: 12px; line-height: 1.5; font-weight: 300;&quot;&gt;Бурнышев Олег Викторович&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a class=&quot;last-modified&quot; aria-label=&quot;отредактировано июл. 31, 2025, выберите, чтобы просмотреть изменения&quot; title=&quot;Показать изменения&quot; href=&quot;https://confluence.delta.sbrf.ru/pages/diffpagesbyversion.action?pageId=16154497310&amp;amp;selectedPageVersions=9&amp;amp;selectedPageVersions=10&quot; style=&quot;color: rgb(94, 108, 132); text-decoration: none solid rgb(94, 108, 132); font-size: 12px; line-height: 1.5; font-weight: 300;&quot;&gt;июл. 31, 2025&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;cw-bylines&quot; style=&quot;margin: 0px; display: inline-block; font-size: 12px; color: rgb(94, 108, 132); list-style-type: none; overflow: hidden; padding: 0px; line-height: 16px; vertical-align: top;&quot;&gt;&lt;li class=&quot;cw-byline-item&quot; style=&quot;display: inline-block; list-style: none; padding: 0px 5px 0px 0px; margin: 0px; line-height: 1.5; float: left;&quot;&gt;&lt;div id=&quot;cw-approval-byline&quot; class=&quot;cw-approval-byline&quot; style=&quot;margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: -5px !important; padding: 0px;&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;cw-byline-item&quot; style=&quot;display: inline-block; list-style: none; padding: 0px 5px 0px 0px; margin: 0px; line-height: 1.5; float: left;&quot;&gt;&lt;div id=&quot;cw-state-byline&quot; class=&quot;cw-state-byline&quot; style=&quot;margin: 0px; padding: 0px; color: rgb(204, 204, 204);&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;cw-byline-item&quot; style=&quot;display: inline-block; list-style: none; padding: 0px 5px 0px 0px; margin: 0px; line-height: 1.5; float: left;&quot;&gt;&lt;div id=&quot;cw-tasks-byline&quot; class=&quot;cw-tasks-byline&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;cw-byline-item&quot; style=&quot;display: inline-block; list-style: none; padding: 0px 5px 0px 0px; margin: 0px; line-height: 1.5; float: left;&quot;&gt;&lt;div id=&quot;cw-state-alternate&quot; class=&quot;cw-state-alternate&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div id=&quot;rioja-page-message&quot; style=&quot;margin: 0px 0px 20px; padding: 0px;&quot;&gt;&lt;/div&gt;&lt;div id=&quot;main-content&quot; class=&quot;wiki-content&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;h3 id=&quot;id-1Динамикабизнеса-Описание:&quot; style=&quot;margin: 0px; padding: 0px; font-size: 16px; font-weight: bold; line-height: 1.5; letter-spacing: -0.006em; text-transform: none; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: start; text-indent: 0px; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong&gt;Описание:&lt;/strong&gt;&lt;/h3&gt;Показатель указывает&amp;nbsp; на наличие изменений в объемах доходов и расходов в ретро-периоде.&amp;nbsp;&lt;br&gt;Применяется 3 показателя:&lt;br&gt;1. Динамика выручки LTM к аналогичной дате прошлого года. Например производится сравнение Выручки LTM на 01.04.2025 к этому же показателю на 01.04.2024.&lt;br&gt;2. Динамика квартальных показателей Выручки: 1.&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;inline-comment-marker valid&quot; data-ref=&quot;e6c93a3e-9b7f-4526-b44a-1f70188a95b0&quot; style=&quot;background-color: rgba(246, 195, 66, 0.3);&quot;&gt;Если отрасль относится к несезонной&lt;/span&gt;, то сравнение производится анализируемого квартала к предыдущему (например 2 кв. 2025 к 1 кв.2025); 2. Если в деятельности присутствует сезонность, то сравниваются сопоставимые периоды к прошлому году (например 2 кв. 2025 ко 2 кв. 2024)&lt;br&gt;3. Динамика EBITDA LTM к аналогичной дате прошлого года. Например производится сравнение EBITDA LTM на 01.04.2025 к этому же показателю на 01.04.2024.&lt;br&gt;&lt;strong&gt;EBITDA&lt;/strong&gt;&lt;span style=&quot;color: rgb(64, 64, 64);&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(Earnings Before Interest, Taxes, Depreciation and Amortization) — прибыль до вычета процентов, налогов и амортизации. Показывает&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;операционную рентабельность&lt;span style=&quot;color: rgb(64, 64, 64);&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;без учёта структуры капитала и налогов.&lt;/span&gt;&lt;h3 class=&quot;p1&quot; id=&quot;id-1Динамикабизнеса-Условияприменимости:&quot; style=&quot;margin: 30px 0px 0px; padding: 0px; font-size: 16px; font-weight: bold; line-height: 1.5; letter-spacing: -0.006em; text-transform: none; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: start; text-indent: 0px; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong&gt;&lt;span class=&quot;inline-comment-marker valid&quot; data-ref=&quot;14b41cde-b1af-41ab-9a6e-298669a07f14&quot; style=&quot;background-color: rgba(246, 195, 66, 0.3);&quot;&gt;Условия применимости:&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;Оцениваются все показатели по всем клиентам.&lt;/p&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong style=&quot;font-size: 16px; letter-spacing: -0.006em;&quot;&gt;Возможные значения:&lt;span class=&quot;apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;Положительным моментом является одновременный рост Выручки и EBITDA.&lt;/p&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;Удовлетворительным индикатором является:&lt;/p&gt;&lt;ul style=&quot;margin: 10px 0px 0px; list-style-type: square; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;li&gt;сокращение выручки на 10% при сохранении либо увеличении EBITDA.&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin: 10px 0px 0px; list-style-type: square; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;li class=&quot;ds-markdown-paragraph&quot;&gt;сокращение EBITDA показателя до 10%.&lt;/li&gt;&lt;/ul&gt;&lt;h3 class=&quot;p1&quot; id=&quot;id-1Динамикабизнеса-Рекомендацииприудовлетворительномзначениисигнала:&quot; style=&quot;margin: 30px 0px 0px; padding: 0px; font-size: 16px; font-weight: bold; line-height: 1.5; letter-spacing: -0.006em; text-transform: none; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: start; text-indent: 0px; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong&gt;Рекомендации при удовлетворительном значении сигнала:&lt;/strong&gt;&lt;/h3&gt;Рекомендуется построение модели движения денежных средств для оценки влияния сокращения поступлений на возвратность кредита.&lt;h3 class=&quot;p1&quot; id=&quot;id-1Динамикабизнеса-Рекомендацииприотрицательномзначениисигнала:&quot; style=&quot;margin: 30px 0px 0px; padding: 0px; font-size: 16px; font-weight: bold; line-height: 1.5; letter-spacing: -0.006em; text-transform: none; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: start; text-indent: 0px; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong&gt;Рекомендации при отрицательном&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;значении&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;сигнала:&lt;/strong&gt;&lt;/h3&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;Поскольку бизнес клиента сокращается, то важно проверить как отрицательная динамика повлияет на возвратность кредита. Для этого необходимо построить CF модель и проверить как погашение кредита может повлиять на остаток денежных средств либо возникновение балансирующего кредита. Балансирующий кредит - это вынужденное привлечение кредитных средств для закрытия сформированных остатков денежных средств. Отрицательным фактором будет выступать наращивание потребности в балансирующем кредите. Также рекомендуется в качестве минимизации риска отрицательной динамики бизнеса оформить поручительство юридического лица, которое будет способно погашать как собственные обязательства, так и обязательства по договору поручительства.&lt;/p&gt;&lt;br class=&quot;Apple-interchange-newline&quot;&gt;&lt;/div&gt;" link="&lt;div class=&quot;page-metadata&quot; style=&quot;margin: -15px 0px 20px; padding: 0px; font-size: 12px; color: rgb(94, 108, 132); line-height: 1.5; font-weight: 300;&quot;&gt;&lt;ul style=&quot;margin: 0px; overflow: hidden; padding: 0px; list-style-type: none; line-height: 16px; display: inline-block; vertical-align: bottom;&quot;&gt;&lt;li class=&quot;page-metadata-modification-info&quot; style=&quot;list-style: none; float: left; padding: 0px; margin: 0px; line-height: 1.5;&quot;&gt;Создал(а)&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;author&quot;&gt;&lt;a href=&quot;https://confluence.delta.sbrf.ru/display/~23097935&quot; aria-label=&quot;создано Григорян Тигран Самвелович&quot; class=&quot;url fn confluence-userlink userlink-0&quot; data-username=&quot;23097935&quot; title=&quot;&quot; data-user-hover-bound=&quot;true&quot; style=&quot;color: rgb(94, 108, 132); text-decoration: none solid rgb(94, 108, 132); font-size: 12px; line-height: 1.5; font-weight: 300;&quot;&gt;Григорян Тигран Самвелович&lt;/a&gt;&lt;/span&gt;, редактировал(а)&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;editor&quot;&gt;&lt;a href=&quot;https://confluence.delta.sbrf.ru/display/~burnyshev-ov&quot; aria-label=&quot;модифицировано Бурнышев Олег Викторович&quot; class=&quot;url fn confluence-userlink userlink-1&quot; data-username=&quot;burnyshev-ov&quot; title=&quot;&quot; data-user-hover-bound=&quot;true&quot; style=&quot;color: rgb(94, 108, 132); text-decoration: none solid rgb(94, 108, 132); font-size: 12px; line-height: 1.5; font-weight: 300;&quot;&gt;Бурнышев Олег Викторович&lt;/a&gt;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;a class=&quot;last-modified&quot; aria-label=&quot;отредактировано июл. 31, 2025, выберите, чтобы просмотреть изменения&quot; title=&quot;Показать изменения&quot; href=&quot;https://confluence.delta.sbrf.ru/pages/diffpagesbyversion.action?pageId=16154497310&amp;amp;selectedPageVersions=9&amp;amp;selectedPageVersions=10&quot; style=&quot;color: rgb(94, 108, 132); text-decoration: none solid rgb(94, 108, 132); font-size: 12px; line-height: 1.5; font-weight: 300;&quot;&gt;июл. 31, 2025&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=&quot;cw-bylines&quot; style=&quot;margin: 0px; display: inline-block; font-size: 12px; color: rgb(94, 108, 132); list-style-type: none; overflow: hidden; padding: 0px; line-height: 16px; vertical-align: top;&quot;&gt;&lt;li class=&quot;cw-byline-item&quot; style=&quot;display: inline-block; list-style: none; padding: 0px 5px 0px 0px; margin: 0px; line-height: 1.5; float: left;&quot;&gt;&lt;div id=&quot;cw-approval-byline&quot; class=&quot;cw-approval-byline&quot; style=&quot;margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: -5px !important; padding: 0px;&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;cw-byline-item&quot; style=&quot;display: inline-block; list-style: none; padding: 0px 5px 0px 0px; margin: 0px; line-height: 1.5; float: left;&quot;&gt;&lt;div id=&quot;cw-state-byline&quot; class=&quot;cw-state-byline&quot; style=&quot;margin: 0px; padding: 0px; color: rgb(204, 204, 204);&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;cw-byline-item&quot; style=&quot;display: inline-block; list-style: none; padding: 0px 5px 0px 0px; margin: 0px; line-height: 1.5; float: left;&quot;&gt;&lt;div id=&quot;cw-tasks-byline&quot; class=&quot;cw-tasks-byline&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;li class=&quot;cw-byline-item&quot; style=&quot;display: inline-block; list-style: none; padding: 0px 5px 0px 0px; margin: 0px; line-height: 1.5; float: left;&quot;&gt;&lt;div id=&quot;cw-state-alternate&quot; class=&quot;cw-state-alternate&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div id=&quot;rioja-page-message&quot; style=&quot;margin: 0px 0px 20px; padding: 0px;&quot;&gt;&lt;/div&gt;&lt;div id=&quot;main-content&quot; class=&quot;wiki-content&quot; style=&quot;margin: 0px; padding: 0px;&quot;&gt;&lt;h3 id=&quot;id-1Динамикабизнеса-Описание:&quot; style=&quot;margin: 0px; padding: 0px; font-size: 16px; font-weight: bold; line-height: 1.5; letter-spacing: -0.006em; text-transform: none; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: start; text-indent: 0px; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong&gt;Описание:&lt;/strong&gt;&lt;/h3&gt;Показатель указывает&amp;nbsp; на наличие изменений в объемах доходов и расходов в ретро-периоде.&amp;nbsp;&lt;br&gt;Применяется 3 показателя:&lt;br&gt;1. Динамика выручки LTM к аналогичной дате прошлого года. Например производится сравнение Выручки LTM на 01.04.2025 к этому же показателю на 01.04.2024.&lt;br&gt;2. Динамика квартальных показателей Выручки: 1.&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;inline-comment-marker valid&quot; data-ref=&quot;e6c93a3e-9b7f-4526-b44a-1f70188a95b0&quot; style=&quot;background-color: rgba(246, 195, 66, 0.3);&quot;&gt;Если отрасль относится к несезонной&lt;/span&gt;, то сравнение производится анализируемого квартала к предыдущему (например 2 кв. 2025 к 1 кв.2025); 2. Если в деятельности присутствует сезонность, то сравниваются сопоставимые периоды к прошлому году (например 2 кв. 2025 ко 2 кв. 2024)&lt;br&gt;3. Динамика EBITDA LTM к аналогичной дате прошлого года. Например производится сравнение EBITDA LTM на 01.04.2025 к этому же показателю на 01.04.2024.&lt;br&gt;&lt;strong&gt;EBITDA&lt;/strong&gt;&lt;span style=&quot;color: rgb(64, 64, 64);&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;(Earnings Before Interest, Taxes, Depreciation and Amortization) — прибыль до вычета процентов, налогов и амортизации. Показывает&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;операционную рентабельность&lt;span style=&quot;color: rgb(64, 64, 64);&quot;&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;без учёта структуры капитала и налогов.&lt;/span&gt;&lt;h3 class=&quot;p1&quot; id=&quot;id-1Динамикабизнеса-Условияприменимости:&quot; style=&quot;margin: 30px 0px 0px; padding: 0px; font-size: 16px; font-weight: bold; line-height: 1.5; letter-spacing: -0.006em; text-transform: none; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: start; text-indent: 0px; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong&gt;&lt;span class=&quot;inline-comment-marker valid&quot; data-ref=&quot;14b41cde-b1af-41ab-9a6e-298669a07f14&quot; style=&quot;background-color: rgba(246, 195, 66, 0.3);&quot;&gt;Условия применимости:&lt;/span&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;Оцениваются все показатели по всем клиентам.&lt;/p&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong style=&quot;font-size: 16px; letter-spacing: -0.006em;&quot;&gt;Возможные значения:&lt;span class=&quot;apple-converted-space&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;Положительным моментом является одновременный рост Выручки и EBITDA.&lt;/p&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;Удовлетворительным индикатором является:&lt;/p&gt;&lt;ul style=&quot;margin: 10px 0px 0px; list-style-type: square; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;li&gt;сокращение выручки на 10% при сохранении либо увеличении EBITDA.&lt;/li&gt;&lt;/ul&gt;&lt;ul style=&quot;margin: 10px 0px 0px; list-style-type: square; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;li class=&quot;ds-markdown-paragraph&quot;&gt;сокращение EBITDA показателя до 10%.&lt;/li&gt;&lt;/ul&gt;&lt;h3 class=&quot;p1&quot; id=&quot;id-1Динамикабизнеса-Рекомендацииприудовлетворительномзначениисигнала:&quot; style=&quot;margin: 30px 0px 0px; padding: 0px; font-size: 16px; font-weight: bold; line-height: 1.5; letter-spacing: -0.006em; text-transform: none; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: start; text-indent: 0px; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong&gt;Рекомендации при удовлетворительном значении сигнала:&lt;/strong&gt;&lt;/h3&gt;Рекомендуется построение модели движения денежных средств для оценки влияния сокращения поступлений на возвратность кредита.&lt;h3 class=&quot;p1&quot; id=&quot;id-1Динамикабизнеса-Рекомендацииприотрицательномзначениисигнала:&quot; style=&quot;margin: 30px 0px 0px; padding: 0px; font-size: 16px; font-weight: bold; line-height: 1.5; letter-spacing: -0.006em; text-transform: none; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; orphans: 2; text-align: start; text-indent: 0px; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;strong&gt;Рекомендации при отрицательном&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;значении&amp;nbsp;&lt;/strong&gt;&lt;strong&gt;сигнала:&lt;/strong&gt;&lt;/h3&gt;&lt;p style=&quot;margin: 10px 0px 0px; padding: 0px; color: rgb(23, 43, 77); font-family: -apple-system, BlinkMacSystemFont, &amp;quot;Segoe UI&amp;quot;, Roboto, Oxygen, Ubuntu, &amp;quot;Fira Sans&amp;quot;, &amp;quot;Droid Sans&amp;quot;, &amp;quot;Helvetica Neue&amp;quot;, sans-serif; font-size: 14px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;Поскольку бизнес клиента сокращается, то важно проверить как отрицательная динамика повлияет на возвратность кредита. Для этого необходимо построить CF модель и проверить как погашение кредита может повлиять на остаток денежных средств либо возникновение балансирующего кредита. Балансирующий кредит - это вынужденное привлечение кредитных средств для закрытия сформированных остатков денежных средств. Отрицательным фактором будет выступать наращивание потребности в балансирующем кредите. Также рекомендуется в качестве минимизации риска отрицательной динамики бизнеса оформить поручительство юридического лица, которое будет способно погашать как собственные обязательства, так и обязательства по договору поручительства.&lt;/p&gt;&lt;br class=&quot;Apple-interchange-newline&quot;&gt;&lt;/div&gt;" id="kW_1GkDuVryrUP6SlwmR-3">
          <mxCell style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
            <mxGeometry x="910" y="7300" width="560" height="890" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="655VygiofIzxvnDOd8sb-2" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="655VygiofIzxvnDOd8sb-1" target="kW_1GkDuVryrUP6SlwmR-3" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="655VygiofIzxvnDOd8sb-1" value="Вы — CreditDecisionAgent, экспертная система для автоматического принятия решений по онлайн-заявкам на кредит в крупном банке.  &#xa;Ваша задача: провести детальный анализ каждого критерия, используя актуальные методологические требования, и выдать итоговое решение в строгом JSON-формате.&#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 1. Input Data&#xa;&#xa;&#xa;Блок 1 – АС УФА: &lt;данные&gt;  &#xa;Блок 2 – Рейтинг: &lt;данные&gt;  &#xa;Блок 3 – ОКС: &lt;данные&gt;  &#xa;Блок 4 – Cashflow: &lt;данные&gt;  &#xa;Блок 5 – Кредитная история: &lt;данные&gt;  &#xa;Блок 6 – АС УФА (заключение): &lt;данные&gt;  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 2. Criteria Definitions&#xa;&#xa;&#xa;&#xa;&#xa;{{criteria_definitions}}&#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 3. Core Logic&#xa;**Custom Chain of Thought:**&#xa;Для каждого критерия:&#xa;- explanation: «Проверяем [Название]: значение = X, порог = Y»&#xa;- status: «ХОРОШО», «УДОВЛЕТВОРИТЕЛЬНО» или «ПЛОХО»&#xa;- comment: пояснение  &#xa;- has_value: true/false  &#xa;- recommendation: рекомендации  &#xa;- required: true/false  &#xa;&#xa;&#xa;**Aggregation Rules:**&#xa;- Если любой обязательный критерий = «ПЛОХО» → `final_decision = &quot;ОТКАЗ&quot;`&#xa;- Если нет данных по обязательному критерию → `final_decision = &quot;ОТКАЗ&quot;`&#xa;- Если УФА = «Удовлетворительное» или «Неудовлетворительное» → `final_decision = &quot;ОТКАЗ&quot;`&#xa;- Если Рейтинг ≥ 25, ОКС = «Сокращать» или CF = «Вывод №2» → `final_decision = &quot;ОТКАЗ&quot;`&#xa;- Иначе → `final_decision = &quot;ОДОБРЕНО&quot;`&#xa;&#xa;&#xa;**Output Format (only JSON):**&#xa;```json&#xa;{&#xa;  &quot;criteria&quot;: [&#xa;    {&quot;name&quot;: &quot;...&quot;, &quot;value&quot;: &quot;...&quot;, &quot;status&quot;: &quot;ХОРОШО/УДОВЛЕТВОРИТЕЛЬНО/ПЛОХО&quot;, &quot;comment&quot;: &quot;...&quot;, &quot;recommendation&quot;: &quot;...&quot;, &quot;required&quot;: true/false, &quot;has_value&quot;: true/false}&#xa;  ],&#xa;  &quot;final_decision&quot;: &quot;ОДОБРЕНО/ОТКАЗ&quot;,&#xa;  &quot;final_comment&quot;: &quot;...&quot;&#xa;}&#xa;&#xa;&#xa;&#xa;&#xa;{{criteria_definitions}}&#xa;## Описание критериев анализа (актуализировано с учётом обязательности и взаимосвязей)&#xa;&#xa;&#xa;### 1. Динамика бизнеса *(required = true)*&#xa;**Описание:**  &#xa;Показатель отражает изменения в объёмах доходов и расходов компании в ретроспективе. Оценка ведётся по трём подпоказателям:  &#xa;1.1 **Выручка LTM** — сравнение к аналогичной дате прошлого года:  &#xa;- Рост &gt; 0% — **ХОРОШО**  &#xa;- Снижение ≤ 10% при росте или сохранении EBITDA — **УДОВЛЕТВОРИТЕЛЬНО**  &#xa;- Снижение &gt; 10% или при падении EBITDA — **ПЛОХО**  &#xa;&#xa;&#xa;1.2 **EBITDA LTM** — сравнение к аналогичной дате прошлого года:  &#xa;- Рост &gt; 0% и EBITDA &gt; 0 — **ХОРОШО**  &#xa;- Снижение ≤ 10% и EBITDA &gt; 0 — **УДОВЛЕТВОРИТЕЛЬНО**  &#xa;- Снижение &gt; 10% и/или EBITDA ≤ 0 — **ПЛОХО**  &#xa;&#xa;&#xa;1.3 **Прирост квартальной выручки** — метод зависит от сезонности:  &#xa;- Рост хотя бы в одном из 2 кварталов подряд — **ХОРОШО**  &#xa;- Снижение ≤ 10% в двух кварталах подряд — **УДОВЛЕТВОРИТЕЛЬНО**  &#xa;- Снижение &gt; 10% в двух кварталах подряд — **ПЛОХО**  &#xa;&#xa;&#xa;**Взаимосвязи:**  &#xa;- При «УДОВЛЕТВОРИТЕЛЬНО» или «ПЛОХО» требуется построение CF-модели (критерий 13).  &#xa;- Отрицательная динамика в сочетании с низким КТЛ или высоким долгом усиливает риск.  &#xa;&#xa;&#xa;**Рекомендации:**  &#xa;- УДОВЛЕТВОРИТЕЛЬНО — построить модель ДДС для оценки влияния сокращения поступлений на возвратность кредита  &#xa;- ПЛОХО — построить CF-модель, проверить балансирующий кредит, оформить поручительство платёжеспособного юр. лица  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 2. Оборачиваемость запасов LTM (дни) *(required = true)*&#xa;**Описание:**  &#xa;Отражает период обновления запасов. Сравнивается со среднеотраслевым показателем по ОКК.  &#xa;- Превышение ≤ 10% — **ХОРОШО**  &#xa;- Превышение &gt; 10% и ≤ 20% — **УДОВЛЕТВОРИТЕЛЬНО** (получить пояснения, подтвердить отсутствие неликвидов)  &#xa;- Превышение &gt; 20% — **ПЛОХО** (проверка запасов, поручительство, залог)  &#xa;&#xa;&#xa;**Взаимосвязи:**  &#xa;- Высокое отклонение при низком КТЛ усиливает риск.  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 3. Оборачиваемость дебиторской задолженности LTM *(required = true)*&#xa;**Описание:**  &#xa;Отражает скорость получения оплаты. Сравнивается со среднеотраслевым по ОКК.  &#xa;- Превышение ≤ 10% — **ХОРОШО**  &#xa;- Превышение &gt; 10% и ≤ 20% — **УДОВЛЕТВОРИТЕЛЬНО** (пояснения, отсутствие просрочки)  &#xa;- Превышение &gt; 20% — **ПЛОХО** (пояснения, проверка долгов &gt;5% без движения &gt; квартал, поручительство)  &#xa;&#xa;&#xa;**Взаимосвязи:**  &#xa;- Высокая ДЗ при низком КТЛ усиливает риск ликвидности.  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 4. Оборачиваемость кредиторской задолженности LTM *(required = true)*&#xa;**Описание:**  &#xa;Показывает сроки оплаты поставщикам.  &#xa;- Отклонение ≤ 10% — **ХОРОШО**  &#xa;- Отклонение &gt; 10% и ≤ 20% — **УДОВЛЕТВОРИТЕЛЬНО** (пояснения)  &#xa;- Отклонение &gt; 20% — **ПЛОХО** (пояснения, соглашения о статусе долга, поручительство/субординация)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 5. ICR LTM *(required = true)*&#xa;**Описание:**  &#xa;Коэффициент покрытия процентов.  &#xa;- &gt; 1.5 — **ХОРОШО**  &#xa;- &gt; 1.0 и ≤ 1.5 — **УДОВЛЕТВОРИТЕЛЬНО** (поручительство)  &#xa;- ≤ 1.0 — **ПЛОХО** (доп. источники, поручительство)  &#xa;&#xa;&#xa;**Взаимосвязи:**  &#xa;- Низкий ICR при высокой долговой нагрузке усиливает риск.  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 6. Долговая нагрузка *(required = true)*&#xa;**Описание:**  &#xa;Оценивается по Чистый долг/EBITDA и Чистый долг/Выручка LTM.  &#xa;- Ниже порогового значения ОКС — **ХОРОШО**  &#xa;- В пределах допустимого диапазона — **УДОВЛЕТВОРИТЕЛЬНО** (субординация обязательств)  &#xa;- Выше верхнего порога или отрицательная EBITDA — **ПЛОХО** (субординация, доп. доходность, поручительство)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 7. Текущая ликвидность (КТЛ) *(required = true)*&#xa;**Описание:**  &#xa;- ≥ 1.5 — **ХОРОШО**  &#xa;- ≥ 1.0 и &lt; 1.5 — **УДОВЛЕТВОРИТЕЛЬНО** (субординация займов связанных компаний)  &#xa;- &lt; 1.0 — **ПЛОХО** (субординация, поручительство, залог)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 8. Рентабельность бизнеса *(required = false)*&#xa;- ≥ 0 — **ХОРОШО**  &#xa;- &lt; 0 — **ПЛОХО** (CF-модель)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 9. Доля чистых активов (ЧА) *(required = true)*&#xa;- ≥ 20% — **ХОРОШО**  &#xa;- &gt; 0% и &lt; 20% — **УДОВЛЕТВОРИТЕЛЬНО** (ограничение долга и долг/EBITDA)  &#xa;- ≤ 0% — **ПЛОХО** (отказ)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 10. Рейтинг *(required = true)*&#xa;- 1–17 — **ХОРОШО**  &#xa;- 18–22 — **УДОВЛЕТВОРИТЕЛЬНО** (доп. залог ≥ 60% суммы кредита, доп. доходность)  &#xa;- 23–24 — **ПЛОХО** (залог ≥ 100%, поручительство, доп. доходность)  &#xa;- 25–26 — **ПЛОХО** (отказ)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 11. Собственный оборотный капитал (СОК) *(required = false)*&#xa;- ≥ 0 — **ХОРОШО**  &#xa;- &lt; 0 — **ПЛОХО** (субординация займов, поручительство)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 12. Соответствие сделки ОКС *(required = true)*&#xa;- «Наращивать» или «Держать» — **ХОРОШО**  &#xa;- «Сокращать» — **ПЛОХО** (изменение структуры сделки, повторная оценка)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 13. Вывод CF-модели *(required = true)*&#xa;- «Вывод №1» — **ХОРОШО**  &#xa;- «Вывод №2» — **ПЛОХО** (уменьшить сумму, скорректировать срок/график, поручительство)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 14. Кредитная история *(required = true)*&#xa;- Нет просрочек ≥ 5 дней за последние 180 дней — **ХОРОШО**  &#xa;- 1 просрочка ≤ 5 дней — **УДОВЛЕТВОРИТЕЛЬНО**  &#xa;- ≥ 2 просрочек и/или любая &gt; 5 дней — **ПЛОХО** (поручительство, CF-модель с сезонностью)  &#xa;&#xa;&#xa;---&#xa;&#xa;&#xa;### 15. УФА (автовывод) *(required = true)*&#xa;- «Хорошее» — **ХОРОШО**  &#xa;- «Удовлетворительное» — **ПЛОХО** (решение не принимается, нужны меры)  &#xa;- «Неудовлетворительное» — **ПЛОХО** (автоотказ)  &#xa;&#xa;&#xa;---" style="text;whiteSpace=wrap;" parent="1" vertex="1">
          <mxGeometry x="900" y="8220" width="560" height="3820" as="geometry" />
        </mxCell>
        <UserObject label="# %% [markdown]&#xa;# # Классификация обращений бизнес‑пользователей в поддержку кредитного процесса&#xa;# &#xa;# **Подход:** Schema‑Guided Reasoning (SGR) + Structured Output, инкрементальная онтология категорий.&#xa;# &#xa;# Что делает ноутбук:&#xa;# 1) Загружает Excel с обращениями (колонки: `id`, `request`, `response` — переименуйте ниже, если у вас иначе).&#xa;# 2) Для каждой строки создаёт компактный контекст (вопрос+ответ), подбирает N ближайших категорий из реестра (через эмбеддинги),&#xa;# 3) Отправляет запрос к LLM с **жёсткой схемой ответа** (Pydantic) — либо сопоставляет с существующей категорией, либо создаёт новую (имя + описание + ключевые слова).&#xa;# 4) Сохраняет:&#xa;#    - присвоение категории для строки (CSV),&#xa;#    - расширенный реестр категорий (JSON),&#xa;#    - эмбеддинги для ускорения следующей итерации (встроены в JSON).&#xa;# &#xa;# ⚙️ Требования: `openai&gt;=1.40`, `pydantic&gt;=2`, `pandas`, `tqdm`, `numpy`, `scikit-learn` (для косинусной близости) &#xa;# &#xa;# ⚠️ Безопасность: модель не должна выдумывать. Все поля строго ограничены схемой. Новые категории краткие, бизнес‑язык, без PII.&#xa;&#xa;&#xa;# %%&#xa;import os&#xa;import json&#xa;import time&#xa;import math&#xa;from dataclasses import dataclass&#xa;from typing import List, Optional, Union, Literal, Dict, Any&#xa;&#xa;&#xa;import pandas as pd&#xa;import numpy as np&#xa;from pydantic import BaseModel, Field, conint, constr&#xa;from typing_extensions import Annotated&#xa;from annotated_types import MinLen, MaxLen&#xa;from tqdm import tqdm&#xa;&#xa;&#xa;# Если scikit-learn отсутствует, используем косинус вручную&#xa;try:&#xa;    from sklearn.metrics.pairwise import cosine_similarity&#xa;    def cos_sim(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:&#xa;        return cosine_similarity(a, b)&#xa;except Exception:&#xa;    def _norm(x: np.ndarray) -&gt; np.ndarray:&#xa;        n = np.linalg.norm(x, axis=1, keepdims=True) + 1e-12&#xa;        return x / n&#xa;    def cos_sim(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:&#xa;        a_n, b_n = _norm(a), _norm(b)&#xa;        return a_n @ b_n.T&#xa;&#xa;&#xa;# OpenAI SDK (см. https://pypi.org/project/openai/)&#xa;from openai import OpenAI&#xa;&#xa;&#xa;# =====================&#xa;# ������ НАСТРОЙКИ&#xa;# =====================&#xa;OPENAI_API_KEY = os.getenv(&quot;OPENAI_API_KEY&quot;, &quot;&quot;)  # положите ключ в переменную окружения&#xa;MODEL_CLASSIFY = os.getenv(&quot;LLM_CLASSIFY_MODEL&quot;, &quot;gpt-4o-mini&quot;)  # модель для классификации&#xa;MODEL_EMBED = os.getenv(&quot;EMBED_MODEL&quot;, &quot;text-embedding-3-small&quot;)  # эмбеддинги&#xa;&#xa;&#xa;EXCEL_PATH = &quot;./tickets.xlsx&quot;          # &lt;- поменяйте на ваш файл Excel&#xa;SHEET_NAME = 0                          # имя листа или индекс&#xa;COL_ID = &quot;id&quot;                           # имя колонки с уникальным идентификатором обращения&#xa;COL_REQ = &quot;request&quot;                      # имя колонки с текстом запроса&#xa;COL_RES = &quot;response&quot;                     # имя колонки с ответом (если есть)&#xa;&#xa;&#xa;REGISTRY_JSON = &quot;./category_registry.json&quot;   # файл онтологии категорий&#xa;ASSIGNMENTS_CSV = &quot;./assignments.csv&quot;        # файл присвоений (итоги классификации)&#xa;&#xa;&#xa;TOP_K_CANDIDATES = 12  # сколько ближайших категорий подмешивать в подсказку&#xa;TEMP = 0.2              # температура модели&#xa;MAX_TOKENS = 1500       # лимит на structured‑output ответ&#xa;BATCH_LIMIT = None      # ограничить количество строк для отладки: например 100; None = всё&#xa;&#xa;&#xa;# =====================&#xa;# ������ SGR: Схема ответа&#xa;# =====================&#xa;class ProposedLabel(BaseModel):&#xa;    name: constr(strip_whitespace=True, min_length=2, max_length=50)&#xa;    rationale: constr(strip_whitespace=True, min_length=5, max_length=300)&#xa;    confidence: conint(ge=0, le=100) = Field(..., description=&quot;0..100, субъективная уверенность в предложенной метке&quot;)&#xa;&#xa;&#xa;class AssignExisting(BaseModel):&#xa;    kind: Literal[&quot;existing&quot;]&#xa;    category_id: str&#xa;&#xa;&#xa;class CreateNew(BaseModel):&#xa;    kind: Literal[&quot;new&quot;]&#xa;    proposed_name: constr(strip_whitespace=True, min_length=3, max_length=40) = Field(&#xa;        ..., description=&quot;Короткое имя категории до 4 слов, без спецсимволов, на русском&quot;&#xa;    )&#xa;    description: constr(strip_whitespace=True, min_length=20, max_length=300) = Field(&#xa;        ..., description=&quot;1–2 предложения деловым языком: что это за обращения и ожидаемая обработка&quot;&#xa;    )&#xa;    keywords: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=30)], MinLen(3), MaxLen(8)]&#xa;    parent_hint: Optional[constr(strip_whitespace=True, max_length=40)] = Field(&#xa;        None, description=&quot;Необязательно: надкатегория/область (напр. &#39;Заявка&#39;, &#39;Скоринг&#39;, &#39;Документы&#39;)&quot;&#xa;    )&#xa;    duplicates_of: List[str] = Field(default_factory=list, description=&quot;Список ID близких существующих категорий, если есть&quot;)&#xa;&#xa;&#xa;class TicketClassification(BaseModel):&#xa;    # --- Cascade: нормализуем запрос ---&#xa;    normalized_problem: constr(strip_whitespace=True, min_length=10, max_length=300)&#xa;    # --- Cycle: выделим ключевые сигналы (2..5) ---&#xa;    signals_detected: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=80)], MinLen(2), MaxLen(5)]&#xa;    # --- Варианты ---&#xa;    proposed_labels: Annotated[List[ProposedLabel], MinLen(1), MaxLen(3)]&#xa;    # --- Routing: выбор ветки ---&#xa;    decision: Union[AssignExisting, CreateNew]&#xa;    # --- Контроль качества ---&#xa;    qa_consistency: Literal[&quot;ok&quot;, &quot;mismatch&quot;] = Field(..., description=&quot;Совпадает ли ответ поддержки с запросом по смыслу&quot;)&#xa;    final_confidence: conint(ge=1, le=10)&#xa;&#xa;&#xa;# =====================&#xa;# ������️ Реестр категорий + эмбеддинги&#xa;# =====================&#xa;@dataclass&#xa;class Category:&#xa;    id: str&#xa;    name: str&#xa;    description: str&#xa;    keywords: List[str]&#xa;    created_at: str&#xa;    created_by: str = &quot;llm&quot;&#xa;    examples: Optional[List[str]] = None&#xa;    synonyms: Optional[List[str]] = None&#xa;    embedding: Optional[List[float]] = None&#xa;&#xa;&#xa;class CategoryRegistry:&#xa;    def __init__(self, path: str, client: OpenAI):&#xa;        self.path = path&#xa;        self.client = client&#xa;        self.schema_version = 1&#xa;        self.categories: Dict[str, Category] = {}&#xa;        if os.path.exists(path):&#xa;            self._load()&#xa;        else:&#xa;            self._save()&#xa;&#xa;&#xa;    def _load(self):&#xa;        with open(self.path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            data = json.load(f)&#xa;        for c in data.get(&quot;categories&quot;, []):&#xa;            self.categories[c[&quot;id&quot;]] = Category(**c)&#xa;&#xa;&#xa;    def _save(self):&#xa;        data = {&#xa;            &quot;schema_version&quot;: self.schema_version,&#xa;            &quot;categories&quot;: [vars(c) for c in self.categories.values()],&#xa;        }&#xa;        with open(self.path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            json.dump(data, f, ensure_ascii=False, indent=2)&#xa;&#xa;&#xa;    def all(self) -&gt; List[Category]:&#xa;        return list(self.categories.values())&#xa;&#xa;&#xa;    def upsert(self, cat: Category):&#xa;        self.categories[cat.id] = cat&#xa;        self._save()&#xa;&#xa;&#xa;    def get_by_name(self, name_lower: str) -&gt; Optional[Category]:&#xa;        for c in self.categories.values():&#xa;            if c.name.lower() == name_lower:&#xa;                return c&#xa;        return None&#xa;&#xa;&#xa;    def ensure_embeddings(self):&#xa;        &quot;&quot;&quot;Считает эмбеддинги для тех категорий, у кого их нет.&quot;&quot;&quot;&#xa;        to_update = []&#xa;        payloads = []&#xa;        for c in self.categories.values():&#xa;            if not c.embedding:&#xa;                text = f&quot;{c.name}. {c.description}. Ключевые слова: {&#39;, &#39;.join(c.keywords)}&quot;&#xa;                payloads.append(text)&#xa;                to_update.append(c.id)&#xa;        if not payloads:&#xa;            return&#xa;        # пакетно считаем эмбеддинги&#xa;        embs = embed(payloads)&#xa;        for cid, vec in zip(to_update, embs):&#xa;            self.categories[cid].embedding = vec&#xa;        self._save()&#xa;&#xa;&#xa;    def nearest(self, text: str, top_k: int = 12) -&gt; List[Category]:&#xa;        if not self.categories:&#xa;            return []&#xa;        self.ensure_embeddings()&#xa;        matrix = np.array([c.embedding for c in self.categories.values()], dtype=np.float32)&#xa;        q = np.array(embed([text])[0], dtype=np.float32).reshape(1, -1)&#xa;        sims = cos_sim(q, matrix)[0]&#xa;        order = np.argsort(-sims)[:top_k]&#xa;        cats = list(self.categories.values())&#xa;        return [cats[i] for i in order]&#xa;&#xa;&#xa;# =====================&#xa;# ������ Обёртки вокруг OpenAI&#xa;# =====================&#xa;client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None&#xa;&#xa;&#xa;def embed(texts: List[str]) -&gt; List[List[float]]:&#xa;    if not client:&#xa;        # Фолбэк: случайный вектор (для сухого прогона без ключа) — НЕ для продакшна&#xa;        rng = np.random.default_rng(0)&#xa;        return rng.normal(size=(len(texts), 1536)).tolist()&#xa;    resp = client.embeddings.create(model=MODEL_EMBED, input=texts)&#xa;    return [d.embedding for d in resp.data]&#xa;&#xa;&#xa;# Ретраи для классификации&#xa;class Retry:&#xa;    def __init__(self, tries=3, base=1.0):&#xa;        self.tries = tries&#xa;        self.base = base&#xa;    def __call__(self, fn):&#xa;        def wrapped(*args, **kwargs):&#xa;            exc = None&#xa;            for i in range(self.tries):&#xa;                try:&#xa;                    return fn(*args, **kwargs)&#xa;                except Exception as e:&#xa;                    exc = e&#xa;                    time.sleep(self.base * (2 ** i))&#xa;            raise exc&#xa;        return wrapped&#xa;&#xa;&#xa;@Retry(tries=4, base=1.0)&#xa;def llm_classify(case_text: str, candidate_categories: List[Category]) -&gt; TicketClassification:&#xa;    &quot;&quot;&quot;Вызывает LLM с жёсткой схемой SGR и возвращает парсенный объект.&quot;&quot;&quot;&#xa;    # Сжимаем список категорий в компактный JSON для подсказки&#xa;    cats_brief = [&#xa;        {&#xa;            &quot;id&quot;: c.id,&#xa;            &quot;name&quot;: c.name,&#xa;            &quot;description&quot;: c.description,&#xa;            &quot;keywords&quot;: c.keywords[:8],&#xa;        }&#xa;        for c in candidate_categories&#xa;    ]&#xa;&#xa;&#xa;    system = (&#xa;        &quot;Ты — классификатор обращений поддержки в банковском кредитном процессе. &quot;&#xa;        &quot;Строго следуй схеме ответа, не выходи за пределы. &quot;&#xa;        &quot;Если нет подходящей категории — создай новую краткую бизнес‑категорию. &quot;&#xa;        &quot;Избегай PII, не копируй целиком тексты клиента.&quot;&#xa;    )&#xa;    developer = (&#xa;        &quot;Полезные категории (топ‑N по близости):\n&quot; + json.dumps(cats_brief, ensure_ascii=False)&#xa;        + &quot;\nВыбирай существующую **только** если смысловое совпадение высокое.&quot;&#xa;    )&#xa;&#xa;&#xa;    messages = [&#xa;        {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: system},&#xa;        {&quot;role&quot;: &quot;developer&quot;, &quot;content&quot;: developer},&#xa;        {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: case_text},&#xa;    ]&#xa;&#xa;&#xa;    if not client:&#xa;        # Офлайн режим (без API ключа) — имитируем создание НОВОЙ категории&#xa;        return TicketClassification(&#xa;            normalized_problem=case_text[:200],&#xa;            signals_detected=[&quot;offline&quot;, &quot;no_api_key&quot;],&#xa;            proposed_labels=[ProposedLabel(name=&quot;Тестовая категория&quot;, rationale=&quot;Фолбэк режим&quot;, confidence=10)],&#xa;            decision=CreateNew(kind=&quot;new&quot;, proposed_name=&quot;Тестовая категория&quot;, description=&quot;Пример новой категории в офлайн режиме.&quot;, keywords=[&quot;тест&quot;, &quot;пример&quot;, &quot;офлайн&quot;], parent_hint=None, duplicates_of=[]),&#xa;            qa_consistency=&quot;ok&quot;,&#xa;            final_confidence=1,&#xa;        )&#xa;&#xa;&#xa;    comp = client.beta.chat.completions.parse(&#xa;        model=MODEL_CLASSIFY,&#xa;        response_format=TicketClassification,&#xa;        messages=messages,&#xa;        max_completion_tokens=MAX_TOKENS,&#xa;        temperature=TEMP,&#xa;    )&#xa;    parsed: TicketClassification = comp.choices[0].message.parsed&#xa;    return parsed&#xa;&#xa;&#xa;# =====================&#xa;# ������ Утилиты&#xa;# =====================&#xa;def compact_case(request: str, response: Optional[str]) -&gt; str:&#xa;    req = (request or &quot;&quot;).strip()&#xa;    res = (response or &quot;&quot;).strip()&#xa;    text = f&quot;Запрос: {req}&quot;&#xa;    if res:&#xa;        text += f&quot;\nОтвет поддержки: {res}&quot;&#xa;    return text[:4000]  # safety&#xa;&#xa;&#xa;&#xa;&#xa;def new_category_id(existing: Dict[str, Category]) -&gt; str:&#xa;    base = 1&#xa;    if existing:&#xa;        nums = []&#xa;        for cid in existing:&#xa;            try:&#xa;                nums.append(int(cid.replace(&quot;C&quot;, &quot;&quot;)))&#xa;            except Exception:&#xa;                pass&#xa;        base = (max(nums) + 1) if nums else (len(existing) + 1)&#xa;    return f&quot;C{base:04d}&quot;&#xa;&#xa;&#xa;# =====================&#xa;# ▶️ Основной цикл&#xa;# =====================&#xa;&#xa;&#xa;def run_classification():&#xa;    if not os.path.exists(EXCEL_PATH):&#xa;        raise FileNotFoundError(f&quot;Excel не найден: {EXCEL_PATH}&quot;)&#xa;&#xa;&#xa;    df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME)&#xa;    for col in [COL_ID, COL_REQ]:&#xa;        if col not in df.columns:&#xa;            raise KeyError(f&quot;Колонка &#39;{col}&#39; отсутствует в Excel&quot;)&#xa;&#xa;&#xa;    # Готовим реестр&#xa;    registry = CategoryRegistry(REGISTRY_JSON, client)&#xa;&#xa;&#xa;    # Подготовим файл присвоений&#xa;    if os.path.exists(ASSIGNMENTS_CSV):&#xa;        assignments = pd.read_csv(ASSIGNMENTS_CSV)&#xa;    else:&#xa;        assignments = pd.DataFrame(columns=[&quot;id&quot;, &quot;category_id&quot;, &quot;category_name&quot;, &quot;is_new_category&quot;, &quot;confidence_1_10&quot;, &quot;qa_consistency&quot;])    &#xa;&#xa;&#xa;    # Ограничение батча для отладки&#xa;    it_df = df if BATCH_LIMIT is None else df.head(BATCH_LIMIT)&#xa;&#xa;&#xa;    for _, row in tqdm(it_df.iterrows(), total=len(it_df)):&#xa;        rid = str(row[COL_ID])&#xa;        if (assignments[&quot;id&quot;] == rid).any():&#xa;            continue  # уже классифицировано&#xa;&#xa;&#xa;        request = str(row[COL_REQ]) if not pd.isna(row[COL_REQ]) else &quot;&quot;&#xa;        response = str(row[COL_RES]) if (COL_RES in df.columns and not pd.isna(row[COL_RES])) else &quot;&quot;&#xa;        case_text = compact_case(request, response)&#xa;&#xa;&#xa;        # 1) Подбор кандидатов&#xa;        seed_text = request + &quot;\n&quot; + response&#xa;        cand = registry.nearest(seed_text, top_k=TOP_K_CANDIDATES)&#xa;&#xa;&#xa;        # 2) Классификация по схеме SGR&#xa;        job = llm_classify(case_text, cand)&#xa;&#xa;&#xa;        # 3) Разбор решения&#xa;        is_new = False&#xa;        if isinstance(job.decision, AssignExisting):&#xa;            cid = job.decision.category_id&#xa;            cat = registry.categories.get(cid)&#xa;            if not cat:&#xa;                # страховка: если модель вернула старый id, но такой не найден — создадим новую как fallback&#xa;                is_new = True&#xa;            else:&#xa;                assignments.loc[len(assignments)] = [&#xa;                    rid, cid, cat.name, False, job.final_confidence, job.qa_consistency&#xa;                ]&#xa;                continue&#xa;&#xa;&#xa;        if isinstance(job.decision, CreateNew) or is_new:&#xa;            decide = job.decision if isinstance(job.decision, CreateNew) else None&#xa;            # Проверяем: вдруг имя совпадает с существующим (по точному имени)&#xa;            existing = registry.get_by_name(decide.proposed_name.lower()) if decide else None&#xa;            if existing:&#xa;                cid = existing.id&#xa;                cat_name = existing.name&#xa;            else:&#xa;                cid = new_category_id(registry.categories)&#xa;                cat_name = decide.proposed_name if decide else &quot;Категория без имени&quot;&#xa;                new_cat = Category(&#xa;                    id=cid,&#xa;                    name=cat_name,&#xa;                    description=(decide.description if decide else &quot;Описание не задано&quot;),&#xa;                    keywords=(decide.keywords if decide else []),&#xa;                    created_at=pd.Timestamp.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;),&#xa;                    examples=[case_text[:300]],&#xa;                    synonyms=[],&#xa;                )&#xa;                registry.upsert(new_cat)&#xa;                # Сразу посчитаем эмбеддинг для новой категории — чтобы она участвовала в следующих итерациях&#xa;                registry.ensure_embeddings()&#xa;&#xa;&#xa;            assignments.loc[len(assignments)] = [&#xa;                rid, cid, cat_name, True, job.final_confidence, job.qa_consistency&#xa;            ]&#xa;&#xa;&#xa;        # Сохраняем присвоения порциями, чтобы не потерять прогресс&#xa;        if len(assignments) % 10 == 0:&#xa;            assignments.to_csv(ASSIGNMENTS_CSV, index=False)&#xa;&#xa;&#xa;    # Финальный сейв&#xa;    assignments.to_csv(ASSIGNMENTS_CSV, index=False)&#xa;&#xa;&#xa;# %%&#xa;if __name__ == &quot;__main__&quot;:&#xa;    print(&quot;Starting classification…&quot;)&#xa;    if not OPENAI_API_KEY:&#xa;        print(&quot;⚠️ Внимание: OPENAI_API_KEY не задан — будет офлайн‑эмуляция (для отладки).&quot;)&#xa;    run_classification()&#xa;    print(&quot;Готово. Проверьте файлы:&quot;)&#xa;    print(f&quot;  • Реестр категорий: {REGISTRY_JSON}&quot;)&#xa;    print(f&quot;  • Присвоения:       {ASSIGNMENTS_CSV}&quot;)" link="# %% [markdown]&#xa;# # Классификация обращений бизнес‑пользователей в поддержку кредитного процесса&#xa;# &#xa;# **Подход:** Schema‑Guided Reasoning (SGR) + Structured Output, инкрементальная онтология категорий.&#xa;# &#xa;# Что делает ноутбук:&#xa;# 1) Загружает Excel с обращениями (колонки: `id`, `request`, `response` — переименуйте ниже, если у вас иначе).&#xa;# 2) Для каждой строки создаёт компактный контекст (вопрос+ответ), подбирает N ближайших категорий из реестра (через эмбеддинги),&#xa;# 3) Отправляет запрос к LLM с **жёсткой схемой ответа** (Pydantic) — либо сопоставляет с существующей категорией, либо создаёт новую (имя + описание + ключевые слова).&#xa;# 4) Сохраняет:&#xa;#    - присвоение категории для строки (CSV),&#xa;#    - расширенный реестр категорий (JSON),&#xa;#    - эмбеддинги для ускорения следующей итерации (встроены в JSON).&#xa;# &#xa;# ⚙️ Требования: `openai&gt;=1.40`, `pydantic&gt;=2`, `pandas`, `tqdm`, `numpy`, `scikit-learn` (для косинусной близости) &#xa;# &#xa;# ⚠️ Безопасность: модель не должна выдумывать. Все поля строго ограничены схемой. Новые категории краткие, бизнес‑язык, без PII.&#xa;&#xa;&#xa;# %%&#xa;import os&#xa;import json&#xa;import time&#xa;import math&#xa;from dataclasses import dataclass&#xa;from typing import List, Optional, Union, Literal, Dict, Any&#xa;&#xa;&#xa;import pandas as pd&#xa;import numpy as np&#xa;from pydantic import BaseModel, Field, conint, constr&#xa;from typing_extensions import Annotated&#xa;from annotated_types import MinLen, MaxLen&#xa;from tqdm import tqdm&#xa;&#xa;&#xa;# Если scikit-learn отсутствует, используем косинус вручную&#xa;try:&#xa;    from sklearn.metrics.pairwise import cosine_similarity&#xa;    def cos_sim(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:&#xa;        return cosine_similarity(a, b)&#xa;except Exception:&#xa;    def _norm(x: np.ndarray) -&gt; np.ndarray:&#xa;        n = np.linalg.norm(x, axis=1, keepdims=True) + 1e-12&#xa;        return x / n&#xa;    def cos_sim(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:&#xa;        a_n, b_n = _norm(a), _norm(b)&#xa;        return a_n @ b_n.T&#xa;&#xa;&#xa;# OpenAI SDK (см. https://pypi.org/project/openai/)&#xa;from openai import OpenAI&#xa;&#xa;&#xa;# =====================&#xa;# ������ НАСТРОЙКИ&#xa;# =====================&#xa;OPENAI_API_KEY = os.getenv(&quot;OPENAI_API_KEY&quot;, &quot;&quot;)  # положите ключ в переменную окружения&#xa;MODEL_CLASSIFY = os.getenv(&quot;LLM_CLASSIFY_MODEL&quot;, &quot;gpt-4o-mini&quot;)  # модель для классификации&#xa;MODEL_EMBED = os.getenv(&quot;EMBED_MODEL&quot;, &quot;text-embedding-3-small&quot;)  # эмбеддинги&#xa;&#xa;&#xa;EXCEL_PATH = &quot;./tickets.xlsx&quot;          # &lt;- поменяйте на ваш файл Excel&#xa;SHEET_NAME = 0                          # имя листа или индекс&#xa;COL_ID = &quot;id&quot;                           # имя колонки с уникальным идентификатором обращения&#xa;COL_REQ = &quot;request&quot;                      # имя колонки с текстом запроса&#xa;COL_RES = &quot;response&quot;                     # имя колонки с ответом (если есть)&#xa;&#xa;&#xa;REGISTRY_JSON = &quot;./category_registry.json&quot;   # файл онтологии категорий&#xa;ASSIGNMENTS_CSV = &quot;./assignments.csv&quot;        # файл присвоений (итоги классификации)&#xa;&#xa;&#xa;TOP_K_CANDIDATES = 12  # сколько ближайших категорий подмешивать в подсказку&#xa;TEMP = 0.2              # температура модели&#xa;MAX_TOKENS = 1500       # лимит на structured‑output ответ&#xa;BATCH_LIMIT = None      # ограничить количество строк для отладки: например 100; None = всё&#xa;&#xa;&#xa;# =====================&#xa;# ������ SGR: Схема ответа&#xa;# =====================&#xa;class ProposedLabel(BaseModel):&#xa;    name: constr(strip_whitespace=True, min_length=2, max_length=50)&#xa;    rationale: constr(strip_whitespace=True, min_length=5, max_length=300)&#xa;    confidence: conint(ge=0, le=100) = Field(..., description=&quot;0..100, субъективная уверенность в предложенной метке&quot;)&#xa;&#xa;&#xa;class AssignExisting(BaseModel):&#xa;    kind: Literal[&quot;existing&quot;]&#xa;    category_id: str&#xa;&#xa;&#xa;class CreateNew(BaseModel):&#xa;    kind: Literal[&quot;new&quot;]&#xa;    proposed_name: constr(strip_whitespace=True, min_length=3, max_length=40) = Field(&#xa;        ..., description=&quot;Короткое имя категории до 4 слов, без спецсимволов, на русском&quot;&#xa;    )&#xa;    description: constr(strip_whitespace=True, min_length=20, max_length=300) = Field(&#xa;        ..., description=&quot;1–2 предложения деловым языком: что это за обращения и ожидаемая обработка&quot;&#xa;    )&#xa;    keywords: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=30)], MinLen(3), MaxLen(8)]&#xa;    parent_hint: Optional[constr(strip_whitespace=True, max_length=40)] = Field(&#xa;        None, description=&quot;Необязательно: надкатегория/область (напр. &#39;Заявка&#39;, &#39;Скоринг&#39;, &#39;Документы&#39;)&quot;&#xa;    )&#xa;    duplicates_of: List[str] = Field(default_factory=list, description=&quot;Список ID близких существующих категорий, если есть&quot;)&#xa;&#xa;&#xa;class TicketClassification(BaseModel):&#xa;    # --- Cascade: нормализуем запрос ---&#xa;    normalized_problem: constr(strip_whitespace=True, min_length=10, max_length=300)&#xa;    # --- Cycle: выделим ключевые сигналы (2..5) ---&#xa;    signals_detected: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=80)], MinLen(2), MaxLen(5)]&#xa;    # --- Варианты ---&#xa;    proposed_labels: Annotated[List[ProposedLabel], MinLen(1), MaxLen(3)]&#xa;    # --- Routing: выбор ветки ---&#xa;    decision: Union[AssignExisting, CreateNew]&#xa;    # --- Контроль качества ---&#xa;    qa_consistency: Literal[&quot;ok&quot;, &quot;mismatch&quot;] = Field(..., description=&quot;Совпадает ли ответ поддержки с запросом по смыслу&quot;)&#xa;    final_confidence: conint(ge=1, le=10)&#xa;&#xa;&#xa;# =====================&#xa;# ������️ Реестр категорий + эмбеддинги&#xa;# =====================&#xa;@dataclass&#xa;class Category:&#xa;    id: str&#xa;    name: str&#xa;    description: str&#xa;    keywords: List[str]&#xa;    created_at: str&#xa;    created_by: str = &quot;llm&quot;&#xa;    examples: Optional[List[str]] = None&#xa;    synonyms: Optional[List[str]] = None&#xa;    embedding: Optional[List[float]] = None&#xa;&#xa;&#xa;class CategoryRegistry:&#xa;    def __init__(self, path: str, client: OpenAI):&#xa;        self.path = path&#xa;        self.client = client&#xa;        self.schema_version = 1&#xa;        self.categories: Dict[str, Category] = {}&#xa;        if os.path.exists(path):&#xa;            self._load()&#xa;        else:&#xa;            self._save()&#xa;&#xa;&#xa;    def _load(self):&#xa;        with open(self.path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            data = json.load(f)&#xa;        for c in data.get(&quot;categories&quot;, []):&#xa;            self.categories[c[&quot;id&quot;]] = Category(**c)&#xa;&#xa;&#xa;    def _save(self):&#xa;        data = {&#xa;            &quot;schema_version&quot;: self.schema_version,&#xa;            &quot;categories&quot;: [vars(c) for c in self.categories.values()],&#xa;        }&#xa;        with open(self.path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            json.dump(data, f, ensure_ascii=False, indent=2)&#xa;&#xa;&#xa;    def all(self) -&gt; List[Category]:&#xa;        return list(self.categories.values())&#xa;&#xa;&#xa;    def upsert(self, cat: Category):&#xa;        self.categories[cat.id] = cat&#xa;        self._save()&#xa;&#xa;&#xa;    def get_by_name(self, name_lower: str) -&gt; Optional[Category]:&#xa;        for c in self.categories.values():&#xa;            if c.name.lower() == name_lower:&#xa;                return c&#xa;        return None&#xa;&#xa;&#xa;    def ensure_embeddings(self):&#xa;        &quot;&quot;&quot;Считает эмбеддинги для тех категорий, у кого их нет.&quot;&quot;&quot;&#xa;        to_update = []&#xa;        payloads = []&#xa;        for c in self.categories.values():&#xa;            if not c.embedding:&#xa;                text = f&quot;{c.name}. {c.description}. Ключевые слова: {&#39;, &#39;.join(c.keywords)}&quot;&#xa;                payloads.append(text)&#xa;                to_update.append(c.id)&#xa;        if not payloads:&#xa;            return&#xa;        # пакетно считаем эмбеддинги&#xa;        embs = embed(payloads)&#xa;        for cid, vec in zip(to_update, embs):&#xa;            self.categories[cid].embedding = vec&#xa;        self._save()&#xa;&#xa;&#xa;    def nearest(self, text: str, top_k: int = 12) -&gt; List[Category]:&#xa;        if not self.categories:&#xa;            return []&#xa;        self.ensure_embeddings()&#xa;        matrix = np.array([c.embedding for c in self.categories.values()], dtype=np.float32)&#xa;        q = np.array(embed([text])[0], dtype=np.float32).reshape(1, -1)&#xa;        sims = cos_sim(q, matrix)[0]&#xa;        order = np.argsort(-sims)[:top_k]&#xa;        cats = list(self.categories.values())&#xa;        return [cats[i] for i in order]&#xa;&#xa;&#xa;# =====================&#xa;# ������ Обёртки вокруг OpenAI&#xa;# =====================&#xa;client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None&#xa;&#xa;&#xa;def embed(texts: List[str]) -&gt; List[List[float]]:&#xa;    if not client:&#xa;        # Фолбэк: случайный вектор (для сухого прогона без ключа) — НЕ для продакшна&#xa;        rng = np.random.default_rng(0)&#xa;        return rng.normal(size=(len(texts), 1536)).tolist()&#xa;    resp = client.embeddings.create(model=MODEL_EMBED, input=texts)&#xa;    return [d.embedding for d in resp.data]&#xa;&#xa;&#xa;# Ретраи для классификации&#xa;class Retry:&#xa;    def __init__(self, tries=3, base=1.0):&#xa;        self.tries = tries&#xa;        self.base = base&#xa;    def __call__(self, fn):&#xa;        def wrapped(*args, **kwargs):&#xa;            exc = None&#xa;            for i in range(self.tries):&#xa;                try:&#xa;                    return fn(*args, **kwargs)&#xa;                except Exception as e:&#xa;                    exc = e&#xa;                    time.sleep(self.base * (2 ** i))&#xa;            raise exc&#xa;        return wrapped&#xa;&#xa;&#xa;@Retry(tries=4, base=1.0)&#xa;def llm_classify(case_text: str, candidate_categories: List[Category]) -&gt; TicketClassification:&#xa;    &quot;&quot;&quot;Вызывает LLM с жёсткой схемой SGR и возвращает парсенный объект.&quot;&quot;&quot;&#xa;    # Сжимаем список категорий в компактный JSON для подсказки&#xa;    cats_brief = [&#xa;        {&#xa;            &quot;id&quot;: c.id,&#xa;            &quot;name&quot;: c.name,&#xa;            &quot;description&quot;: c.description,&#xa;            &quot;keywords&quot;: c.keywords[:8],&#xa;        }&#xa;        for c in candidate_categories&#xa;    ]&#xa;&#xa;&#xa;    system = (&#xa;        &quot;Ты — классификатор обращений поддержки в банковском кредитном процессе. &quot;&#xa;        &quot;Строго следуй схеме ответа, не выходи за пределы. &quot;&#xa;        &quot;Если нет подходящей категории — создай новую краткую бизнес‑категорию. &quot;&#xa;        &quot;Избегай PII, не копируй целиком тексты клиента.&quot;&#xa;    )&#xa;    developer = (&#xa;        &quot;Полезные категории (топ‑N по близости):\n&quot; + json.dumps(cats_brief, ensure_ascii=False)&#xa;        + &quot;\nВыбирай существующую **только** если смысловое совпадение высокое.&quot;&#xa;    )&#xa;&#xa;&#xa;    messages = [&#xa;        {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: system},&#xa;        {&quot;role&quot;: &quot;developer&quot;, &quot;content&quot;: developer},&#xa;        {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: case_text},&#xa;    ]&#xa;&#xa;&#xa;    if not client:&#xa;        # Офлайн режим (без API ключа) — имитируем создание НОВОЙ категории&#xa;        return TicketClassification(&#xa;            normalized_problem=case_text[:200],&#xa;            signals_detected=[&quot;offline&quot;, &quot;no_api_key&quot;],&#xa;            proposed_labels=[ProposedLabel(name=&quot;Тестовая категория&quot;, rationale=&quot;Фолбэк режим&quot;, confidence=10)],&#xa;            decision=CreateNew(kind=&quot;new&quot;, proposed_name=&quot;Тестовая категория&quot;, description=&quot;Пример новой категории в офлайн режиме.&quot;, keywords=[&quot;тест&quot;, &quot;пример&quot;, &quot;офлайн&quot;], parent_hint=None, duplicates_of=[]),&#xa;            qa_consistency=&quot;ok&quot;,&#xa;            final_confidence=1,&#xa;        )&#xa;&#xa;&#xa;    comp = client.beta.chat.completions.parse(&#xa;        model=MODEL_CLASSIFY,&#xa;        response_format=TicketClassification,&#xa;        messages=messages,&#xa;        max_completion_tokens=MAX_TOKENS,&#xa;        temperature=TEMP,&#xa;    )&#xa;    parsed: TicketClassification = comp.choices[0].message.parsed&#xa;    return parsed&#xa;&#xa;&#xa;# =====================&#xa;# ������ Утилиты&#xa;# =====================&#xa;def compact_case(request: str, response: Optional[str]) -&gt; str:&#xa;    req = (request or &quot;&quot;).strip()&#xa;    res = (response or &quot;&quot;).strip()&#xa;    text = f&quot;Запрос: {req}&quot;&#xa;    if res:&#xa;        text += f&quot;\nОтвет поддержки: {res}&quot;&#xa;    return text[:4000]  # safety&#xa;&#xa;&#xa;&#xa;&#xa;def new_category_id(existing: Dict[str, Category]) -&gt; str:&#xa;    base = 1&#xa;    if existing:&#xa;        nums = []&#xa;        for cid in existing:&#xa;            try:&#xa;                nums.append(int(cid.replace(&quot;C&quot;, &quot;&quot;)))&#xa;            except Exception:&#xa;                pass&#xa;        base = (max(nums) + 1) if nums else (len(existing) + 1)&#xa;    return f&quot;C{base:04d}&quot;&#xa;&#xa;&#xa;# =====================&#xa;# ▶️ Основной цикл&#xa;# =====================&#xa;&#xa;&#xa;def run_classification():&#xa;    if not os.path.exists(EXCEL_PATH):&#xa;        raise FileNotFoundError(f&quot;Excel не найден: {EXCEL_PATH}&quot;)&#xa;&#xa;&#xa;    df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME)&#xa;    for col in [COL_ID, COL_REQ]:&#xa;        if col not in df.columns:&#xa;            raise KeyError(f&quot;Колонка &#39;{col}&#39; отсутствует в Excel&quot;)&#xa;&#xa;&#xa;    # Готовим реестр&#xa;    registry = CategoryRegistry(REGISTRY_JSON, client)&#xa;&#xa;&#xa;    # Подготовим файл присвоений&#xa;    if os.path.exists(ASSIGNMENTS_CSV):&#xa;        assignments = pd.read_csv(ASSIGNMENTS_CSV)&#xa;    else:&#xa;        assignments = pd.DataFrame(columns=[&quot;id&quot;, &quot;category_id&quot;, &quot;category_name&quot;, &quot;is_new_category&quot;, &quot;confidence_1_10&quot;, &quot;qa_consistency&quot;])    &#xa;&#xa;&#xa;    # Ограничение батча для отладки&#xa;    it_df = df if BATCH_LIMIT is None else df.head(BATCH_LIMIT)&#xa;&#xa;&#xa;    for _, row in tqdm(it_df.iterrows(), total=len(it_df)):&#xa;        rid = str(row[COL_ID])&#xa;        if (assignments[&quot;id&quot;] == rid).any():&#xa;            continue  # уже классифицировано&#xa;&#xa;&#xa;        request = str(row[COL_REQ]) if not pd.isna(row[COL_REQ]) else &quot;&quot;&#xa;        response = str(row[COL_RES]) if (COL_RES in df.columns and not pd.isna(row[COL_RES])) else &quot;&quot;&#xa;        case_text = compact_case(request, response)&#xa;&#xa;&#xa;        # 1) Подбор кандидатов&#xa;        seed_text = request + &quot;\n&quot; + response&#xa;        cand = registry.nearest(seed_text, top_k=TOP_K_CANDIDATES)&#xa;&#xa;&#xa;        # 2) Классификация по схеме SGR&#xa;        job = llm_classify(case_text, cand)&#xa;&#xa;&#xa;        # 3) Разбор решения&#xa;        is_new = False&#xa;        if isinstance(job.decision, AssignExisting):&#xa;            cid = job.decision.category_id&#xa;            cat = registry.categories.get(cid)&#xa;            if not cat:&#xa;                # страховка: если модель вернула старый id, но такой не найден — создадим новую как fallback&#xa;                is_new = True&#xa;            else:&#xa;                assignments.loc[len(assignments)] = [&#xa;                    rid, cid, cat.name, False, job.final_confidence, job.qa_consistency&#xa;                ]&#xa;                continue&#xa;&#xa;&#xa;        if isinstance(job.decision, CreateNew) or is_new:&#xa;            decide = job.decision if isinstance(job.decision, CreateNew) else None&#xa;            # Проверяем: вдруг имя совпадает с существующим (по точному имени)&#xa;            existing = registry.get_by_name(decide.proposed_name.lower()) if decide else None&#xa;            if existing:&#xa;                cid = existing.id&#xa;                cat_name = existing.name&#xa;            else:&#xa;                cid = new_category_id(registry.categories)&#xa;                cat_name = decide.proposed_name if decide else &quot;Категория без имени&quot;&#xa;                new_cat = Category(&#xa;                    id=cid,&#xa;                    name=cat_name,&#xa;                    description=(decide.description if decide else &quot;Описание не задано&quot;),&#xa;                    keywords=(decide.keywords if decide else []),&#xa;                    created_at=pd.Timestamp.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;),&#xa;                    examples=[case_text[:300]],&#xa;                    synonyms=[],&#xa;                )&#xa;                registry.upsert(new_cat)&#xa;                # Сразу посчитаем эмбеддинг для новой категории — чтобы она участвовала в следующих итерациях&#xa;                registry.ensure_embeddings()&#xa;&#xa;&#xa;            assignments.loc[len(assignments)] = [&#xa;                rid, cid, cat_name, True, job.final_confidence, job.qa_consistency&#xa;            ]&#xa;&#xa;&#xa;        # Сохраняем присвоения порциями, чтобы не потерять прогресс&#xa;        if len(assignments) % 10 == 0:&#xa;            assignments.to_csv(ASSIGNMENTS_CSV, index=False)&#xa;&#xa;&#xa;    # Финальный сейв&#xa;    assignments.to_csv(ASSIGNMENTS_CSV, index=False)&#xa;&#xa;&#xa;# %%&#xa;if __name__ == &quot;__main__&quot;:&#xa;    print(&quot;Starting classification…&quot;)&#xa;    if not OPENAI_API_KEY:&#xa;        print(&quot;⚠️ Внимание: OPENAI_API_KEY не задан — будет офлайн‑эмуляция (для отладки).&quot;)&#xa;    run_classification()&#xa;    print(&quot;Готово. Проверьте файлы:&quot;)&#xa;    print(f&quot;  • Реестр категорий: {REGISTRY_JSON}&quot;)&#xa;    print(f&quot;  • Присвоения:       {ASSIGNMENTS_CSV}&quot;)" id="ntieQa3HnKI0EJcjRLTN-1">
          <mxCell style="text;whiteSpace=wrap;" parent="1" vertex="1">
            <mxGeometry x="130" y="460" width="560" height="6730" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="# %% [markdown]&#xa;# # Классификация обращений бизнес‑пользователей в поддержку кредитного процесса&#xa;# &#xa;# **Подход:** Schema‑Guided Reasoning (SGR) + Structured Output, инкрементальная онтология категорий.&#xa;# &#xa;# Что делает ноутбук:&#xa;# 1) Загружает Excel с обращениями (колонки: `id`, `request`, `response` — переименуйте ниже, если у вас иначе).&#xa;# 2) Для каждой строки создаёт компактный контекст (вопрос+ответ), подбирает N ближайших категорий из реестра (через эмбеддинги),&#xa;# 3) Отправляет запрос к LLM с **жёсткой схемой ответа** (Pydantic) — либо сопоставляет с существующей категорией, либо создаёт новую (имя + описание + ключевые слова).&#xa;# 4) Сохраняет:&#xa;#    - присвоение категории для строки (CSV),&#xa;#    - расширенный реестр категорий (JSON),&#xa;#    - эмбеддинги для ускорения следующей итерации (встроены в JSON).&#xa;# &#xa;# ⚙️ Требования: `openai&gt;=1.40`, `pydantic&gt;=2`, `pandas`, `tqdm`, `numpy`, `scikit-learn` (для косинусной близости) &#xa;# &#xa;# ⚠️ Безопасность: модель не должна выдумывать. Все поля строго ограничены схемой. Новые категории краткие, бизнес‑язык, без PII.&#xa;&#xa;&#xa;# %%&#xa;import os&#xa;import json&#xa;import time&#xa;import math&#xa;from dataclasses import dataclass&#xa;from typing import List, Optional, Union, Literal, Dict, Any&#xa;&#xa;&#xa;import pandas as pd&#xa;import numpy as np&#xa;from pydantic import BaseModel, Field, conint, constr&#xa;from typing_extensions import Annotated&#xa;from annotated_types import MinLen, MaxLen&#xa;from tqdm import tqdm&#xa;&#xa;&#xa;# Если scikit-learn отсутствует, используем косинус вручную&#xa;try:&#xa;    from sklearn.metrics.pairwise import cosine_similarity&#xa;    def cos_sim(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:&#xa;        return cosine_similarity(a, b)&#xa;except Exception:&#xa;    def _norm(x: np.ndarray) -&gt; np.ndarray:&#xa;        n = np.linalg.norm(x, axis=1, keepdims=True) + 1e-12&#xa;        return x / n&#xa;    def cos_sim(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:&#xa;        a_n, b_n = _norm(a), _norm(b)&#xa;        return a_n @ b_n.T&#xa;&#xa;&#xa;# OpenAI SDK (см. https://pypi.org/project/openai/)&#xa;from openai import OpenAI&#xa;&#xa;&#xa;# =====================&#xa;# ������ НАСТРОЙКИ&#xa;# =====================&#xa;OPENAI_API_KEY = os.getenv(&quot;OPENAI_API_KEY&quot;, &quot;&quot;)  # положите ключ в переменную окружения&#xa;MODEL_CLASSIFY = os.getenv(&quot;LLM_CLASSIFY_MODEL&quot;, &quot;gpt-4o-mini&quot;)  # модель для классификации&#xa;MODEL_EMBED = os.getenv(&quot;EMBED_MODEL&quot;, &quot;text-embedding-3-small&quot;)  # эмбеддинги&#xa;&#xa;&#xa;EXCEL_PATH = &quot;./tickets.xlsx&quot;          # &lt;- поменяйте на ваш файл Excel&#xa;SHEET_NAME = 0                          # имя листа или индекс&#xa;COL_ID = &quot;id&quot;                           # имя колонки с уникальным идентификатором обращения&#xa;COL_REQ = &quot;request&quot;                      # имя колонки с текстом запроса&#xa;COL_RES = &quot;response&quot;                     # имя колонки с ответом (если есть)&#xa;&#xa;&#xa;REGISTRY_JSON = &quot;./category_registry.json&quot;   # файл онтологии категорий&#xa;ASSIGNMENTS_CSV = &quot;./assignments.csv&quot;        # файл присвоений (итоги классификации)&#xa;&#xa;&#xa;TOP_K_CANDIDATES = 12  # сколько ближайших категорий подмешивать в подсказку&#xa;TEMP = 0.2              # температура модели&#xa;MAX_TOKENS = 1500       # лимит на structured‑output ответ&#xa;BATCH_LIMIT = None      # ограничить количество строк для отладки: например 100; None = всё&#xa;&#xa;&#xa;# =====================&#xa;# ������ SGR: Схема ответа&#xa;# =====================&#xa;class ProposedLabel(BaseModel):&#xa;    name: constr(strip_whitespace=True, min_length=2, max_length=50)&#xa;    rationale: constr(strip_whitespace=True, min_length=5, max_length=300)&#xa;    confidence: conint(ge=0, le=100) = Field(..., description=&quot;0..100, субъективная уверенность в предложенной метке&quot;)&#xa;&#xa;&#xa;class AssignExisting(BaseModel):&#xa;    kind: Literal[&quot;existing&quot;]&#xa;    category_id: str&#xa;&#xa;&#xa;class CreateNew(BaseModel):&#xa;    kind: Literal[&quot;new&quot;]&#xa;    proposed_name: constr(strip_whitespace=True, min_length=3, max_length=40) = Field(&#xa;        ..., description=&quot;Короткое имя категории до 4 слов, без спецсимволов, на русском&quot;&#xa;    )&#xa;    description: constr(strip_whitespace=True, min_length=20, max_length=300) = Field(&#xa;        ..., description=&quot;1–2 предложения деловым языком: что это за обращения и ожидаемая обработка&quot;&#xa;    )&#xa;    keywords: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=30)], MinLen(3), MaxLen(8)]&#xa;    parent_hint: Optional[constr(strip_whitespace=True, max_length=40)] = Field(&#xa;        None, description=&quot;Необязательно: надкатегория/область (напр. &#39;Заявка&#39;, &#39;Скоринг&#39;, &#39;Документы&#39;)&quot;&#xa;    )&#xa;    duplicates_of: List[str] = Field(default_factory=list, description=&quot;Список ID близких существующих категорий, если есть&quot;)&#xa;&#xa;&#xa;class TicketClassification(BaseModel):&#xa;    # --- Cascade: нормализуем запрос ---&#xa;    normalized_problem: constr(strip_whitespace=True, min_length=10, max_length=300)&#xa;    # --- Cycle: выделим ключевые сигналы (2..5) ---&#xa;    signals_detected: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=80)], MinLen(2), MaxLen(5)]&#xa;    # --- Варианты ---&#xa;    proposed_labels: Annotated[List[ProposedLabel], MinLen(1), MaxLen(3)]&#xa;    # --- Routing: выбор ветки ---&#xa;    decision: Union[AssignExisting, CreateNew]&#xa;    # --- Контроль качества ---&#xa;    qa_consistency: Literal[&quot;ok&quot;, &quot;mismatch&quot;] = Field(..., description=&quot;Совпадает ли ответ поддержки с запросом по смыслу&quot;)&#xa;    final_confidence: conint(ge=1, le=10)&#xa;&#xa;&#xa;# =====================&#xa;# ������️ Реестр категорий + эмбеддинги&#xa;# =====================&#xa;@dataclass&#xa;class Category:&#xa;    id: str&#xa;    name: str&#xa;    description: str&#xa;    keywords: List[str]&#xa;    created_at: str&#xa;    created_by: str = &quot;llm&quot;&#xa;    examples: Optional[List[str]] = None&#xa;    synonyms: Optional[List[str]] = None&#xa;    embedding: Optional[List[float]] = None&#xa;&#xa;&#xa;class CategoryRegistry:&#xa;    def __init__(self, path: str, client: OpenAI):&#xa;        self.path = path&#xa;        self.client = client&#xa;        self.schema_version = 1&#xa;        self.categories: Dict[str, Category] = {}&#xa;        if os.path.exists(path):&#xa;            self._load()&#xa;        else:&#xa;            self._save()&#xa;&#xa;&#xa;    def _load(self):&#xa;        with open(self.path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            data = json.load(f)&#xa;        for c in data.get(&quot;categories&quot;, []):&#xa;            self.categories[c[&quot;id&quot;]] = Category(**c)&#xa;&#xa;&#xa;    def _save(self):&#xa;        data = {&#xa;            &quot;schema_version&quot;: self.schema_version,&#xa;            &quot;categories&quot;: [vars(c) for c in self.categories.values()],&#xa;        }&#xa;        with open(self.path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            json.dump(data, f, ensure_ascii=False, indent=2)&#xa;&#xa;&#xa;    def all(self) -&gt; List[Category]:&#xa;        return list(self.categories.values())&#xa;&#xa;&#xa;    def upsert(self, cat: Category):&#xa;        self.categories[cat.id] = cat&#xa;        self._save()&#xa;&#xa;&#xa;    def get_by_name(self, name_lower: str) -&gt; Optional[Category]:&#xa;        for c in self.categories.values():&#xa;            if c.name.lower() == name_lower:&#xa;                return c&#xa;        return None&#xa;&#xa;&#xa;    def ensure_embeddings(self):&#xa;        &quot;&quot;&quot;Считает эмбеддинги для тех категорий, у кого их нет.&quot;&quot;&quot;&#xa;        to_update = []&#xa;        payloads = []&#xa;        for c in self.categories.values():&#xa;            if not c.embedding:&#xa;                text = f&quot;{c.name}. {c.description}. Ключевые слова: {&#39;, &#39;.join(c.keywords)}&quot;&#xa;                payloads.append(text)&#xa;                to_update.append(c.id)&#xa;        if not payloads:&#xa;            return&#xa;        # пакетно считаем эмбеддинги&#xa;        embs = embed(payloads)&#xa;        for cid, vec in zip(to_update, embs):&#xa;            self.categories[cid].embedding = vec&#xa;        self._save()&#xa;&#xa;&#xa;    def nearest(self, text: str, top_k: int = 12) -&gt; List[Category]:&#xa;        if not self.categories:&#xa;            return []&#xa;        self.ensure_embeddings()&#xa;        matrix = np.array([c.embedding for c in self.categories.values()], dtype=np.float32)&#xa;        q = np.array(embed([text])[0], dtype=np.float32).reshape(1, -1)&#xa;        sims = cos_sim(q, matrix)[0]&#xa;        order = np.argsort(-sims)[:top_k]&#xa;        cats = list(self.categories.values())&#xa;        return [cats[i] for i in order]&#xa;&#xa;&#xa;# =====================&#xa;# ������ Обёртки вокруг OpenAI&#xa;# =====================&#xa;client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None&#xa;&#xa;&#xa;def embed(texts: List[str]) -&gt; List[List[float]]:&#xa;    if not client:&#xa;        # Фолбэк: случайный вектор (для сухого прогона без ключа) — НЕ для продакшна&#xa;        rng = np.random.default_rng(0)&#xa;        return rng.normal(size=(len(texts), 1536)).tolist()&#xa;    resp = client.embeddings.create(model=MODEL_EMBED, input=texts)&#xa;    return [d.embedding for d in resp.data]&#xa;&#xa;&#xa;# Ретраи для классификации&#xa;class Retry:&#xa;    def __init__(self, tries=3, base=1.0):&#xa;        self.tries = tries&#xa;        self.base = base&#xa;    def __call__(self, fn):&#xa;        def wrapped(*args, **kwargs):&#xa;            exc = None&#xa;            for i in range(self.tries):&#xa;                try:&#xa;                    return fn(*args, **kwargs)&#xa;                except Exception as e:&#xa;                    exc = e&#xa;                    time.sleep(self.base * (2 ** i))&#xa;            raise exc&#xa;        return wrapped&#xa;&#xa;&#xa;@Retry(tries=4, base=1.0)&#xa;def llm_classify(case_text: str, candidate_categories: List[Category]) -&gt; TicketClassification:&#xa;    &quot;&quot;&quot;Вызывает LLM с жёсткой схемой SGR и возвращает парсенный объект.&quot;&quot;&quot;&#xa;    # Сжимаем список категорий в компактный JSON для подсказки&#xa;    cats_brief = [&#xa;        {&#xa;            &quot;id&quot;: c.id,&#xa;            &quot;name&quot;: c.name,&#xa;            &quot;description&quot;: c.description,&#xa;            &quot;keywords&quot;: c.keywords[:8],&#xa;        }&#xa;        for c in candidate_categories&#xa;    ]&#xa;&#xa;&#xa;    system = (&#xa;        &quot;Ты — классификатор обращений поддержки в банковском кредитном процессе. &quot;&#xa;        &quot;Строго следуй схеме ответа, не выходи за пределы. &quot;&#xa;        &quot;Если нет подходящей категории — создай новую краткую бизнес‑категорию. &quot;&#xa;        &quot;Избегай PII, не копируй целиком тексты клиента.&quot;&#xa;    )&#xa;    developer = (&#xa;        &quot;Полезные категории (топ‑N по близости):\n&quot; + json.dumps(cats_brief, ensure_ascii=False)&#xa;        + &quot;\nВыбирай существующую **только** если смысловое совпадение высокое.&quot;&#xa;    )&#xa;&#xa;&#xa;    messages = [&#xa;        {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: system},&#xa;        {&quot;role&quot;: &quot;developer&quot;, &quot;content&quot;: developer},&#xa;        {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: case_text},&#xa;    ]&#xa;&#xa;&#xa;    if not client:&#xa;        # Офлайн режим (без API ключа) — имитируем создание НОВОЙ категории&#xa;        return TicketClassification(&#xa;            normalized_problem=case_text[:200],&#xa;            signals_detected=[&quot;offline&quot;, &quot;no_api_key&quot;],&#xa;            proposed_labels=[ProposedLabel(name=&quot;Тестовая категория&quot;, rationale=&quot;Фолбэк режим&quot;, confidence=10)],&#xa;            decision=CreateNew(kind=&quot;new&quot;, proposed_name=&quot;Тестовая категория&quot;, description=&quot;Пример новой категории в офлайн режиме.&quot;, keywords=[&quot;тест&quot;, &quot;пример&quot;, &quot;офлайн&quot;], parent_hint=None, duplicates_of=[]),&#xa;            qa_consistency=&quot;ok&quot;,&#xa;            final_confidence=1,&#xa;        )&#xa;&#xa;&#xa;    comp = client.beta.chat.completions.parse(&#xa;        model=MODEL_CLASSIFY,&#xa;        response_format=TicketClassification,&#xa;        messages=messages,&#xa;        max_completion_tokens=MAX_TOKENS,&#xa;        temperature=TEMP,&#xa;    )&#xa;    parsed: TicketClassification = comp.choices[0].message.parsed&#xa;    return parsed&#xa;&#xa;&#xa;# =====================&#xa;# ������ Утилиты&#xa;# =====================&#xa;def compact_case(request: str, response: Optional[str]) -&gt; str:&#xa;    req = (request or &quot;&quot;).strip()&#xa;    res = (response or &quot;&quot;).strip()&#xa;    text = f&quot;Запрос: {req}&quot;&#xa;    if res:&#xa;        text += f&quot;\nОтвет поддержки: {res}&quot;&#xa;    return text[:4000]  # safety&#xa;&#xa;&#xa;&#xa;&#xa;def new_category_id(existing: Dict[str, Category]) -&gt; str:&#xa;    base = 1&#xa;    if existing:&#xa;        nums = []&#xa;        for cid in existing:&#xa;            try:&#xa;                nums.append(int(cid.replace(&quot;C&quot;, &quot;&quot;)))&#xa;            except Exception:&#xa;                pass&#xa;        base = (max(nums) + 1) if nums else (len(existing) + 1)&#xa;    return f&quot;C{base:04d}&quot;&#xa;&#xa;&#xa;# =====================&#xa;# ▶️ Основной цикл&#xa;# =====================&#xa;&#xa;&#xa;def run_classification():&#xa;    if not os.path.exists(EXCEL_PATH):&#xa;        raise FileNotFoundError(f&quot;Excel не найден: {EXCEL_PATH}&quot;)&#xa;&#xa;&#xa;    df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME)&#xa;    for col in [COL_ID, COL_REQ]:&#xa;        if col not in df.columns:&#xa;            raise KeyError(f&quot;Колонка &#39;{col}&#39; отсутствует в Excel&quot;)&#xa;&#xa;&#xa;    # Готовим реестр&#xa;    registry = CategoryRegistry(REGISTRY_JSON, client)&#xa;&#xa;&#xa;    # Подготовим файл присвоений&#xa;    if os.path.exists(ASSIGNMENTS_CSV):&#xa;        assignments = pd.read_csv(ASSIGNMENTS_CSV)&#xa;    else:&#xa;        assignments = pd.DataFrame(columns=[&quot;id&quot;, &quot;category_id&quot;, &quot;category_name&quot;, &quot;is_new_category&quot;, &quot;confidence_1_10&quot;, &quot;qa_consistency&quot;])    &#xa;&#xa;&#xa;    # Ограничение батча для отладки&#xa;    it_df = df if BATCH_LIMIT is None else df.head(BATCH_LIMIT)&#xa;&#xa;&#xa;    for _, row in tqdm(it_df.iterrows(), total=len(it_df)):&#xa;        rid = str(row[COL_ID])&#xa;        if (assignments[&quot;id&quot;] == rid).any():&#xa;            continue  # уже классифицировано&#xa;&#xa;&#xa;        request = str(row[COL_REQ]) if not pd.isna(row[COL_REQ]) else &quot;&quot;&#xa;        response = str(row[COL_RES]) if (COL_RES in df.columns and not pd.isna(row[COL_RES])) else &quot;&quot;&#xa;        case_text = compact_case(request, response)&#xa;&#xa;&#xa;        # 1) Подбор кандидатов&#xa;        seed_text = request + &quot;\n&quot; + response&#xa;        cand = registry.nearest(seed_text, top_k=TOP_K_CANDIDATES)&#xa;&#xa;&#xa;        # 2) Классификация по схеме SGR&#xa;        job = llm_classify(case_text, cand)&#xa;&#xa;&#xa;        # 3) Разбор решения&#xa;        is_new = False&#xa;        if isinstance(job.decision, AssignExisting):&#xa;            cid = job.decision.category_id&#xa;            cat = registry.categories.get(cid)&#xa;            if not cat:&#xa;                # страховка: если модель вернула старый id, но такой не найден — создадим новую как fallback&#xa;                is_new = True&#xa;            else:&#xa;                assignments.loc[len(assignments)] = [&#xa;                    rid, cid, cat.name, False, job.final_confidence, job.qa_consistency&#xa;                ]&#xa;                continue&#xa;&#xa;&#xa;        if isinstance(job.decision, CreateNew) or is_new:&#xa;            decide = job.decision if isinstance(job.decision, CreateNew) else None&#xa;            # Проверяем: вдруг имя совпадает с существующим (по точному имени)&#xa;            existing = registry.get_by_name(decide.proposed_name.lower()) if decide else None&#xa;            if existing:&#xa;                cid = existing.id&#xa;                cat_name = existing.name&#xa;            else:&#xa;                cid = new_category_id(registry.categories)&#xa;                cat_name = decide.proposed_name if decide else &quot;Категория без имени&quot;&#xa;                new_cat = Category(&#xa;                    id=cid,&#xa;                    name=cat_name,&#xa;                    description=(decide.description if decide else &quot;Описание не задано&quot;),&#xa;                    keywords=(decide.keywords if decide else []),&#xa;                    created_at=pd.Timestamp.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;),&#xa;                    examples=[case_text[:300]],&#xa;                    synonyms=[],&#xa;                )&#xa;                registry.upsert(new_cat)&#xa;                # Сразу посчитаем эмбеддинг для новой категории — чтобы она участвовала в следующих итерациях&#xa;                registry.ensure_embeddings()&#xa;&#xa;&#xa;            assignments.loc[len(assignments)] = [&#xa;                rid, cid, cat_name, True, job.final_confidence, job.qa_consistency&#xa;            ]&#xa;&#xa;&#xa;        # Сохраняем присвоения порциями, чтобы не потерять прогресс&#xa;        if len(assignments) % 10 == 0:&#xa;            assignments.to_csv(ASSIGNMENTS_CSV, index=False)&#xa;&#xa;&#xa;    # Финальный сейв&#xa;    assignments.to_csv(ASSIGNMENTS_CSV, index=False)&#xa;&#xa;&#xa;# %%&#xa;if __name__ == &quot;__main__&quot;:&#xa;    print(&quot;Starting classification…&quot;)&#xa;    if not OPENAI_API_KEY:&#xa;        print(&quot;⚠️ Внимание: OPENAI_API_KEY не задан — будет офлайн‑эмуляция (для отладки).&quot;)&#xa;    run_classification()&#xa;    print(&quot;Готово. Проверьте файлы:&quot;)&#xa;    print(f&quot;  • Реестр категорий: {REGISTRY_JSON}&quot;)&#xa;    print(f&quot;  • Присвоения:       {ASSIGNMENTS_CSV}&quot;)" link="# %% [markdown]&#xa;# # Классификация обращений бизнес‑пользователей в поддержку кредитного процесса&#xa;# &#xa;# **Подход:** Schema‑Guided Reasoning (SGR) + Structured Output, инкрементальная онтология категорий.&#xa;# &#xa;# Что делает ноутбук:&#xa;# 1) Загружает Excel с обращениями (колонки: `id`, `request`, `response` — переименуйте ниже, если у вас иначе).&#xa;# 2) Для каждой строки создаёт компактный контекст (вопрос+ответ), подбирает N ближайших категорий из реестра (через эмбеддинги),&#xa;# 3) Отправляет запрос к LLM с **жёсткой схемой ответа** (Pydantic) — либо сопоставляет с существующей категорией, либо создаёт новую (имя + описание + ключевые слова).&#xa;# 4) Сохраняет:&#xa;#    - присвоение категории для строки (CSV),&#xa;#    - расширенный реестр категорий (JSON),&#xa;#    - эмбеддинги для ускорения следующей итерации (встроены в JSON).&#xa;# &#xa;# ⚙️ Требования: `openai&gt;=1.40`, `pydantic&gt;=2`, `pandas`, `tqdm`, `numpy`, `scikit-learn` (для косинусной близости) &#xa;# &#xa;# ⚠️ Безопасность: модель не должна выдумывать. Все поля строго ограничены схемой. Новые категории краткие, бизнес‑язык, без PII.&#xa;&#xa;&#xa;# %%&#xa;import os&#xa;import json&#xa;import time&#xa;import math&#xa;from dataclasses import dataclass&#xa;from typing import List, Optional, Union, Literal, Dict, Any&#xa;&#xa;&#xa;import pandas as pd&#xa;import numpy as np&#xa;from pydantic import BaseModel, Field, conint, constr&#xa;from typing_extensions import Annotated&#xa;from annotated_types import MinLen, MaxLen&#xa;from tqdm import tqdm&#xa;&#xa;&#xa;# Если scikit-learn отсутствует, используем косинус вручную&#xa;try:&#xa;    from sklearn.metrics.pairwise import cosine_similarity&#xa;    def cos_sim(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:&#xa;        return cosine_similarity(a, b)&#xa;except Exception:&#xa;    def _norm(x: np.ndarray) -&gt; np.ndarray:&#xa;        n = np.linalg.norm(x, axis=1, keepdims=True) + 1e-12&#xa;        return x / n&#xa;    def cos_sim(a: np.ndarray, b: np.ndarray) -&gt; np.ndarray:&#xa;        a_n, b_n = _norm(a), _norm(b)&#xa;        return a_n @ b_n.T&#xa;&#xa;&#xa;# OpenAI SDK (см. https://pypi.org/project/openai/)&#xa;from openai import OpenAI&#xa;&#xa;&#xa;# =====================&#xa;# ������ НАСТРОЙКИ&#xa;# =====================&#xa;OPENAI_API_KEY = os.getenv(&quot;OPENAI_API_KEY&quot;, &quot;&quot;)  # положите ключ в переменную окружения&#xa;MODEL_CLASSIFY = os.getenv(&quot;LLM_CLASSIFY_MODEL&quot;, &quot;gpt-4o-mini&quot;)  # модель для классификации&#xa;MODEL_EMBED = os.getenv(&quot;EMBED_MODEL&quot;, &quot;text-embedding-3-small&quot;)  # эмбеддинги&#xa;&#xa;&#xa;EXCEL_PATH = &quot;./tickets.xlsx&quot;          # &lt;- поменяйте на ваш файл Excel&#xa;SHEET_NAME = 0                          # имя листа или индекс&#xa;COL_ID = &quot;id&quot;                           # имя колонки с уникальным идентификатором обращения&#xa;COL_REQ = &quot;request&quot;                      # имя колонки с текстом запроса&#xa;COL_RES = &quot;response&quot;                     # имя колонки с ответом (если есть)&#xa;&#xa;&#xa;REGISTRY_JSON = &quot;./category_registry.json&quot;   # файл онтологии категорий&#xa;ASSIGNMENTS_CSV = &quot;./assignments.csv&quot;        # файл присвоений (итоги классификации)&#xa;&#xa;&#xa;TOP_K_CANDIDATES = 12  # сколько ближайших категорий подмешивать в подсказку&#xa;TEMP = 0.2              # температура модели&#xa;MAX_TOKENS = 1500       # лимит на structured‑output ответ&#xa;BATCH_LIMIT = None      # ограничить количество строк для отладки: например 100; None = всё&#xa;&#xa;&#xa;# =====================&#xa;# ������ SGR: Схема ответа&#xa;# =====================&#xa;class ProposedLabel(BaseModel):&#xa;    name: constr(strip_whitespace=True, min_length=2, max_length=50)&#xa;    rationale: constr(strip_whitespace=True, min_length=5, max_length=300)&#xa;    confidence: conint(ge=0, le=100) = Field(..., description=&quot;0..100, субъективная уверенность в предложенной метке&quot;)&#xa;&#xa;&#xa;class AssignExisting(BaseModel):&#xa;    kind: Literal[&quot;existing&quot;]&#xa;    category_id: str&#xa;&#xa;&#xa;class CreateNew(BaseModel):&#xa;    kind: Literal[&quot;new&quot;]&#xa;    proposed_name: constr(strip_whitespace=True, min_length=3, max_length=40) = Field(&#xa;        ..., description=&quot;Короткое имя категории до 4 слов, без спецсимволов, на русском&quot;&#xa;    )&#xa;    description: constr(strip_whitespace=True, min_length=20, max_length=300) = Field(&#xa;        ..., description=&quot;1–2 предложения деловым языком: что это за обращения и ожидаемая обработка&quot;&#xa;    )&#xa;    keywords: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=30)], MinLen(3), MaxLen(8)]&#xa;    parent_hint: Optional[constr(strip_whitespace=True, max_length=40)] = Field(&#xa;        None, description=&quot;Необязательно: надкатегория/область (напр. &#39;Заявка&#39;, &#39;Скоринг&#39;, &#39;Документы&#39;)&quot;&#xa;    )&#xa;    duplicates_of: List[str] = Field(default_factory=list, description=&quot;Список ID близких существующих категорий, если есть&quot;)&#xa;&#xa;&#xa;class TicketClassification(BaseModel):&#xa;    # --- Cascade: нормализуем запрос ---&#xa;    normalized_problem: constr(strip_whitespace=True, min_length=10, max_length=300)&#xa;    # --- Cycle: выделим ключевые сигналы (2..5) ---&#xa;    signals_detected: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=80)], MinLen(2), MaxLen(5)]&#xa;    # --- Варианты ---&#xa;    proposed_labels: Annotated[List[ProposedLabel], MinLen(1), MaxLen(3)]&#xa;    # --- Routing: выбор ветки ---&#xa;    decision: Union[AssignExisting, CreateNew]&#xa;    # --- Контроль качества ---&#xa;    qa_consistency: Literal[&quot;ok&quot;, &quot;mismatch&quot;] = Field(..., description=&quot;Совпадает ли ответ поддержки с запросом по смыслу&quot;)&#xa;    final_confidence: conint(ge=1, le=10)&#xa;&#xa;&#xa;# =====================&#xa;# ������️ Реестр категорий + эмбеддинги&#xa;# =====================&#xa;@dataclass&#xa;class Category:&#xa;    id: str&#xa;    name: str&#xa;    description: str&#xa;    keywords: List[str]&#xa;    created_at: str&#xa;    created_by: str = &quot;llm&quot;&#xa;    examples: Optional[List[str]] = None&#xa;    synonyms: Optional[List[str]] = None&#xa;    embedding: Optional[List[float]] = None&#xa;&#xa;&#xa;class CategoryRegistry:&#xa;    def __init__(self, path: str, client: OpenAI):&#xa;        self.path = path&#xa;        self.client = client&#xa;        self.schema_version = 1&#xa;        self.categories: Dict[str, Category] = {}&#xa;        if os.path.exists(path):&#xa;            self._load()&#xa;        else:&#xa;            self._save()&#xa;&#xa;&#xa;    def _load(self):&#xa;        with open(self.path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            data = json.load(f)&#xa;        for c in data.get(&quot;categories&quot;, []):&#xa;            self.categories[c[&quot;id&quot;]] = Category(**c)&#xa;&#xa;&#xa;    def _save(self):&#xa;        data = {&#xa;            &quot;schema_version&quot;: self.schema_version,&#xa;            &quot;categories&quot;: [vars(c) for c in self.categories.values()],&#xa;        }&#xa;        with open(self.path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            json.dump(data, f, ensure_ascii=False, indent=2)&#xa;&#xa;&#xa;    def all(self) -&gt; List[Category]:&#xa;        return list(self.categories.values())&#xa;&#xa;&#xa;    def upsert(self, cat: Category):&#xa;        self.categories[cat.id] = cat&#xa;        self._save()&#xa;&#xa;&#xa;    def get_by_name(self, name_lower: str) -&gt; Optional[Category]:&#xa;        for c in self.categories.values():&#xa;            if c.name.lower() == name_lower:&#xa;                return c&#xa;        return None&#xa;&#xa;&#xa;    def ensure_embeddings(self):&#xa;        &quot;&quot;&quot;Считает эмбеддинги для тех категорий, у кого их нет.&quot;&quot;&quot;&#xa;        to_update = []&#xa;        payloads = []&#xa;        for c in self.categories.values():&#xa;            if not c.embedding:&#xa;                text = f&quot;{c.name}. {c.description}. Ключевые слова: {&#39;, &#39;.join(c.keywords)}&quot;&#xa;                payloads.append(text)&#xa;                to_update.append(c.id)&#xa;        if not payloads:&#xa;            return&#xa;        # пакетно считаем эмбеддинги&#xa;        embs = embed(payloads)&#xa;        for cid, vec in zip(to_update, embs):&#xa;            self.categories[cid].embedding = vec&#xa;        self._save()&#xa;&#xa;&#xa;    def nearest(self, text: str, top_k: int = 12) -&gt; List[Category]:&#xa;        if not self.categories:&#xa;            return []&#xa;        self.ensure_embeddings()&#xa;        matrix = np.array([c.embedding for c in self.categories.values()], dtype=np.float32)&#xa;        q = np.array(embed([text])[0], dtype=np.float32).reshape(1, -1)&#xa;        sims = cos_sim(q, matrix)[0]&#xa;        order = np.argsort(-sims)[:top_k]&#xa;        cats = list(self.categories.values())&#xa;        return [cats[i] for i in order]&#xa;&#xa;&#xa;# =====================&#xa;# ������ Обёртки вокруг OpenAI&#xa;# =====================&#xa;client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None&#xa;&#xa;&#xa;def embed(texts: List[str]) -&gt; List[List[float]]:&#xa;    if not client:&#xa;        # Фолбэк: случайный вектор (для сухого прогона без ключа) — НЕ для продакшна&#xa;        rng = np.random.default_rng(0)&#xa;        return rng.normal(size=(len(texts), 1536)).tolist()&#xa;    resp = client.embeddings.create(model=MODEL_EMBED, input=texts)&#xa;    return [d.embedding for d in resp.data]&#xa;&#xa;&#xa;# Ретраи для классификации&#xa;class Retry:&#xa;    def __init__(self, tries=3, base=1.0):&#xa;        self.tries = tries&#xa;        self.base = base&#xa;    def __call__(self, fn):&#xa;        def wrapped(*args, **kwargs):&#xa;            exc = None&#xa;            for i in range(self.tries):&#xa;                try:&#xa;                    return fn(*args, **kwargs)&#xa;                except Exception as e:&#xa;                    exc = e&#xa;                    time.sleep(self.base * (2 ** i))&#xa;            raise exc&#xa;        return wrapped&#xa;&#xa;&#xa;@Retry(tries=4, base=1.0)&#xa;def llm_classify(case_text: str, candidate_categories: List[Category]) -&gt; TicketClassification:&#xa;    &quot;&quot;&quot;Вызывает LLM с жёсткой схемой SGR и возвращает парсенный объект.&quot;&quot;&quot;&#xa;    # Сжимаем список категорий в компактный JSON для подсказки&#xa;    cats_brief = [&#xa;        {&#xa;            &quot;id&quot;: c.id,&#xa;            &quot;name&quot;: c.name,&#xa;            &quot;description&quot;: c.description,&#xa;            &quot;keywords&quot;: c.keywords[:8],&#xa;        }&#xa;        for c in candidate_categories&#xa;    ]&#xa;&#xa;&#xa;    system = (&#xa;        &quot;Ты — классификатор обращений поддержки в банковском кредитном процессе. &quot;&#xa;        &quot;Строго следуй схеме ответа, не выходи за пределы. &quot;&#xa;        &quot;Если нет подходящей категории — создай новую краткую бизнес‑категорию. &quot;&#xa;        &quot;Избегай PII, не копируй целиком тексты клиента.&quot;&#xa;    )&#xa;    developer = (&#xa;        &quot;Полезные категории (топ‑N по близости):\n&quot; + json.dumps(cats_brief, ensure_ascii=False)&#xa;        + &quot;\nВыбирай существующую **только** если смысловое совпадение высокое.&quot;&#xa;    )&#xa;&#xa;&#xa;    messages = [&#xa;        {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: system},&#xa;        {&quot;role&quot;: &quot;developer&quot;, &quot;content&quot;: developer},&#xa;        {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: case_text},&#xa;    ]&#xa;&#xa;&#xa;    if not client:&#xa;        # Офлайн режим (без API ключа) — имитируем создание НОВОЙ категории&#xa;        return TicketClassification(&#xa;            normalized_problem=case_text[:200],&#xa;            signals_detected=[&quot;offline&quot;, &quot;no_api_key&quot;],&#xa;            proposed_labels=[ProposedLabel(name=&quot;Тестовая категория&quot;, rationale=&quot;Фолбэк режим&quot;, confidence=10)],&#xa;            decision=CreateNew(kind=&quot;new&quot;, proposed_name=&quot;Тестовая категория&quot;, description=&quot;Пример новой категории в офлайн режиме.&quot;, keywords=[&quot;тест&quot;, &quot;пример&quot;, &quot;офлайн&quot;], parent_hint=None, duplicates_of=[]),&#xa;            qa_consistency=&quot;ok&quot;,&#xa;            final_confidence=1,&#xa;        )&#xa;&#xa;&#xa;    comp = client.beta.chat.completions.parse(&#xa;        model=MODEL_CLASSIFY,&#xa;        response_format=TicketClassification,&#xa;        messages=messages,&#xa;        max_completion_tokens=MAX_TOKENS,&#xa;        temperature=TEMP,&#xa;    )&#xa;    parsed: TicketClassification = comp.choices[0].message.parsed&#xa;    return parsed&#xa;&#xa;&#xa;# =====================&#xa;# ������ Утилиты&#xa;# =====================&#xa;def compact_case(request: str, response: Optional[str]) -&gt; str:&#xa;    req = (request or &quot;&quot;).strip()&#xa;    res = (response or &quot;&quot;).strip()&#xa;    text = f&quot;Запрос: {req}&quot;&#xa;    if res:&#xa;        text += f&quot;\nОтвет поддержки: {res}&quot;&#xa;    return text[:4000]  # safety&#xa;&#xa;&#xa;&#xa;&#xa;def new_category_id(existing: Dict[str, Category]) -&gt; str:&#xa;    base = 1&#xa;    if existing:&#xa;        nums = []&#xa;        for cid in existing:&#xa;            try:&#xa;                nums.append(int(cid.replace(&quot;C&quot;, &quot;&quot;)))&#xa;            except Exception:&#xa;                pass&#xa;        base = (max(nums) + 1) if nums else (len(existing) + 1)&#xa;    return f&quot;C{base:04d}&quot;&#xa;&#xa;&#xa;# =====================&#xa;# ▶️ Основной цикл&#xa;# =====================&#xa;&#xa;&#xa;def run_classification():&#xa;    if not os.path.exists(EXCEL_PATH):&#xa;        raise FileNotFoundError(f&quot;Excel не найден: {EXCEL_PATH}&quot;)&#xa;&#xa;&#xa;    df = pd.read_excel(EXCEL_PATH, sheet_name=SHEET_NAME)&#xa;    for col in [COL_ID, COL_REQ]:&#xa;        if col not in df.columns:&#xa;            raise KeyError(f&quot;Колонка &#39;{col}&#39; отсутствует в Excel&quot;)&#xa;&#xa;&#xa;    # Готовим реестр&#xa;    registry = CategoryRegistry(REGISTRY_JSON, client)&#xa;&#xa;&#xa;    # Подготовим файл присвоений&#xa;    if os.path.exists(ASSIGNMENTS_CSV):&#xa;        assignments = pd.read_csv(ASSIGNMENTS_CSV)&#xa;    else:&#xa;        assignments = pd.DataFrame(columns=[&quot;id&quot;, &quot;category_id&quot;, &quot;category_name&quot;, &quot;is_new_category&quot;, &quot;confidence_1_10&quot;, &quot;qa_consistency&quot;])    &#xa;&#xa;&#xa;    # Ограничение батча для отладки&#xa;    it_df = df if BATCH_LIMIT is None else df.head(BATCH_LIMIT)&#xa;&#xa;&#xa;    for _, row in tqdm(it_df.iterrows(), total=len(it_df)):&#xa;        rid = str(row[COL_ID])&#xa;        if (assignments[&quot;id&quot;] == rid).any():&#xa;            continue  # уже классифицировано&#xa;&#xa;&#xa;        request = str(row[COL_REQ]) if not pd.isna(row[COL_REQ]) else &quot;&quot;&#xa;        response = str(row[COL_RES]) if (COL_RES in df.columns and not pd.isna(row[COL_RES])) else &quot;&quot;&#xa;        case_text = compact_case(request, response)&#xa;&#xa;&#xa;        # 1) Подбор кандидатов&#xa;        seed_text = request + &quot;\n&quot; + response&#xa;        cand = registry.nearest(seed_text, top_k=TOP_K_CANDIDATES)&#xa;&#xa;&#xa;        # 2) Классификация по схеме SGR&#xa;        job = llm_classify(case_text, cand)&#xa;&#xa;&#xa;        # 3) Разбор решения&#xa;        is_new = False&#xa;        if isinstance(job.decision, AssignExisting):&#xa;            cid = job.decision.category_id&#xa;            cat = registry.categories.get(cid)&#xa;            if not cat:&#xa;                # страховка: если модель вернула старый id, но такой не найден — создадим новую как fallback&#xa;                is_new = True&#xa;            else:&#xa;                assignments.loc[len(assignments)] = [&#xa;                    rid, cid, cat.name, False, job.final_confidence, job.qa_consistency&#xa;                ]&#xa;                continue&#xa;&#xa;&#xa;        if isinstance(job.decision, CreateNew) or is_new:&#xa;            decide = job.decision if isinstance(job.decision, CreateNew) else None&#xa;            # Проверяем: вдруг имя совпадает с существующим (по точному имени)&#xa;            existing = registry.get_by_name(decide.proposed_name.lower()) if decide else None&#xa;            if existing:&#xa;                cid = existing.id&#xa;                cat_name = existing.name&#xa;            else:&#xa;                cid = new_category_id(registry.categories)&#xa;                cat_name = decide.proposed_name if decide else &quot;Категория без имени&quot;&#xa;                new_cat = Category(&#xa;                    id=cid,&#xa;                    name=cat_name,&#xa;                    description=(decide.description if decide else &quot;Описание не задано&quot;),&#xa;                    keywords=(decide.keywords if decide else []),&#xa;                    created_at=pd.Timestamp.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;),&#xa;                    examples=[case_text[:300]],&#xa;                    synonyms=[],&#xa;                )&#xa;                registry.upsert(new_cat)&#xa;                # Сразу посчитаем эмбеддинг для новой категории — чтобы она участвовала в следующих итерациях&#xa;                registry.ensure_embeddings()&#xa;&#xa;&#xa;            assignments.loc[len(assignments)] = [&#xa;                rid, cid, cat_name, True, job.final_confidence, job.qa_consistency&#xa;            ]&#xa;&#xa;&#xa;        # Сохраняем присвоения порциями, чтобы не потерять прогресс&#xa;        if len(assignments) % 10 == 0:&#xa;            assignments.to_csv(ASSIGNMENTS_CSV, index=False)&#xa;&#xa;&#xa;    # Финальный сейв&#xa;    assignments.to_csv(ASSIGNMENTS_CSV, index=False)&#xa;&#xa;&#xa;# %%&#xa;if __name__ == &quot;__main__&quot;:&#xa;    print(&quot;Starting classification…&quot;)&#xa;    if not OPENAI_API_KEY:&#xa;        print(&quot;⚠️ Внимание: OPENAI_API_KEY не задан — будет офлайн‑эмуляция (для отладки).&quot;)&#xa;    run_classification()&#xa;    print(&quot;Готово. Проверьте файлы:&quot;)&#xa;    print(f&quot;  • Реестр категорий: {REGISTRY_JSON}&quot;)&#xa;    print(f&quot;  • Присвоения:       {ASSIGNMENTS_CSV}&quot;)" id="ntieQa3HnKI0EJcjRLTN-2">
          <mxCell style="text;whiteSpace=wrap;" parent="1" vertex="1">
            <mxGeometry x="1330" y="40" width="560" height="6730" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="# %% [markdown]&#xa;# # Классификация обращений: без эмбеддингов, SGR через промпт, **вход/выход по буквам столбцов**&#xa;# &#xa;# Скрипт читает Excel, берёт входные поля **по буквам столбцов** (например, `B` для request, `C` для response),&#xa;# вызывает вашу LLM по схеме SGR (через промпт без native structured output) и записывает результат **в те же строки** листа,&#xa;# адресуя выходные столбцы также **по буквам** (`G`, `H`, ...).&#xa;# &#xa;# Требования: `openpyxl&gt;=3.1`, `pydantic&gt;=2`, `tqdm`. (pandas используется только для timestamp; при желании можно заменить на `datetime`).&#xa;&#xa;&#xa;# %%&#xa;import os&#xa;import json&#xa;import re&#xa;from dataclasses import dataclass&#xa;from typing import List, Optional, Dict, Any, Literal, Union&#xa;&#xa;&#xa;import pandas as pd&#xa;from pydantic import BaseModel, Field, ValidationError, constr, conint&#xa;from typing_extensions import Annotated&#xa;from annotated_types import MinLen, MaxLen&#xa;from tqdm import tqdm&#xa;&#xa;&#xa;from openpyxl import load_workbook&#xa;from openpyxl.utils import column_index_from_string&#xa;&#xa;&#xa;# =====================&#xa;# ������ НАСТРОЙКИ&#xa;# =====================&#xa;EXCEL_PATH = &quot;./tickets.xlsx&quot;     # путь к Excel с обращениями&#xa;SHEET_NAME = 0                     # имя листа (str) или индекс (int)&#xa;START_ROW = 2                      # с какой строки начинаются данные (1 — первая строка Excel)&#xa;&#xa;&#xa;# ВХОДНЫЕ ПОЛЯ: укажите **буквы** столбцов&#xa;IN_COLS_LETTERS = {&#xa;    &quot;request&quot;: &quot;B&quot;,   # колонка с текстом запроса&#xa;    &quot;response&quot;: &quot;C&quot;,  # колонка с ответом поддержки (если есть)&#xa;    # при необходимости можно добавить &quot;id&quot;: &quot;A&quot; и использовать его в логике пропуска/аудита&#xa;}&#xa;&#xa;&#xa;# ВЫХОДНЫЕ ПОЛЯ: укажите **буквы** столбцов&#xa;OUT_COLS_LETTERS = {&#xa;    &quot;category_id&quot;: &quot;G&quot;,&#xa;    &quot;category_name&quot;: &quot;H&quot;,&#xa;    &quot;is_new_category&quot;: &quot;I&quot;,&#xa;    &quot;confidence_1_10&quot;: &quot;J&quot;,&#xa;    &quot;qa_consistency&quot;: &quot;K&quot;,&#xa;    &quot;json&quot;: &quot;L&quot;,  # для аудита: полный JSON-ответ модели&#xa;}&#xa;&#xa;&#xa;SAVE_EVERY = 10                   # как часто сохранять файл Excel&#xa;&#xa;&#xa;# Список категорий для промпта берём из локального реестра; при желании подставьте свой источник&#xa;CATEGORIES_IN_PROMPT_STRATEGY: Literal[&quot;all&quot;, &quot;recent_n&quot;] = &quot;all&quot;&#xa;RECENT_N = 300&#xa;&#xa;&#xa;REGISTRY_JSON = &quot;./category_registry.json&quot;   # реестр категорий (наращивается между итерациями)&#xa;&#xa;&#xa;# =====================&#xa;# ������ Схема (валидация ответа модели в Python)&#xa;# =====================&#xa;class ProposedLabel(BaseModel):&#xa;    name: constr(strip_whitespace=True, min_length=2, max_length=50)&#xa;    rationale: constr(strip_whitespace=True, min_length=5, max_length=300)&#xa;    confidence: conint(ge=0, le=100)&#xa;&#xa;&#xa;class AssignExisting(BaseModel):&#xa;    kind: Literal[&quot;existing&quot;]&#xa;    category_id: constr(strip_whitespace=True, min_length=1, max_length=40)&#xa;&#xa;&#xa;class CreateNew(BaseModel):&#xa;    kind: Literal[&quot;new&quot;]&#xa;    proposed_name: constr(strip_whitespace=True, min_length=3, max_length=40)&#xa;    description: constr(strip_whitespace=True, min_length=20, max_length=300)&#xa;    keywords: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=30)], MinLen(3), MaxLen(8)]&#xa;    parent_hint: Optional[constr(strip_whitespace=True, max_length=40)] = None&#xa;    duplicates_of: List[str] = Field(default_factory=list)&#xa;&#xa;&#xa;class TicketClassification(BaseModel):&#xa;    normalized_problem: constr(strip_whitespace=True, min_length=10, max_length=300)&#xa;    signals_detected: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=80)], MinLen(2), MaxLen(5)]&#xa;    proposed_labels: Annotated[List[ProposedLabel], MinLen(1), MaxLen(3)]&#xa;    decision: Union[AssignExisting, CreateNew]&#xa;    qa_consistency: Literal[&quot;ok&quot;, &quot;mismatch&quot;]&#xa;    final_confidence: conint(ge=1, le=10)&#xa;&#xa;&#xa;# =====================&#xa;# ������️ Реестр категорий (без эмбеддингов)&#xa;# =====================&#xa;@dataclass&#xa;class Category:&#xa;    id: str&#xa;    name: str&#xa;    description: str&#xa;    keywords: List[str]&#xa;    created_at: str&#xa;    created_by: str = &quot;llm&quot;&#xa;&#xa;&#xa;class CategoryRegistry:&#xa;    def __init__(self, path: str):&#xa;        self.path = path&#xa;        self.categories: Dict[str, Category] = {}&#xa;        if os.path.exists(path):&#xa;            self._load()&#xa;        else:&#xa;            self._save()&#xa;&#xa;&#xa;    def _load(self):&#xa;        with open(self.path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            data = json.load(f)&#xa;        for c in data.get(&quot;categories&quot;, []):&#xa;            self.categories[c[&quot;id&quot;]] = Category(**c)&#xa;&#xa;&#xa;    def _save(self):&#xa;        data = {&#xa;            &quot;schema_version&quot;: 1,&#xa;            &quot;categories&quot;: [vars(c) for c in self.categories.values()],&#xa;        }&#xa;        with open(self.path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            json.dump(data, f, ensure_ascii=False, indent=2)&#xa;&#xa;&#xa;    def all(self) -&gt; List[Category]:&#xa;        return [self.categories[k] for k in sorted(self.categories.keys())]&#xa;&#xa;&#xa;    def upsert(self, cat: Category):&#xa;        self.categories[cat.id] = cat&#xa;        self._save()&#xa;&#xa;&#xa;    def get_by_id(self, cid: str) -&gt; Optional[Category]:&#xa;        return self.categories.get(cid)&#xa;&#xa;&#xa;    def get_by_name_lower(self, name_lower: str) -&gt; Optional[Category]:&#xa;        for c in self.categories.values():&#xa;            if c.name.lower() == name_lower:&#xa;                return c&#xa;        return None&#xa;&#xa;&#xa;# =====================&#xa;# ������ Заглушка вызова вашей модели&#xa;# =====================&#xa;&#xa;&#xa;def call_llm(system: str, prompt: str, **kwargs) -&gt; str:&#xa;    &quot;&quot;&quot;&#xa;    Реализуйте вызов своей LLM здесь. Функция должна вернуть СТРОКУ с JSON-объектом,&#xa;    строго соответствующим схеме, указанной в тексте промпта (см. build_prompt()).&#xa;    &quot;&quot;&quot;&#xa;    raise NotImplementedError(&quot;Подставьте вызов вашей модели в call_llm()&quot;)&#xa;&#xa;&#xa;# =====================&#xa;# ������ Построение промпта (SGR + строгая JSON-схема в тексте)&#xa;# =====================&#xa;&#xa;&#xa;def build_prompt(case_text: str, categories_payload: List[Dict[str, Any]]) -&gt; Dict[str, str]:&#xa;    system = (&#xa;        &quot;Ты — классификатор обращений поддержки в банковском кредитном процессе. &quot;&#xa;        &quot;Отвечай строго одним JSON-объектом, без пояснений и без форматирования в код-блоках. &quot;&#xa;        &quot;Не раскрывай персональные данные, не цитируй длинные тексты пользователя.&quot;&#xa;    )&#xa;&#xa;&#xa;    cats_json = json.dumps([&#xa;        {&#xa;            &quot;id&quot;: c.get(&quot;id&quot;),&#xa;            &quot;name&quot;: c.get(&quot;name&quot;),&#xa;            &quot;description&quot;: c.get(&quot;description&quot;),&#xa;            &quot;keywords&quot;: c.get(&quot;keywords&quot;, [])[:8],&#xa;        }&#xa;        for c in categories_payload&#xa;    ], ensure_ascii=False)&#xa;&#xa;&#xa;    user = f&quot;&quot;&quot;&#xa;Задача: Классифицировать обращение бизнес-пользователя.&#xa;&#xa;&#xa;&lt;CASE&gt;&#xa;{case_text}&#xa;&lt;/CASE&gt;&#xa;&#xa;&#xa;&lt;EXISTING_CATEGORIES&gt;&#xa;{cats_json}&#xa;&lt;/EXISTING_CATEGORIES&gt;&#xa;&#xa;&#xa;Требования (SGR):&#xa;1) #Cascade — кратко нормализуй проблему (1–2 предложения).&#xa;2) #Cycle — выдели 2–5 ключевых сигналов.&#xa;3) Предложи 1–3 метки (name + rationale + confidence 0..100).&#xa;4) #Routing — если одна из **существующих** категорий подходит, выбери её по `category_id`.&#xa;   Иначе создай новую категорию с кратким деловым названием (до 4 слов),&#xa;   чётким описанием (1–2 предложения) и 3–8 ключевыми словами.&#xa;5) Проведи QA-проверку согласованности запроса и ответа: `qa_consistency` = &quot;ok&quot; или &quot;mismatch&quot;.&#xa;6) Поставь итоговую уверенность по 10-балльной шкале (`final_confidence`).&#xa;&#xa;&#xa;Строгая схема JSON (верни ТОЛЬКО этот объект, без пояснений):&#xa;{&#xa;  &quot;normalized_problem&quot;: string (10..300),&#xa;  &quot;signals_detected&quot;: [string, ...] (2..5 элементов),&#xa;  &quot;proposed_labels&quot;: [&#xa;    {&quot;name&quot;: string(2..50), &quot;rationale&quot;: string(5..300), &quot;confidence&quot;: int 0..100},&#xa;    ... 1..3 элемента&#xa;  ],&#xa;  &quot;decision&quot;: EITHER&#xa;    {&quot;kind&quot;:&quot;existing&quot;, &quot;category_id&quot;: string} OR&#xa;    {&quot;kind&quot;:&quot;new&quot;, &quot;proposed_name&quot;: string(&lt;=4 слова), &quot;description&quot;: string(20..300),&#xa;     &quot;keywords&quot;: [string, ...] (3..8 элементов), &quot;parent_hint&quot;: string|null, &quot;duplicates_of&quot;: [string, ...]},&#xa;  &quot;qa_consistency&quot;: &quot;ok&quot; | &quot;mismatch&quot;,&#xa;  &quot;final_confidence&quot;: int 1..10&#xa;}&#xa;&#xa;&#xa;Жёсткие правила вывода:&#xa;- Верни ОДИН чистый JSON-объект. Без преамбулы, без комментариев, без ```json.&#xa;- Используй только `category_id` из &lt;EXISTING_CATEGORIES&gt;.&#xa;- Не используй спецсимволы в названиях. Русский деловой стиль. Избегай ПДн.&#xa;&quot;&quot;&quot;&#xa;&#xa;&#xa;    return {&quot;system&quot;: system, &quot;user&quot;: user}&#xa;&#xa;&#xa;# =====================&#xa;# ������ Парсинг JSON без native structured output&#xa;# =====================&#xa;&#xa;&#xa;def extract_json(text: str) -&gt; Dict[str, Any]:&#xa;    if text is None:&#xa;        raise ValueError(&quot;Пустой ответ модели&quot;)&#xa;    fence = re.search(r&quot;```(?:json)?\s*([\s\S]*?)\s*```&quot;, text)&#xa;    if fence:&#xa;        candidate = fence.group(1)&#xa;        try:&#xa;            return json.loads(candidate)&#xa;        except Exception:&#xa;            pass&#xa;    idx = text.find(&quot;{&quot;)&#xa;    last = text.rfind(&quot;}&quot;)&#xa;    while idx != -1 and last != -1 and last &gt;= idx:&#xa;        chunk = text[idx:last+1]&#xa;        try:&#xa;            return json.loads(chunk)&#xa;        except Exception:&#xa;            last = text.rfind(&quot;}&quot;, idx, last)&#xa;    raise ValueError(&quot;Не удалось извлечь корректный JSON из ответа модели&quot;)&#xa;&#xa;&#xa;# =====================&#xa;# ������ Утилиты&#xa;# =====================&#xa;&#xa;&#xa;def new_category_id(existing_ids: List[str]) -&gt; str:&#xa;    base = 1&#xa;    nums = []&#xa;    for cid in existing_ids:&#xa;        if cid.startswith(&quot;C&quot;):&#xa;            try:&#xa;                nums.append(int(cid[1:]))&#xa;            except Exception:&#xa;                pass&#xa;    if nums:&#xa;        base = max(nums) + 1&#xa;    else:&#xa;        base = len(existing_ids) + 1&#xa;    return f&quot;C{base:04d}&quot;&#xa;&#xa;&#xa;def write_by_letter(ws, row_idx: int, letter: str, value: Any):&#xa;    col_idx = column_index_from_string(letter)&#xa;    ws.cell(row=row_idx, column=col_idx, value=value)&#xa;&#xa;&#xa;def read_by_letter(ws, row_idx: int, letter: str):&#xa;    col_idx = column_index_from_string(letter)&#xa;    return ws.cell(row=row_idx, column=col_idx).value&#xa;&#xa;&#xa;# =====================&#xa;# ▶️ Основной цикл&#xa;# =====================&#xa;&#xa;&#xa;def run_classification():&#xa;    if not os.path.exists(EXCEL_PATH):&#xa;        raise FileNotFoundError(f&quot;Excel не найден: {EXCEL_PATH}&quot;)&#xa;&#xa;&#xa;    wb = load_workbook(EXCEL_PATH)&#xa;    ws = wb[SHEET_NAME] if isinstance(SHEET_NAME, str) else wb.worksheets[SHEET_NAME]&#xa;&#xa;&#xa;    registry = CategoryRegistry(REGISTRY_JSON)&#xa;    processed = 0&#xa;&#xa;&#xa;    def categories_for_prompt():&#xa;        all_cats = registry.all()&#xa;        if CATEGORIES_IN_PROMPT_STRATEGY == &quot;recent_n&quot; and len(all_cats) &gt; RECENT_N:&#xa;            cats = all_cats[-RECENT_N:]&#xa;        else:&#xa;            cats = all_cats&#xa;        return [vars(c) for c in cats]&#xa;&#xa;&#xa;    # Идём построчно по листу&#xa;    for excel_row in tqdm(range(START_ROW, ws.max_row + 1)):&#xa;        # Пропуск, если уже есть результат&#xa;        existing_val = read_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;category_id&quot;]) if OUT_COLS_LETTERS.get(&quot;category_id&quot;) else None&#xa;        if existing_val not in (None, &quot;&quot;):&#xa;            continue&#xa;&#xa;&#xa;        request = read_by_letter(ws, excel_row, IN_COLS_LETTERS[&quot;request&quot;]) if IN_COLS_LETTERS.get(&quot;request&quot;) else None&#xa;        response = read_by_letter(ws, excel_row, IN_COLS_LETTERS[&quot;response&quot;]) if IN_COLS_LETTERS.get(&quot;response&quot;) else None&#xa;&#xa;&#xa;        req_s = (str(request).strip() if request is not None else &quot;&quot;)&#xa;        res_s = (str(response).strip() if response is not None else &quot;&quot;)&#xa;        if not req_s and not res_s:&#xa;            # пустая строка — пропускаем&#xa;            continue&#xa;&#xa;&#xa;        case_text = (f&quot;Запрос: {req_s}\n&quot; + (f&quot;Ответ поддержки: {res_s}&quot; if res_s else &quot;&quot;)).strip()&#xa;&#xa;&#xa;        prompts = build_prompt(case_text, categories_for_prompt())&#xa;&#xa;&#xa;        try:&#xa;            raw = call_llm(system=prompts[&quot;system&quot;], prompt=prompts[&quot;user&quot;], temperature=0.2, max_tokens=1500)&#xa;        except NotImplementedError as e:&#xa;            raise e&#xa;        except Exception as e:&#xa;            raise RuntimeError(f&quot;Ошибка вызова LLM для строки Excel {excel_row}: {e}&quot;)&#xa;&#xa;&#xa;        # Парсинг + валидация&#xa;        try:&#xa;            data = extract_json(raw)&#xa;            job = TicketClassification(**data)&#xa;        except (ValueError, ValidationError) as e:&#xa;            raise RuntimeError(f&quot;Невалидный JSON для строки Excel {excel_row}: {e}\nОтвет модели: {str(raw)[:500]}&quot;)&#xa;&#xa;&#xa;        # Применение решения&#xa;        if isinstance(job.decision, AssignExisting):&#xa;            cid = job.decision.category_id&#xa;            cat = registry.get_by_id(cid)&#xa;            if cat is None:&#xa;                proposed_name = (job.proposed_labels[0].name if job.proposed_labels else &quot;Новая категория&quot;)&#xa;                cid = new_category_id(list(registry.categories.keys()))&#xa;                cat = Category(&#xa;                    id=cid,&#xa;                    name=proposed_name,&#xa;                    description=&quot;Категория создана из-за неизвестного ID, возвращённого моделью.&quot;,&#xa;                    keywords=[&quot;авто&quot;],&#xa;                    created_at=pd.Timestamp.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;),&#xa;                )&#xa;                registry.upsert(cat)&#xa;            is_new = False&#xa;        else:  # CreateNew&#xa;            cid = new_category_id(list(registry.categories.keys()))&#xa;            cat = Category(&#xa;                id=cid,&#xa;                name=job.decision.proposed_name,&#xa;                description=job.decision.description,&#xa;                keywords=job.decision.keywords,&#xa;                created_at=pd.Timestamp.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;),&#xa;            )&#xa;            registry.upsert(cat)&#xa;            is_new = True&#xa;&#xa;&#xa;        # Запись в Excel по буквам столбцов&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;category_id&quot;], cid)&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;category_name&quot;], cat.name)&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;is_new_category&quot;], bool(is_new))&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;confidence_1_10&quot;], int(job.final_confidence))&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;qa_consistency&quot;], job.qa_consistency)&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;json&quot;], json.dumps(data, ensure_ascii=False))&#xa;&#xa;&#xa;        processed += 1&#xa;        if processed % SAVE_EVERY == 0:&#xa;            wb.save(EXCEL_PATH)&#xa;&#xa;&#xa;    # Финальное сохранение&#xa;    wb.save(EXCEL_PATH)&#xa;&#xa;&#xa;# %%&#xa;if __name__ == &quot;__main__&quot;:&#xa;    print(&quot;Starting classification…&quot;)&#xa;    run_classification()&#xa;    print(&quot;Готово. Входные и выходные поля адресуются по буквам столбцов; результаты записаны в исходный Excel.&quot;)" link="# %% [markdown]&#xa;# # Классификация обращений: без эмбеддингов, SGR через промпт, **вход/выход по буквам столбцов**&#xa;# &#xa;# Скрипт читает Excel, берёт входные поля **по буквам столбцов** (например, `B` для request, `C` для response),&#xa;# вызывает вашу LLM по схеме SGR (через промпт без native structured output) и записывает результат **в те же строки** листа,&#xa;# адресуя выходные столбцы также **по буквам** (`G`, `H`, ...).&#xa;# &#xa;# Требования: `openpyxl&gt;=3.1`, `pydantic&gt;=2`, `tqdm`. (pandas используется только для timestamp; при желании можно заменить на `datetime`).&#xa;&#xa;&#xa;# %%&#xa;import os&#xa;import json&#xa;import re&#xa;from dataclasses import dataclass&#xa;from typing import List, Optional, Dict, Any, Literal, Union&#xa;&#xa;&#xa;import pandas as pd&#xa;from pydantic import BaseModel, Field, ValidationError, constr, conint&#xa;from typing_extensions import Annotated&#xa;from annotated_types import MinLen, MaxLen&#xa;from tqdm import tqdm&#xa;&#xa;&#xa;from openpyxl import load_workbook&#xa;from openpyxl.utils import column_index_from_string&#xa;&#xa;&#xa;# =====================&#xa;# ������ НАСТРОЙКИ&#xa;# =====================&#xa;EXCEL_PATH = &quot;./tickets.xlsx&quot;     # путь к Excel с обращениями&#xa;SHEET_NAME = 0                     # имя листа (str) или индекс (int)&#xa;START_ROW = 2                      # с какой строки начинаются данные (1 — первая строка Excel)&#xa;&#xa;&#xa;# ВХОДНЫЕ ПОЛЯ: укажите **буквы** столбцов&#xa;IN_COLS_LETTERS = {&#xa;    &quot;request&quot;: &quot;B&quot;,   # колонка с текстом запроса&#xa;    &quot;response&quot;: &quot;C&quot;,  # колонка с ответом поддержки (если есть)&#xa;    # при необходимости можно добавить &quot;id&quot;: &quot;A&quot; и использовать его в логике пропуска/аудита&#xa;}&#xa;&#xa;&#xa;# ВЫХОДНЫЕ ПОЛЯ: укажите **буквы** столбцов&#xa;OUT_COLS_LETTERS = {&#xa;    &quot;category_id&quot;: &quot;G&quot;,&#xa;    &quot;category_name&quot;: &quot;H&quot;,&#xa;    &quot;is_new_category&quot;: &quot;I&quot;,&#xa;    &quot;confidence_1_10&quot;: &quot;J&quot;,&#xa;    &quot;qa_consistency&quot;: &quot;K&quot;,&#xa;    &quot;json&quot;: &quot;L&quot;,  # для аудита: полный JSON-ответ модели&#xa;}&#xa;&#xa;&#xa;SAVE_EVERY = 10                   # как часто сохранять файл Excel&#xa;&#xa;&#xa;# Список категорий для промпта берём из локального реестра; при желании подставьте свой источник&#xa;CATEGORIES_IN_PROMPT_STRATEGY: Literal[&quot;all&quot;, &quot;recent_n&quot;] = &quot;all&quot;&#xa;RECENT_N = 300&#xa;&#xa;&#xa;REGISTRY_JSON = &quot;./category_registry.json&quot;   # реестр категорий (наращивается между итерациями)&#xa;&#xa;&#xa;# =====================&#xa;# ������ Схема (валидация ответа модели в Python)&#xa;# =====================&#xa;class ProposedLabel(BaseModel):&#xa;    name: constr(strip_whitespace=True, min_length=2, max_length=50)&#xa;    rationale: constr(strip_whitespace=True, min_length=5, max_length=300)&#xa;    confidence: conint(ge=0, le=100)&#xa;&#xa;&#xa;class AssignExisting(BaseModel):&#xa;    kind: Literal[&quot;existing&quot;]&#xa;    category_id: constr(strip_whitespace=True, min_length=1, max_length=40)&#xa;&#xa;&#xa;class CreateNew(BaseModel):&#xa;    kind: Literal[&quot;new&quot;]&#xa;    proposed_name: constr(strip_whitespace=True, min_length=3, max_length=40)&#xa;    description: constr(strip_whitespace=True, min_length=20, max_length=300)&#xa;    keywords: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=30)], MinLen(3), MaxLen(8)]&#xa;    parent_hint: Optional[constr(strip_whitespace=True, max_length=40)] = None&#xa;    duplicates_of: List[str] = Field(default_factory=list)&#xa;&#xa;&#xa;class TicketClassification(BaseModel):&#xa;    normalized_problem: constr(strip_whitespace=True, min_length=10, max_length=300)&#xa;    signals_detected: Annotated[List[constr(strip_whitespace=True, min_length=2, max_length=80)], MinLen(2), MaxLen(5)]&#xa;    proposed_labels: Annotated[List[ProposedLabel], MinLen(1), MaxLen(3)]&#xa;    decision: Union[AssignExisting, CreateNew]&#xa;    qa_consistency: Literal[&quot;ok&quot;, &quot;mismatch&quot;]&#xa;    final_confidence: conint(ge=1, le=10)&#xa;&#xa;&#xa;# =====================&#xa;# ������️ Реестр категорий (без эмбеддингов)&#xa;# =====================&#xa;@dataclass&#xa;class Category:&#xa;    id: str&#xa;    name: str&#xa;    description: str&#xa;    keywords: List[str]&#xa;    created_at: str&#xa;    created_by: str = &quot;llm&quot;&#xa;&#xa;&#xa;class CategoryRegistry:&#xa;    def __init__(self, path: str):&#xa;        self.path = path&#xa;        self.categories: Dict[str, Category] = {}&#xa;        if os.path.exists(path):&#xa;            self._load()&#xa;        else:&#xa;            self._save()&#xa;&#xa;&#xa;    def _load(self):&#xa;        with open(self.path, &quot;r&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            data = json.load(f)&#xa;        for c in data.get(&quot;categories&quot;, []):&#xa;            self.categories[c[&quot;id&quot;]] = Category(**c)&#xa;&#xa;&#xa;    def _save(self):&#xa;        data = {&#xa;            &quot;schema_version&quot;: 1,&#xa;            &quot;categories&quot;: [vars(c) for c in self.categories.values()],&#xa;        }&#xa;        with open(self.path, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:&#xa;            json.dump(data, f, ensure_ascii=False, indent=2)&#xa;&#xa;&#xa;    def all(self) -&gt; List[Category]:&#xa;        return [self.categories[k] for k in sorted(self.categories.keys())]&#xa;&#xa;&#xa;    def upsert(self, cat: Category):&#xa;        self.categories[cat.id] = cat&#xa;        self._save()&#xa;&#xa;&#xa;    def get_by_id(self, cid: str) -&gt; Optional[Category]:&#xa;        return self.categories.get(cid)&#xa;&#xa;&#xa;    def get_by_name_lower(self, name_lower: str) -&gt; Optional[Category]:&#xa;        for c in self.categories.values():&#xa;            if c.name.lower() == name_lower:&#xa;                return c&#xa;        return None&#xa;&#xa;&#xa;# =====================&#xa;# ������ Заглушка вызова вашей модели&#xa;# =====================&#xa;&#xa;&#xa;def call_llm(system: str, prompt: str, **kwargs) -&gt; str:&#xa;    &quot;&quot;&quot;&#xa;    Реализуйте вызов своей LLM здесь. Функция должна вернуть СТРОКУ с JSON-объектом,&#xa;    строго соответствующим схеме, указанной в тексте промпта (см. build_prompt()).&#xa;    &quot;&quot;&quot;&#xa;    raise NotImplementedError(&quot;Подставьте вызов вашей модели в call_llm()&quot;)&#xa;&#xa;&#xa;# =====================&#xa;# ������ Построение промпта (SGR + строгая JSON-схема в тексте)&#xa;# =====================&#xa;&#xa;&#xa;def build_prompt(case_text: str, categories_payload: List[Dict[str, Any]]) -&gt; Dict[str, str]:&#xa;    system = (&#xa;        &quot;Ты — классификатор обращений поддержки в банковском кредитном процессе. &quot;&#xa;        &quot;Отвечай строго одним JSON-объектом, без пояснений и без форматирования в код-блоках. &quot;&#xa;        &quot;Не раскрывай персональные данные, не цитируй длинные тексты пользователя.&quot;&#xa;    )&#xa;&#xa;&#xa;    cats_json = json.dumps([&#xa;        {&#xa;            &quot;id&quot;: c.get(&quot;id&quot;),&#xa;            &quot;name&quot;: c.get(&quot;name&quot;),&#xa;            &quot;description&quot;: c.get(&quot;description&quot;),&#xa;            &quot;keywords&quot;: c.get(&quot;keywords&quot;, [])[:8],&#xa;        }&#xa;        for c in categories_payload&#xa;    ], ensure_ascii=False)&#xa;&#xa;&#xa;    user = f&quot;&quot;&quot;&#xa;Задача: Классифицировать обращение бизнес-пользователя.&#xa;&#xa;&#xa;&lt;CASE&gt;&#xa;{case_text}&#xa;&lt;/CASE&gt;&#xa;&#xa;&#xa;&lt;EXISTING_CATEGORIES&gt;&#xa;{cats_json}&#xa;&lt;/EXISTING_CATEGORIES&gt;&#xa;&#xa;&#xa;Требования (SGR):&#xa;1) #Cascade — кратко нормализуй проблему (1–2 предложения).&#xa;2) #Cycle — выдели 2–5 ключевых сигналов.&#xa;3) Предложи 1–3 метки (name + rationale + confidence 0..100).&#xa;4) #Routing — если одна из **существующих** категорий подходит, выбери её по `category_id`.&#xa;   Иначе создай новую категорию с кратким деловым названием (до 4 слов),&#xa;   чётким описанием (1–2 предложения) и 3–8 ключевыми словами.&#xa;5) Проведи QA-проверку согласованности запроса и ответа: `qa_consistency` = &quot;ok&quot; или &quot;mismatch&quot;.&#xa;6) Поставь итоговую уверенность по 10-балльной шкале (`final_confidence`).&#xa;&#xa;&#xa;Строгая схема JSON (верни ТОЛЬКО этот объект, без пояснений):&#xa;{&#xa;  &quot;normalized_problem&quot;: string (10..300),&#xa;  &quot;signals_detected&quot;: [string, ...] (2..5 элементов),&#xa;  &quot;proposed_labels&quot;: [&#xa;    {&quot;name&quot;: string(2..50), &quot;rationale&quot;: string(5..300), &quot;confidence&quot;: int 0..100},&#xa;    ... 1..3 элемента&#xa;  ],&#xa;  &quot;decision&quot;: EITHER&#xa;    {&quot;kind&quot;:&quot;existing&quot;, &quot;category_id&quot;: string} OR&#xa;    {&quot;kind&quot;:&quot;new&quot;, &quot;proposed_name&quot;: string(&lt;=4 слова), &quot;description&quot;: string(20..300),&#xa;     &quot;keywords&quot;: [string, ...] (3..8 элементов), &quot;parent_hint&quot;: string|null, &quot;duplicates_of&quot;: [string, ...]},&#xa;  &quot;qa_consistency&quot;: &quot;ok&quot; | &quot;mismatch&quot;,&#xa;  &quot;final_confidence&quot;: int 1..10&#xa;}&#xa;&#xa;&#xa;Жёсткие правила вывода:&#xa;- Верни ОДИН чистый JSON-объект. Без преамбулы, без комментариев, без ```json.&#xa;- Используй только `category_id` из &lt;EXISTING_CATEGORIES&gt;.&#xa;- Не используй спецсимволы в названиях. Русский деловой стиль. Избегай ПДн.&#xa;&quot;&quot;&quot;&#xa;&#xa;&#xa;    return {&quot;system&quot;: system, &quot;user&quot;: user}&#xa;&#xa;&#xa;# =====================&#xa;# ������ Парсинг JSON без native structured output&#xa;# =====================&#xa;&#xa;&#xa;def extract_json(text: str) -&gt; Dict[str, Any]:&#xa;    if text is None:&#xa;        raise ValueError(&quot;Пустой ответ модели&quot;)&#xa;    fence = re.search(r&quot;```(?:json)?\s*([\s\S]*?)\s*```&quot;, text)&#xa;    if fence:&#xa;        candidate = fence.group(1)&#xa;        try:&#xa;            return json.loads(candidate)&#xa;        except Exception:&#xa;            pass&#xa;    idx = text.find(&quot;{&quot;)&#xa;    last = text.rfind(&quot;}&quot;)&#xa;    while idx != -1 and last != -1 and last &gt;= idx:&#xa;        chunk = text[idx:last+1]&#xa;        try:&#xa;            return json.loads(chunk)&#xa;        except Exception:&#xa;            last = text.rfind(&quot;}&quot;, idx, last)&#xa;    raise ValueError(&quot;Не удалось извлечь корректный JSON из ответа модели&quot;)&#xa;&#xa;&#xa;# =====================&#xa;# ������ Утилиты&#xa;# =====================&#xa;&#xa;&#xa;def new_category_id(existing_ids: List[str]) -&gt; str:&#xa;    base = 1&#xa;    nums = []&#xa;    for cid in existing_ids:&#xa;        if cid.startswith(&quot;C&quot;):&#xa;            try:&#xa;                nums.append(int(cid[1:]))&#xa;            except Exception:&#xa;                pass&#xa;    if nums:&#xa;        base = max(nums) + 1&#xa;    else:&#xa;        base = len(existing_ids) + 1&#xa;    return f&quot;C{base:04d}&quot;&#xa;&#xa;&#xa;def write_by_letter(ws, row_idx: int, letter: str, value: Any):&#xa;    col_idx = column_index_from_string(letter)&#xa;    ws.cell(row=row_idx, column=col_idx, value=value)&#xa;&#xa;&#xa;def read_by_letter(ws, row_idx: int, letter: str):&#xa;    col_idx = column_index_from_string(letter)&#xa;    return ws.cell(row=row_idx, column=col_idx).value&#xa;&#xa;&#xa;# =====================&#xa;# ▶️ Основной цикл&#xa;# =====================&#xa;&#xa;&#xa;def run_classification():&#xa;    if not os.path.exists(EXCEL_PATH):&#xa;        raise FileNotFoundError(f&quot;Excel не найден: {EXCEL_PATH}&quot;)&#xa;&#xa;&#xa;    wb = load_workbook(EXCEL_PATH)&#xa;    ws = wb[SHEET_NAME] if isinstance(SHEET_NAME, str) else wb.worksheets[SHEET_NAME]&#xa;&#xa;&#xa;    registry = CategoryRegistry(REGISTRY_JSON)&#xa;    processed = 0&#xa;&#xa;&#xa;    def categories_for_prompt():&#xa;        all_cats = registry.all()&#xa;        if CATEGORIES_IN_PROMPT_STRATEGY == &quot;recent_n&quot; and len(all_cats) &gt; RECENT_N:&#xa;            cats = all_cats[-RECENT_N:]&#xa;        else:&#xa;            cats = all_cats&#xa;        return [vars(c) for c in cats]&#xa;&#xa;&#xa;    # Идём построчно по листу&#xa;    for excel_row in tqdm(range(START_ROW, ws.max_row + 1)):&#xa;        # Пропуск, если уже есть результат&#xa;        existing_val = read_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;category_id&quot;]) if OUT_COLS_LETTERS.get(&quot;category_id&quot;) else None&#xa;        if existing_val not in (None, &quot;&quot;):&#xa;            continue&#xa;&#xa;&#xa;        request = read_by_letter(ws, excel_row, IN_COLS_LETTERS[&quot;request&quot;]) if IN_COLS_LETTERS.get(&quot;request&quot;) else None&#xa;        response = read_by_letter(ws, excel_row, IN_COLS_LETTERS[&quot;response&quot;]) if IN_COLS_LETTERS.get(&quot;response&quot;) else None&#xa;&#xa;&#xa;        req_s = (str(request).strip() if request is not None else &quot;&quot;)&#xa;        res_s = (str(response).strip() if response is not None else &quot;&quot;)&#xa;        if not req_s and not res_s:&#xa;            # пустая строка — пропускаем&#xa;            continue&#xa;&#xa;&#xa;        case_text = (f&quot;Запрос: {req_s}\n&quot; + (f&quot;Ответ поддержки: {res_s}&quot; if res_s else &quot;&quot;)).strip()&#xa;&#xa;&#xa;        prompts = build_prompt(case_text, categories_for_prompt())&#xa;&#xa;&#xa;        try:&#xa;            raw = call_llm(system=prompts[&quot;system&quot;], prompt=prompts[&quot;user&quot;], temperature=0.2, max_tokens=1500)&#xa;        except NotImplementedError as e:&#xa;            raise e&#xa;        except Exception as e:&#xa;            raise RuntimeError(f&quot;Ошибка вызова LLM для строки Excel {excel_row}: {e}&quot;)&#xa;&#xa;&#xa;        # Парсинг + валидация&#xa;        try:&#xa;            data = extract_json(raw)&#xa;            job = TicketClassification(**data)&#xa;        except (ValueError, ValidationError) as e:&#xa;            raise RuntimeError(f&quot;Невалидный JSON для строки Excel {excel_row}: {e}\nОтвет модели: {str(raw)[:500]}&quot;)&#xa;&#xa;&#xa;        # Применение решения&#xa;        if isinstance(job.decision, AssignExisting):&#xa;            cid = job.decision.category_id&#xa;            cat = registry.get_by_id(cid)&#xa;            if cat is None:&#xa;                proposed_name = (job.proposed_labels[0].name if job.proposed_labels else &quot;Новая категория&quot;)&#xa;                cid = new_category_id(list(registry.categories.keys()))&#xa;                cat = Category(&#xa;                    id=cid,&#xa;                    name=proposed_name,&#xa;                    description=&quot;Категория создана из-за неизвестного ID, возвращённого моделью.&quot;,&#xa;                    keywords=[&quot;авто&quot;],&#xa;                    created_at=pd.Timestamp.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;),&#xa;                )&#xa;                registry.upsert(cat)&#xa;            is_new = False&#xa;        else:  # CreateNew&#xa;            cid = new_category_id(list(registry.categories.keys()))&#xa;            cat = Category(&#xa;                id=cid,&#xa;                name=job.decision.proposed_name,&#xa;                description=job.decision.description,&#xa;                keywords=job.decision.keywords,&#xa;                created_at=pd.Timestamp.utcnow().strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;),&#xa;            )&#xa;            registry.upsert(cat)&#xa;            is_new = True&#xa;&#xa;&#xa;        # Запись в Excel по буквам столбцов&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;category_id&quot;], cid)&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;category_name&quot;], cat.name)&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;is_new_category&quot;], bool(is_new))&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;confidence_1_10&quot;], int(job.final_confidence))&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;qa_consistency&quot;], job.qa_consistency)&#xa;        write_by_letter(ws, excel_row, OUT_COLS_LETTERS[&quot;json&quot;], json.dumps(data, ensure_ascii=False))&#xa;&#xa;&#xa;        processed += 1&#xa;        if processed % SAVE_EVERY == 0:&#xa;            wb.save(EXCEL_PATH)&#xa;&#xa;&#xa;    # Финальное сохранение&#xa;    wb.save(EXCEL_PATH)&#xa;&#xa;&#xa;# %%&#xa;if __name__ == &quot;__main__&quot;:&#xa;    print(&quot;Starting classification…&quot;)&#xa;    run_classification()&#xa;    print(&quot;Готово. Входные и выходные поля адресуются по буквам столбцов; результаты записаны в исходный Excel.&quot;)" id="ntieQa3HnKI0EJcjRLTN-4">
          <mxCell style="text;whiteSpace=wrap;" parent="1" vertex="1">
            <mxGeometry x="890" y="90" width="560" height="6460" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="ovTMdcQGhaFLwAi31NX0-1" value="&lt;div style=&quot;color: #f8f8f2;background-color: #272822;font-family: Consolas, &#39;Courier New&#39;, monospace;font-weight: normal;font-size: 14px;line-height: 19px;white-space: pre;&quot;&gt;&lt;div&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt;original_prompt&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #f92672;&quot;&gt;=&lt;/span&gt;&lt;span style=&quot;color: #f8f8f2;&quot;&gt; &lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Ты — кредитный аналитик и контрактолог. Твоя задача — из юридического текста ковенанта извлечь норму-ограничение и выдать СТРОГО один JSON-объект.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Выполни подробные рассуждения по каждому полю и включи их в поле &quot;evidence&quot; в ответе. В ответе — JSON с результатом и обоснованиями.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Вход:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{name}&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{text}&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;DEBUG=on&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Требуемый JSON-формат:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &quot;short_name&quot;: string, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// краткое имя показателя/ограничения&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &quot;sign&quot;: &quot;&amp;lt;= | &amp;gt;= | &amp;lt; | &amp;gt; | == | !=&quot; &amp;nbsp;// знак допуска ИЛИ &quot;&quot; если числового порога нет&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &quot;value&quot;: string, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // значение порога (как в тексте, с запятой) ИЛИ &quot;&quot; если нет&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &quot;unit_or_currency&quot;: string, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// единица/валюта/контекст процента (например: &quot;%&quot;, &quot;% ВБ&quot;, &quot;% чистых активов&quot;, &quot;дней&quot;, &quot;рублей&quot;) ИЛИ &quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &quot;evidence&quot;: &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &quot;short_name&quot;: string, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// короткая цитата/фраза, обосновывающая выбор названия&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &quot;sign&quot;: string, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;// цитата, указывающая на направление сравнения&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &quot;value&quot;: string, &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // фраза с числом/уровнем&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &quot;unit_or_currency&quot;: string &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // фрагмент с единицей (если есть)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Правила извлечения (важно):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;1) short_name&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Нормализуй в лаконичное, узнаваемое: &quot;Долг / EBITDA&quot;, &quot;Чистый долг / EBITDA&quot;, &quot;Долг / Выручка&quot;, &quot;EBITDA/%&quot;, &quot;ЗС/СС&quot;, &quot;К-т ликвидности&quot;, &quot;Оборачиваемость ДЗ&quot;, &quot;Оборачиваемость запасов&quot;, &quot;Рентабельность деятельности&quot;, &quot;Ограничение объема предъявленных исков&quot;, &quot;Закрепление выручки&quot;, &quot;Закрепление кредитовых оборотов&quot;, &quot;Ограничение финансовых вложений&quot;, &quot;Ограничение на выплату дивидендов / распределение чистой прибыли&quot;, &quot;Запрет на привлечение заимствований&quot;, &quot;Ограничение на отчуждение активов&quot;, &quot;Ограничение на обременение материальных активов&quot;, &quot;Субординация займов&quot;.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Если ограничение относится к Группе — добавь суффикс &quot;по ГК&quot;.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Исправляй mojibake (например, &quot;ДÐ¾лг&quot; → &quot;Долг&quot;).&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;2) value&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Бери порог как в тексте (сохраняй формат и запятую: &quot;3,5&quot;).&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Если пороги по графику/ступеням (разные даты) — сведи в строку диапазона через дефис по возрастанию, например &quot;1,1-1,6&quot;.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Если порога нет (чисто качественный запрет/обязанность) — заполни &quot;&quot;.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;3) sign — ДОЛЖЕН отражать допустимое состояние (когда нарушения нет).&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;Базовые преобразования (с учётом твоих эталонов):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Формулировки про превышение верхней границы:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;• &quot;более X (включительно)&quot;, &quot;не более X&quot;, &quot;≤ X&quot; &amp;nbsp;⇒ sign = &quot;&amp;lt;=&quot;, value = X&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;• &quot;более X&quot; / &quot;свыше X&quot; / &quot;превышающую X&quot; (без &quot;включительно&quot;) ⇒ sign = &quot;&amp;lt;&quot;, value = X&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Формулировки про снижение ниже нижней границы:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;• &quot;ниже уровня X (включительно)&quot;, &quot;не менее X (контрагент обязан обеспечить)&quot; ⇒ sign = &quot;&amp;gt;=&quot;, value = X&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;• &quot;ниже уровня X&quot; (без &quot;включительно&quot;) ⇒ sign = &quot;&amp;gt;&quot;, value = X&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Специальные кейсы проекта (следуй именно им, как в эталонных примерах):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;• &quot;положительное значение&quot; ⇒ sign = &quot;&amp;gt;&quot;, value = &quot;0&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;• &quot;Закрепление выручки&quot; / &quot;Закрепление кредитовых оборотов&quot; с &quot;не менее X&quot; ⇒ sign = &quot;&amp;gt;&quot;, value = X&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;• Иски/заявления &quot;превышающую X рублей/процентов ...&quot; ⇒ sign = &quot;&amp;lt;&quot;, value = X&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Если формулировка одновременно содержит альтернативу (например, &quot;более X (включительно) ИЛИ отрицательное значение&quot;):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;• Выбирай основной ковенантный уровень ключевого коэффициента (X), а вторичные условия игнорируй.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Если числового порога нет — sign = &quot;&quot;.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;4) unit_or_currency — нормализуй:&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- &quot;%&quot;, &quot;процентов&quot; ⇒ &quot;%&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- &quot;процентов от показателя «Валюта баланса»&quot; ⇒ &quot;% ВБ&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- &quot;процентов от показателя «Чистые активы»&quot; ⇒ &quot;% чистых активов&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- &quot;дней&quot;, &quot;день&quot; ⇒ &quot;дней&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- &quot;рубль/рублей/руб.&quot; ⇒ &quot;рублей&quot;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Если нет единицы (чистый коэффициент) — &quot;&quot;.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;5) Строгость вывода&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Не добавляй лишних полей. Только один JSON.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;nbsp; &amp;nbsp;- Если что-то неоднозначно — рассуждай внутренне и выбери вариант, который наилучше соответствует формулировке и приведённым ниже примерам.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;--------------------------------&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;КЕЙС-ПРИМЕРЫ (обучающие пары)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;(Следуй точно формату вывода, без комментариев.)&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 1 (Долг/EBITDA по ГК):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;name&amp;gt;Соблюдение показателя долговой нагрузки&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…соотношения показателей Долг/EBITDA… более 3,5 (…)(включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Долг / EBITDA по ГК&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;3,5&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 2 (Долг/EBITDA по Заёмщику):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;name&amp;gt;—&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Долг/EBITDA… более 4,5 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Долг / EBITDA&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;4,5&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 3 (Долг/EBITDA):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;name&amp;gt;—&amp;lt;/name&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Долг/EBITDA… более 4 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Долг / EBITDA&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;4&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 4 (Долг/EBITDA по ГК):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Долг/EBITDA… более 4 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Долг / EBITDA по ГК&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;4&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 5 (Долг/EBITDA):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Долг/EBITDA… более 2,5 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Долг / EBITDA&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;2,5&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 6 (Чистый долг/EBITDA):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Чистый долг/EBITDA… более 5 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Чистый долг / EBITDA&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;5&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 7 (Чистый долг/EBITDA по ГК):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Чистый долг/EBITDA… более 5 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Чистый долг / EBITDA по ГК&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;5&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 8 (Долг/Выручка):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Долг/Выручка… более 0,4 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Долг / Выручка&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;0,4&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 9 (Долг/Выручка):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Долг/Выручка… более 0,25 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Долг / Выручка&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;0,25&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 10 (Иски, абсолют):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…иска(ов)… на совокупную сумму, превышающую 10 000 000 рублей…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Ограничение объема предъявленных исков&quot;,&quot;sign&quot;:&quot;&amp;lt;&quot;,&quot;value&quot;:&quot;10 000 000&quot;,&quot;unit_or_currency&quot;:&quot;рублей&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 11 (Иски, % от ВБ):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…превышающую 10 процентов от показателя «Валюта баланса»…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Ограничение объема предъявленных исков&quot;,&quot;sign&quot;:&quot;&amp;lt;&quot;,&quot;value&quot;:&quot;10&quot;,&quot;unit_or_currency&quot;:&quot;% ВБ&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 12 (Иски, % от ЧА):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…превышающую 5 процентов от показателя «Чистые активы»…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Ограничение объема предъявленных исков&quot;,&quot;sign&quot;:&quot;&amp;lt;&quot;,&quot;value&quot;:&quot;5&quot;,&quot;unit_or_currency&quot;:&quot;% чистых активов&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 13 (EBITDA/%, нижняя граница по ГК):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…EBITDA / процентные расходы… ниже уровня — 1,5 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;EBITDA/% по ГК&quot;,&quot;sign&quot;:&quot;&amp;gt;=&quot;,&quot;value&quot;:&quot;1,5&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 14 (EBITDA/%, ступени):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…ниже уровня: 1,1 (включительно); с 30.06.2025 — 1,3; с 30.04.2026 — 1,5; с 30.09.2026 — 1,6…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;EBITDA/%&quot;,&quot;sign&quot;:&quot;&amp;gt;=&quot;,&quot;value&quot;:&quot;1,1-1,6&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 15 (Дивиденды — качественный запрет):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…выплата дивидендов без согласования с Банком…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Ограничение на выплату дивидендов / распределение чистой прибыли&quot;,&quot;sign&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 16 (Привлечение заимствований — верхняя граница):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…превышению Общего размера заимствований суммы свыше 3 000 000 000 рублей (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Запрет на привлечение заимствований&quot;,&quot;sign&quot;:&quot;&amp;gt;&quot;,&quot;value&quot;:&quot;3 000 000 000&quot;,&quot;unit_or_currency&quot;:&quot;рублей&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 17 (Финвложения — лимит по ГК):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…превышающего 160 000 000 рублей…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Ограничение финансовых вложений по ГК&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;160 000 000&quot;,&quot;unit_or_currency&quot;:&quot;рублей&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 18 (Финвложения — свыше X):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…до размера свыше 680 000 000 рублей…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Ограничение финансовых вложений&quot;,&quot;sign&quot;:&quot;&amp;lt;&quot;,&quot;value&quot;:&quot;680 000 000&quot;,&quot;unit_or_currency&quot;:&quot;рублей&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 19 (Финвложения — свыше 10 млн):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…свыше 10 000 000 рублей…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Ограничение финансовых вложений&quot;,&quot;sign&quot;:&quot;&amp;lt;&quot;,&quot;value&quot;:&quot;10 000 000&quot;,&quot;unit_or_currency&quot;:&quot;рублей&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 20 (Отчуждение активов — качественное):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…без согласования… отчуждение внеоборотных активов…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Ограничение на отчуждение активов&quot;,&quot;sign&quot;:&quot;&quot;,&quot;value&quot;:&quot;&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 21 (Рентабельность — положительное значение):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…несоблюдение положительного значения показателя Рентабельность деятельности…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Рентабельность деятельности&quot;,&quot;sign&quot;:&quot;&amp;gt;&quot;,&quot;value&quot;:&quot;0&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 22 (Доля собственного капитала — нижняя граница):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…ниже уровня — 0,2 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Доля собственного капитала&quot;,&quot;sign&quot;:&quot;&amp;gt;=&quot;,&quot;value&quot;:&quot;0,2&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 23 (Закрепление выручки — не менее X):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…ежеквартальной выручки… в общей сумме не менее 100 000 000 рублей…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Закрепление выручки&quot;,&quot;sign&quot;:&quot;&amp;gt;&quot;,&quot;value&quot;:&quot;100 000 000&quot;,&quot;unit_or_currency&quot;:&quot;рублей&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 24 (Закрепление кредитовых оборотов — не менее X):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…ежеквартальных кредитовых оборотов… не менее 250 000 000 рублей…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Закрепление кредитовых оборотов&quot;,&quot;sign&quot;:&quot;&amp;gt;&quot;,&quot;value&quot;:&quot;250 000 000&quot;,&quot;unit_or_currency&quot;:&quot;рублей&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 25 (ЗС/СС по ГК — верхняя граница):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…соотношение заемных и собственных средств… более 1,35 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;ЗС/СС по ГК&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;1,35&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 26 (Оборачиваемость ДЗ):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Оборачиваемость дебиторской задолженности (в днях)… более 35 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Оборачиваемость ДЗ&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;35&quot;,&quot;unit_or_currency&quot;:&quot;дней&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 27 (Оборачиваемость запасов):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…Оборачиваемость запасов (в днях)… более 160 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Оборачиваемость запасов&quot;,&quot;sign&quot;:&quot;&amp;lt;=&quot;,&quot;value&quot;:&quot;160&quot;,&quot;unit_or_currency&quot;:&quot;дней&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 28 (К-т ликвидности по ГК):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…показателя ликвидности… ниже уровня — 0,74 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;К-т ликвидности по ГК&quot;,&quot;sign&quot;:&quot;&amp;gt;=&quot;,&quot;value&quot;:&quot;0,74&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 29 (К-т ликвидности):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…показателя ликвидности… ниже уровня — 1,2 (включительно)…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;К-т ликвидности&quot;,&quot;sign&quot;:&quot;&amp;gt;=&quot;,&quot;value&quot;:&quot;1,2&quot;,&quot;unit_or_currency&quot;:&quot;&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Пример 30 (Просроченная ДЗ, доля):&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&amp;lt;text&amp;gt;…уровня просроченной свыше трех месяцев ДЗ… более 5 процентов от показателя «Дебиторская задолженность»…&amp;lt;/text&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;→&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;{{&lt;/span&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;short_name&quot;:&quot;Ограничение уровня просроченной ДЗ&quot;,&quot;sign&quot;:&quot;&amp;gt;&quot;,&quot;value&quot;:&quot;5&quot;,&quot;unit_or_currency&quot;:&quot;%&quot;&lt;/span&gt;&lt;span style=&quot;color: #ae81ff;&quot;&gt;}}&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;--------------------------------&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;Теперь обработай вход и верни только JSON.&lt;/span&gt;&lt;/div&gt;&lt;br&gt;&lt;div&gt;&lt;span style=&quot;color: #e6db74;&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" parent="1" vertex="1">
          <mxGeometry x="640" y="90" width="560" height="4280" as="geometry" />
        </mxCell>
        <UserObject label="Я помогу вам запустить юнит тесты в проекте AI Gateway. Сначала давайте посмотрим на структуру проекта и конфигурацию тестов.&#xa;&#xa;&#xa;&#xa;&#xa;[3 tools called]&#xa;&#xa;&#xa;Теперь давайте посмотрим на структуру тестов:&#xa;&#xa;&#xa;&#xa;&#xa;[2 tools called]&#xa;&#xa;&#xa;Отлично! Теперь я вижу структуру проекта. Для запуска юнит тестов в проекте AI Gateway используйте следующие команды:&#xa;&#xa;&#xa;## Запуск юнит тестов&#xa;&#xa;&#xa;### 1. Запуск всех тестов&#xa;```bash&#xa;poetry run pytest&#xa;```&#xa;&#xa;&#xa;### 2. Запуск только юнит тестов&#xa;```bash&#xa;poetry run pytest tests/unit/&#xa;```&#xa;&#xa;&#xa;### 3. Запуск с подробным выводом&#xa;```bash&#xa;poetry run pytest tests/unit/ -v&#xa;```&#xa;&#xa;&#xa;### 4. Запуск конкретного теста&#xa;```bash&#xa;poetry run pytest tests/unit/test_config.py&#xa;```&#xa;&#xa;&#xa;### 5. Запуск с покрытием кода&#xa;```bash&#xa;poetry run pytest tests/unit/ --cov=src/aigw_service&#xa;```&#xa;&#xa;&#xa;## Дополнительные опции&#xa;&#xa;&#xa;### Запуск тестов в параллельном режиме&#xa;```bash&#xa;poetry run pytest tests/unit/ -n auto&#xa;```&#xa;&#xa;&#xa;### Запуск только быстрых тестов (без интеграционных)&#xa;```bash&#xa;poetry run pytest tests/unit/ -m &quot;not slow&quot;&#xa;```&#xa;&#xa;&#xa;### Запуск с остановкой на первой ошибке&#xa;```bash&#xa;poetry run pytest tests/unit/ -x&#xa;```&#xa;&#xa;&#xa;## Конфигурация тестов&#xa;&#xa;&#xa;Согласно `pyproject.toml`, тесты настроены с:&#xa;- **Python path**: включает корневую директорию и `src`&#xa;- **Asyncio mode**: автоматический режим для асинхронных тестов&#xa;- **Опции**: `-s --verbose -W ignore::DeprecationWarning`&#xa;&#xa;&#xa;## Структура тестов&#xa;&#xa;&#xa;В проекте есть:&#xa;- **Юнит тесты** (`tests/unit/`) - тестирование отдельных компонентов&#xa;- **Интеграционные тесты** (`tests/integration_tests/`) - тестирование взаимодействия компонентов&#xa;&#xa;&#xa;## Быстрый тест&#xa;&#xa;&#xa;Для быстрого тестирования API без pytest можно использовать готовые скрипты:&#xa;```bash&#xa;# Быстрый тест чата&#xa;python3 test_chat_quick.py&#xa;&#xa;&#xa;# Тест поддержки АС&#xa;python3 test_as_chat.py&#xa;```&#xa;&#xa;&#xa;Рекомендую начать с команды `poetry run pytest tests/unit/ -v` для запуска всех юнит тестов с подробным выводом." link="Я помогу вам запустить юнит тесты в проекте AI Gateway. Сначала давайте посмотрим на структуру проекта и конфигурацию тестов.&#xa;&#xa;&#xa;&#xa;&#xa;[3 tools called]&#xa;&#xa;&#xa;Теперь давайте посмотрим на структуру тестов:&#xa;&#xa;&#xa;&#xa;&#xa;[2 tools called]&#xa;&#xa;&#xa;Отлично! Теперь я вижу структуру проекта. Для запуска юнит тестов в проекте AI Gateway используйте следующие команды:&#xa;&#xa;&#xa;## Запуск юнит тестов&#xa;&#xa;&#xa;### 1. Запуск всех тестов&#xa;```bash&#xa;poetry run pytest&#xa;```&#xa;&#xa;&#xa;### 2. Запуск только юнит тестов&#xa;```bash&#xa;poetry run pytest tests/unit/&#xa;```&#xa;&#xa;&#xa;### 3. Запуск с подробным выводом&#xa;```bash&#xa;poetry run pytest tests/unit/ -v&#xa;```&#xa;&#xa;&#xa;### 4. Запуск конкретного теста&#xa;```bash&#xa;poetry run pytest tests/unit/test_config.py&#xa;```&#xa;&#xa;&#xa;### 5. Запуск с покрытием кода&#xa;```bash&#xa;poetry run pytest tests/unit/ --cov=src/aigw_service&#xa;```&#xa;&#xa;&#xa;## Дополнительные опции&#xa;&#xa;&#xa;### Запуск тестов в параллельном режиме&#xa;```bash&#xa;poetry run pytest tests/unit/ -n auto&#xa;```&#xa;&#xa;&#xa;### Запуск только быстрых тестов (без интеграционных)&#xa;```bash&#xa;poetry run pytest tests/unit/ -m &quot;not slow&quot;&#xa;```&#xa;&#xa;&#xa;### Запуск с остановкой на первой ошибке&#xa;```bash&#xa;poetry run pytest tests/unit/ -x&#xa;```&#xa;&#xa;&#xa;## Конфигурация тестов&#xa;&#xa;&#xa;Согласно `pyproject.toml`, тесты настроены с:&#xa;- **Python path**: включает корневую директорию и `src`&#xa;- **Asyncio mode**: автоматический режим для асинхронных тестов&#xa;- **Опции**: `-s --verbose -W ignore::DeprecationWarning`&#xa;&#xa;&#xa;## Структура тестов&#xa;&#xa;&#xa;В проекте есть:&#xa;- **Юнит тесты** (`tests/unit/`) - тестирование отдельных компонентов&#xa;- **Интеграционные тесты** (`tests/integration_tests/`) - тестирование взаимодействия компонентов&#xa;&#xa;&#xa;## Быстрый тест&#xa;&#xa;&#xa;Для быстрого тестирования API без pytest можно использовать готовые скрипты:&#xa;```bash&#xa;# Быстрый тест чата&#xa;python3 test_chat_quick.py&#xa;&#xa;&#xa;# Тест поддержки АС&#xa;python3 test_as_chat.py&#xa;```&#xa;&#xa;&#xa;Рекомендую начать с команды `poetry run pytest tests/unit/ -v` для запуска всех юнит тестов с подробным выводом." id="5IHkVXNPXtW-t5hTtuE6-1">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="680" y="30" width="560" height="1590" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
