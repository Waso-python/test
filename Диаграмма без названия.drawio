<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36" version="27.1.1">
  <diagram name="Страница — 1" id="WULPb32uHRo-QUS4CWuH">
    <mxGraphModel dx="1152" dy="692" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="827" pageHeight="1169" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <UserObject label="// config.js&#xa;&#xa;&#xa;const CONFIG = {&#xa;    // --- Основной API для поиска кода ---&#xa;    // Вставьте сюда ваш основной API-ключ&#xa;    SEARCH_API_KEY: &quot;&quot;, &#xa;    // Адрес основного API&#xa;    SEARCH_API_ENDPOINT: &quot;https://aigateway.delta.sbrf.ru/api/v1/run/d38cde4a-0ddc-4b34-afb6-5b15202474e6?stream=false&quot;,&#xa;&#xa;&#xa;    // --- Дополнительный API для верификации ---&#xa;    // Вставьте сюда API-ключ для API верификации (если он отличается)&#xa;    VERIFICATION_API_KEY: &quot;&quot;, &#xa;    // Вставьте сюда адрес API для верификации&#xa;    VERIFICATION_API_ENDPOINT: &quot;https://example.com/api/v1/verify&quot;, // &lt;-- ЗАМЕНИТЕ НА ВАШ АДРЕС&#xa;&#xa;&#xa;    // --- Шаблон промпта для верификации ---&#xa;    // Используйте {{QUESTION}} и {{CODE}} как плейсхолдеры.&#xa;    // Они будут автоматически заменены на реальные данные.&#xa;    PROMPT_TEMPLATE: &quot;Проверь, является ли код &#39;{{CODE}}&#39; правильным ответом на вопрос &#39;{{QUESTION}}&#39;. Ответь одним словом: &#39;Да&#39; или &#39;Нет&#39;.&quot;&#xa;};" link="// config.js&#xa;&#xa;&#xa;const CONFIG = {&#xa;    // --- Основной API для поиска кода ---&#xa;    // Вставьте сюда ваш основной API-ключ&#xa;    SEARCH_API_KEY: &quot;&quot;, &#xa;    // Адрес основного API&#xa;    SEARCH_API_ENDPOINT: &quot;https://aigateway.delta.sbrf.ru/api/v1/run/d38cde4a-0ddc-4b34-afb6-5b15202474e6?stream=false&quot;,&#xa;&#xa;&#xa;    // --- Дополнительный API для верификации ---&#xa;    // Вставьте сюда API-ключ для API верификации (если он отличается)&#xa;    VERIFICATION_API_KEY: &quot;&quot;, &#xa;    // Вставьте сюда адрес API для верификации&#xa;    VERIFICATION_API_ENDPOINT: &quot;https://example.com/api/v1/verify&quot;, // &lt;-- ЗАМЕНИТЕ НА ВАШ АДРЕС&#xa;&#xa;&#xa;    // --- Шаблон промпта для верификации ---&#xa;    // Используйте {{QUESTION}} и {{CODE}} как плейсхолдеры.&#xa;    // Они будут автоматически заменены на реальные данные.&#xa;    PROMPT_TEMPLATE: &quot;Проверь, является ли код &#39;{{CODE}}&#39; правильным ответом на вопрос &#39;{{QUESTION}}&#39;. Ответь одним словом: &#39;Да&#39; или &#39;Нет&#39;.&quot;&#xa;};" id="KhpofreyqJjnModskH-O-7">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="50" y="10" width="560" height="400" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="&lt;!DOCTYPE html&gt;&#xa;&lt;html lang=&quot;ru&quot;&gt;&#xa;&lt;head&gt;&#xa;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#xa;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#xa;    &lt;title&gt;Тестировщик ответов LLM&lt;/title&gt;&#xa;    &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt;&#xa;&lt;body&gt;&#xa;    &lt;div class=&quot;container&quot;&gt;&#xa;        &lt;h1&gt;Тест поиска LLM&lt;/h1&gt;&#xa;        &#xa;        &lt;div class=&quot;config-section&quot;&gt;&#xa;            &lt;h2&gt;Настройки API (переопределяют config.js)&lt;/h2&gt;&#xa;            &lt;div class=&quot;config-grid&quot;&gt;&#xa;                &lt;div class=&quot;config-item&quot;&gt;&#xa;                    &lt;label for=&quot;apiKey&quot;&gt;API Key (Поиск):&lt;/label&gt;&#xa;                    &lt;input type=&quot;password&quot; id=&quot;apiKey&quot; placeholder=&quot;Используется из config.js, если пусто&quot;&gt;&#xa;                &lt;/div&gt;&#xa;                &lt;div class=&quot;config-item&quot;&gt;&#xa;                    &lt;label for=&quot;apiEndpoint&quot;&gt;API Endpoint (Поиск):&lt;/label&gt;&#xa;                    &lt;input type=&quot;text&quot; id=&quot;apiEndpoint&quot;&gt;&#xa;                &lt;/div&gt;&#xa;            &lt;/div&gt;&#xa;        &lt;/div&gt;&#xa;        &#xa;        &lt;div class=&quot;input-section&quot;&gt;&#xa;            &lt;h2&gt;Входные данные&lt;/h2&gt;&#xa;            &lt;p&gt;Вставьте данные из Excel (вопрос + табуляция + ожидаемый код):&lt;/p&gt;&#xa;            &lt;textarea id=&quot;inputData&quot; placeholder=&quot;Пример:&#xa;особый порядок резервирования    KUL.CREAT.QUAL.02&#xa;ускоренный порядок резервирования  KUL.CREAT.QUAL.03&quot;&gt;&lt;/textarea&gt;&#xa;            &#xa;            &lt;div class=&quot;controls&quot;&gt;&#xa;                &lt;button id=&quot;runTest&quot;&gt;Запустить тестирование&lt;/button&gt;&#xa;                &lt;button id=&quot;clearResults&quot;&gt;Очистить результаты&lt;/button&gt;&#xa;            &lt;/div&gt;&#xa;            &#xa;            &lt;div class=&quot;progress-container hidden&quot; id=&quot;progressContainer&quot;&gt;&#xa;                &lt;div class=&quot;progress-bar&quot; id=&quot;progressBar&quot;&gt;&lt;/div&gt;&#xa;            &lt;/div&gt;&#xa;        &lt;/div&gt;&#xa;        &#xa;        &lt;div class=&quot;results-section&quot;&gt;&#xa;            &lt;h2&gt;Результаты тестирования&lt;/h2&gt;&#xa;            &lt;div id=&quot;errorMessage&quot; class=&quot;error hidden&quot;&gt;&lt;/div&gt;&#xa;            &lt;div id=&quot;summary&quot; class=&quot;summary hidden&quot;&gt;&lt;/div&gt;&#xa;            &lt;table id=&quot;resultsTable&quot;&gt;&#xa;                &lt;thead&gt;&#xa;                    &lt;tr&gt;&#xa;                        &lt;th width=&quot;25%&quot;&gt;Вопрос&lt;/th&gt;&#xa;                        &lt;th width=&quot;20%&quot;&gt;Ожидаемый код&lt;/th&gt;&#xa;                        &lt;th width=&quot;20%&quot;&gt;Полученный код&lt;/th&gt;&#xa;                        &lt;th width=&quot;12%&quot;&gt;Статус&lt;/th&gt;&#xa;                        &lt;th width=&quot;12%&quot;&gt;Проверка&lt;/th&gt; &lt;th width=&quot;11%&quot;&gt;Время&lt;/th&gt;&#xa;                    &lt;/tr&gt;&#xa;                &lt;/thead&gt;&#xa;                &lt;tbody id=&quot;resultsBody&quot;&gt;&lt;/tbody&gt;&#xa;            &lt;/table&gt;&#xa;        &lt;/div&gt;&#xa;    &lt;/div&gt;&#xa;&#xa;&#xa;    &lt;script src=&quot;config.js&quot;&gt;&lt;/script&gt;&#xa;    &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;&#xa;&lt;/body&gt;&#xa;&lt;/html&gt;" link="&lt;!DOCTYPE html&gt;&#xa;&lt;html lang=&quot;ru&quot;&gt;&#xa;&lt;head&gt;&#xa;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#xa;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#xa;    &lt;title&gt;Тестировщик ответов LLM&lt;/title&gt;&#xa;    &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt;&#xa;&lt;body&gt;&#xa;    &lt;div class=&quot;container&quot;&gt;&#xa;        &lt;h1&gt;Тест поиска LLM&lt;/h1&gt;&#xa;        &#xa;        &lt;div class=&quot;config-section&quot;&gt;&#xa;            &lt;h2&gt;Настройки API (переопределяют config.js)&lt;/h2&gt;&#xa;            &lt;div class=&quot;config-grid&quot;&gt;&#xa;                &lt;div class=&quot;config-item&quot;&gt;&#xa;                    &lt;label for=&quot;apiKey&quot;&gt;API Key (Поиск):&lt;/label&gt;&#xa;                    &lt;input type=&quot;password&quot; id=&quot;apiKey&quot; placeholder=&quot;Используется из config.js, если пусто&quot;&gt;&#xa;                &lt;/div&gt;&#xa;                &lt;div class=&quot;config-item&quot;&gt;&#xa;                    &lt;label for=&quot;apiEndpoint&quot;&gt;API Endpoint (Поиск):&lt;/label&gt;&#xa;                    &lt;input type=&quot;text&quot; id=&quot;apiEndpoint&quot;&gt;&#xa;                &lt;/div&gt;&#xa;            &lt;/div&gt;&#xa;        &lt;/div&gt;&#xa;        &#xa;        &lt;div class=&quot;input-section&quot;&gt;&#xa;            &lt;h2&gt;Входные данные&lt;/h2&gt;&#xa;            &lt;p&gt;Вставьте данные из Excel (вопрос + табуляция + ожидаемый код):&lt;/p&gt;&#xa;            &lt;textarea id=&quot;inputData&quot; placeholder=&quot;Пример:&#xa;особый порядок резервирования    KUL.CREAT.QUAL.02&#xa;ускоренный порядок резервирования  KUL.CREAT.QUAL.03&quot;&gt;&lt;/textarea&gt;&#xa;            &#xa;            &lt;div class=&quot;controls&quot;&gt;&#xa;                &lt;button id=&quot;runTest&quot;&gt;Запустить тестирование&lt;/button&gt;&#xa;                &lt;button id=&quot;clearResults&quot;&gt;Очистить результаты&lt;/button&gt;&#xa;            &lt;/div&gt;&#xa;            &#xa;            &lt;div class=&quot;progress-container hidden&quot; id=&quot;progressContainer&quot;&gt;&#xa;                &lt;div class=&quot;progress-bar&quot; id=&quot;progressBar&quot;&gt;&lt;/div&gt;&#xa;            &lt;/div&gt;&#xa;        &lt;/div&gt;&#xa;        &#xa;        &lt;div class=&quot;results-section&quot;&gt;&#xa;            &lt;h2&gt;Результаты тестирования&lt;/h2&gt;&#xa;            &lt;div id=&quot;errorMessage&quot; class=&quot;error hidden&quot;&gt;&lt;/div&gt;&#xa;            &lt;div id=&quot;summary&quot; class=&quot;summary hidden&quot;&gt;&lt;/div&gt;&#xa;            &lt;table id=&quot;resultsTable&quot;&gt;&#xa;                &lt;thead&gt;&#xa;                    &lt;tr&gt;&#xa;                        &lt;th width=&quot;25%&quot;&gt;Вопрос&lt;/th&gt;&#xa;                        &lt;th width=&quot;20%&quot;&gt;Ожидаемый код&lt;/th&gt;&#xa;                        &lt;th width=&quot;20%&quot;&gt;Полученный код&lt;/th&gt;&#xa;                        &lt;th width=&quot;12%&quot;&gt;Статус&lt;/th&gt;&#xa;                        &lt;th width=&quot;12%&quot;&gt;Проверка&lt;/th&gt; &lt;th width=&quot;11%&quot;&gt;Время&lt;/th&gt;&#xa;                    &lt;/tr&gt;&#xa;                &lt;/thead&gt;&#xa;                &lt;tbody id=&quot;resultsBody&quot;&gt;&lt;/tbody&gt;&#xa;            &lt;/table&gt;&#xa;        &lt;/div&gt;&#xa;    &lt;/div&gt;&#xa;&#xa;&#xa;    &lt;script src=&quot;config.js&quot;&gt;&lt;/script&gt;&#xa;    &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt;&#xa;&lt;/body&gt;&#xa;&lt;/html&gt;" id="KhpofreyqJjnModskH-O-8">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="90" y="460" width="560" height="990" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="// app.js&#xa;&#xa;&#xa;document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {&#xa;    // Элементы интерфейса&#xa;    const inputData = document.getElementById(&#39;inputData&#39;);&#xa;    const runTest = document.getElementById(&#39;runTest&#39;);&#xa;    const clearResults = document.getElementById(&#39;clearResults&#39;);&#xa;    const resultsBody = document.getElementById(&#39;resultsBody&#39;);&#xa;    const progressBar = document.getElementById(&#39;progressBar&#39;);&#xa;    const progressContainer = document.getElementById(&#39;progressContainer&#39;);&#xa;    const summaryElement = document.getElementById(&#39;summary&#39;);&#xa;    const errorMessage = document.getElementById(&#39;errorMessage&#39;);&#xa;    const apiKeyInput = document.getElementById(&#39;apiKey&#39;);&#xa;    const apiEndpointInput = document.getElementById(&#39;apiEndpoint&#39;);&#xa;&#xa;&#xa;    // Устанавливаем значения по умолчанию из конфига&#xa;    apiEndpointInput.value = CONFIG.SEARCH_API_ENDPOINT;&#xa;    apiKeyInput.placeholder = CONFIG.SEARCH_API_KEY ? &quot;Ключ задан в config.js&quot; : &quot;Введите ваш API ключ&quot;;&#xa;&#xa;&#xa;&#xa;&#xa;    // Счетчики результатов&#xa;    let correctCount = 0;&#xa;    let incorrectCount = 0;&#xa;    let errorCount = 0;&#xa;&#xa;&#xa;    function cleanCode(code) {&#xa;        if (!code) return &#39;&#39;;&#xa;        return code.replace(/^\[|\]$/g, &#39;&#39;).trim();&#xa;    }&#xa;&#xa;&#xa;    function extractCodeFromResponse(data) {&#xa;        try {&#xa;            const possiblePaths = [&#xa;                data?.outputs?.[0]?.outputs?.[0]?.artifacts?.message,&#xa;                data?.outputs?.[0]?.outputs?.[0]?.results?.message?.text,&#xa;                data?.outputs?.[0]?.outputs?.[0]?.messages?.[0]?.message&#xa;            ];&#xa;            const foundCode = possiblePaths.find(path =&gt; path);&#xa;            if (foundCode) return cleanCode(foundCode);&#xa;            throw new Error(&quot;Код не найден в ответе API&quot;);&#xa;        } catch (error) {&#xa;            console.error(&quot;Ошибка извлечения кода:&quot;, error);&#xa;            throw new Error(&quot;Не удалось извлечь код из структуры ответа&quot;);&#xa;        }&#xa;    }&#xa;&#xa;&#xa;    // Функция для вызова ОСНОВНОГО API поиска&#xa;    async function callSearchApi(question) {&#xa;        // Используем значение из поля ввода, если оно есть, иначе из конфига&#xa;        const apiKey = apiKeyInput.value.trim() || CONFIG.SEARCH_API_KEY;&#xa;        const endpoint = apiEndpointInput.value.trim() || CONFIG.SEARCH_API_ENDPOINT;&#xa;&#xa;&#xa;        if (!apiKey) throw new Error(&quot;API ключ для поиска не указан ни в поле, ни в config.js&quot;);&#xa;&#xa;&#xa;        const startTime = performance.now();&#xa;        try {&#xa;            const response = await fetch(endpoint, {&#xa;                method: &#39;POST&#39;,&#xa;                headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;x-api-key&#39;: apiKey },&#xa;                body: JSON.stringify({&#xa;                    &quot;input_value&quot;: question,&#xa;                    &quot;output_type&quot;: &quot;chat&quot;, &quot;input_type&quot;: &quot;chat&quot;,&#xa;                    &quot;tweaks&quot;: { /* ... ваши параметры ... */ }&#xa;                })&#xa;            });&#xa;            const responseTime = Math.round(performance.now() - startTime);&#xa;            if (!response.ok) {&#xa;                const errorText = await response.text();&#xa;                throw new Error(`Ошибка API поиска: ${response.status} - ${errorText}`);&#xa;            }&#xa;            const data = await response.json();&#xa;            return { code: extractCodeFromResponse(data), time: responseTime, rawResponse: data };&#xa;        } catch (error) {&#xa;            return { error: error.message, time: Math.round(performance.now() - startTime) };&#xa;        }&#xa;    }&#xa;    &#xa;    // НОВАЯ функция для вызова API ВЕРИФИКАЦИИ&#xa;    async function callVerificationApi(question, code) {&#xa;        const apiKey = CONFIG.VERIFICATION_API_KEY;&#xa;        const endpoint = CONFIG.VERIFICATION_API_ENDPOINT;&#xa;        &#xa;        if (!endpoint || !CONFIG.PROMPT_TEMPLATE) {&#xa;            return { result: &quot;N/A&quot;, detail: &quot;API верификации не настроен в config.js&quot; };&#xa;        }&#xa;        &#xa;        // Подставляем данные в шаблон промпта&#xa;        const finalPrompt = CONFIG.PROMPT_TEMPLATE&#xa;            .replace(&#39;{{QUESTION}}&#39;, question)&#xa;            .replace(&#39;{{CODE}}&#39;, code);&#xa;&#xa;&#xa;        try {&#xa;            const response = await fetch(endpoint, {&#xa;                method: &#39;POST&#39;,&#xa;                headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Authorization&#39;: `Bearer ${apiKey}` }, // или &#39;x-api-key&#39; в зависимости от вашего API&#xa;                body: JSON.stringify({ &quot;prompt&quot;: finalPrompt }) // &lt;-- Адаптируйте тело запроса под ваш API&#xa;            });&#xa;            &#xa;            if (!response.ok) return { result: &quot;Ошибка&quot;, detail: `Статус ${response.status}` };&#xa;            &#xa;            const data = await response.json();&#xa;            // Предполагаем, что API возвращает что-то вроде {&quot;answer&quot;: &quot;Да&quot;}&#xa;            // Адаптируйте эту строку под реальный ответ вашего API&#xa;            return { result: data.answer || JSON.stringify(data) };&#xa;&#xa;&#xa;        } catch (error) {&#xa;            return { result: &quot;Ошибка&quot;, detail: error.message };&#xa;        }&#xa;    }&#xa;&#xa;&#xa;&#xa;&#xa;    runTest.addEventListener(&#39;click&#39;, async () =&gt; {&#xa;        const data = inputData.value.trim();&#xa;        if (!data) return showError(&quot;Введите данные для тестирования&quot;);&#xa;        &#xa;        resetState();&#xa;        const testCases = parseInputData(data);&#xa;        if (!testCases) return;&#xa;&#xa;&#xa;        progressContainer.classList.remove(&#39;hidden&#39;);&#xa;&#xa;&#xa;        for (let i = 0; i &lt; testCases.length; i++) {&#xa;            progressBar.style.width = `${((i + 1) / testCases.length) * 100}%`;&#xa;            const testCase = testCases[i];&#xa;            const row = createInitialRow(testCase);&#xa;&#xa;&#xa;            // --- Этап 1: Поиск кода ---&#xa;            const searchResult = await callSearchApi(testCase.question);&#xa;            updateRowAfterSearch(row, testCase, searchResult);&#xa;&#xa;&#xa;            if (searchResult.code) {&#xa;                // --- Этап 2: Верификация кода ---&#xa;                const verificationResult = await callVerificationApi(testCase.question, searchResult.code);&#xa;                updateRowAfterVerification(row, verificationResult);&#xa;            }&#xa;            row.scrollIntoView({ behavior: &#39;smooth&#39;, block: &#39;nearest&#39; });&#xa;        }&#xa;        &#xa;        setTimeout(() =&gt; progressContainer.classList.add(&#39;hidden&#39;), 500);&#xa;        showSummary();&#xa;    });&#xa;&#xa;&#xa;    function createInitialRow(testCase) {&#xa;        const row = document.createElement(&#39;tr&#39;);&#xa;        row.innerHTML = `&#xa;            &lt;td&gt;${testCase.question}&lt;/td&gt;&#xa;            &lt;td&gt;${testCase.expected}&lt;/td&gt;&#xa;            &lt;td class=&quot;received-code&quot;&gt;...&lt;/td&gt;&#xa;            &lt;td class=&quot;status-cell&quot;&gt;&lt;span class=&quot;status processing&quot;&gt;Обработка&lt;/span&gt;&lt;/td&gt;&#xa;            &lt;td class=&quot;verification-cell&quot;&gt;...&lt;/td&gt;&#xa;            &lt;td class=&quot;time-cell&quot;&gt;...&lt;/td&gt;&#xa;        `;&#xa;        resultsBody.appendChild(row);&#xa;        return row;&#xa;    }&#xa;&#xa;&#xa;    function updateRowAfterSearch(row, testCase, result) {&#xa;        const isMatch = !result.error &amp;&amp; result.code === testCase.expected;&#xa;        if (result.error) {&#xa;            errorCount++;&#xa;            row.querySelector(&#39;.received-code&#39;).innerHTML = `&lt;span class=&quot;error&quot;&gt;${result.error}&lt;/span&gt;`;&#xa;            row.querySelector(&#39;.status-cell&#39;).innerHTML = `&lt;span class=&quot;status error-status&quot;&gt;Ошибка&lt;/span&gt;`;&#xa;        } else {&#xa;            if (isMatch) correctCount++; else incorrectCount++;&#xa;            row.querySelector(&#39;.received-code&#39;).textContent = result.code || &quot;&lt;пустой ответ&gt;&quot;;&#xa;            row.querySelector(&#39;.status-cell&#39;).innerHTML = `&lt;span class=&quot;status ${isMatch ? &#39;correct&#39; : &#39;incorrect&#39;}&quot;&gt;${isMatch ? &#39;Совпадает&#39; : &#39;Не совпадает&#39;}&lt;/span&gt;`;&#xa;            if (!isMatch) addRawResponseDetail(row, result.rawResponse);&#xa;        }&#xa;        row.querySelector(&#39;.time-cell&#39;).textContent = `${result.time}мс`;&#xa;    }&#xa;    &#xa;    function updateRowAfterVerification(row, result) {&#xa;        const cell = row.querySelector(&#39;.verification-cell&#39;);&#xa;        // Здесь можно добавить логику для раскрашивания статуса верификации&#xa;        cell.textContent = result.result;&#xa;        if (result.detail) cell.title = result.detail;&#xa;    }&#xa;&#xa;&#xa;    function addRawResponseDetail(row, rawResponse) {&#xa;        const detailRow = document.createElement(&#39;tr&#39;);&#xa;        detailRow.className = &#39;response-detail&#39;;&#xa;        detailRow.innerHTML = `&lt;td colspan=&quot;6&quot;&gt;&lt;div class=&quot;json-view&quot;&gt;${JSON.stringify(rawResponse, null, 2)}&lt;/div&gt;&lt;/td&gt;`;&#xa;        row.insertAdjacentElement(&#39;afterend&#39;, detailRow);&#xa;    }&#xa;&#xa;&#xa;    function parseInputData(data) {&#xa;        const lines = data.split(&#39;\n&#39;).filter(line =&gt; line.trim() !== &#39;&#39;);&#xa;        return lines.map(line =&gt; {&#xa;            const parts = line.split(&#39;\t&#39;);&#xa;            if (parts.length &lt; 2) {&#xa;                showError(`Ошибка формата в строке: &quot;${line}&quot;. Используйте табуляцию.`);&#xa;                return null;&#xa;            }&#xa;            return { question: parts[0].trim(), expected: cleanCode(parts[1].trim()) };&#xa;        }).filter(Boolean);&#xa;    }&#xa;    &#xa;    function resetState() {&#xa;        correctCount = incorrectCount = errorCount = 0;&#xa;        resultsBody.innerHTML = &#39;&#39;;&#xa;        summaryElement.classList.add(&#39;hidden&#39;);&#xa;        errorMessage.classList.add(&#39;hidden&#39;);&#xa;    }&#xa;&#xa;&#xa;    clearResults.addEventListener(&#39;click&#39;, () =&gt; {&#xa;        resetState();&#xa;        inputData.value = &#39;&#39;;&#xa;    });&#xa;&#xa;&#xa;    function showError(message) {&#xa;        errorMessage.textContent = message;&#xa;        errorMessage.classList.remove(&#39;hidden&#39;);&#xa;        setTimeout(() =&gt; errorMessage.classList.add(&#39;hidden&#39;), 5000);&#xa;    }&#xa;&#xa;&#xa;    function showSummary() {&#xa;        const total = correctCount + incorrectCount + errorCount;&#xa;        const accuracy = total &gt; 0 ? Math.round((correctCount / (total - errorCount)) * 100) : 0;&#xa;        summaryElement.innerHTML = `&#xa;            Итоги тестирования: &#xa;            &lt;span style=&quot;color: #28a745&quot;&gt;${correctCount} ✓&lt;/span&gt; | &#xa;            &lt;span style=&quot;color: #dc3545&quot;&gt;${incorrectCount} ✗&lt;/span&gt; | &#xa;            &lt;span style=&quot;color: #ffc107&quot;&gt;${errorCount} ⚠&lt;/span&gt;&#xa;            | Точность (без ошибок): &lt;strong&gt;${accuracy}%&lt;/strong&gt;&#xa;        `;&#xa;        summaryElement.classList.remove(&#39;hidden&#39;);&#xa;    }&#xa;});" link="// app.js&#xa;&#xa;&#xa;document.addEventListener(&#39;DOMContentLoaded&#39;, () =&gt; {&#xa;    // Элементы интерфейса&#xa;    const inputData = document.getElementById(&#39;inputData&#39;);&#xa;    const runTest = document.getElementById(&#39;runTest&#39;);&#xa;    const clearResults = document.getElementById(&#39;clearResults&#39;);&#xa;    const resultsBody = document.getElementById(&#39;resultsBody&#39;);&#xa;    const progressBar = document.getElementById(&#39;progressBar&#39;);&#xa;    const progressContainer = document.getElementById(&#39;progressContainer&#39;);&#xa;    const summaryElement = document.getElementById(&#39;summary&#39;);&#xa;    const errorMessage = document.getElementById(&#39;errorMessage&#39;);&#xa;    const apiKeyInput = document.getElementById(&#39;apiKey&#39;);&#xa;    const apiEndpointInput = document.getElementById(&#39;apiEndpoint&#39;);&#xa;&#xa;&#xa;    // Устанавливаем значения по умолчанию из конфига&#xa;    apiEndpointInput.value = CONFIG.SEARCH_API_ENDPOINT;&#xa;    apiKeyInput.placeholder = CONFIG.SEARCH_API_KEY ? &quot;Ключ задан в config.js&quot; : &quot;Введите ваш API ключ&quot;;&#xa;&#xa;&#xa;&#xa;&#xa;    // Счетчики результатов&#xa;    let correctCount = 0;&#xa;    let incorrectCount = 0;&#xa;    let errorCount = 0;&#xa;&#xa;&#xa;    function cleanCode(code) {&#xa;        if (!code) return &#39;&#39;;&#xa;        return code.replace(/^\[|\]$/g, &#39;&#39;).trim();&#xa;    }&#xa;&#xa;&#xa;    function extractCodeFromResponse(data) {&#xa;        try {&#xa;            const possiblePaths = [&#xa;                data?.outputs?.[0]?.outputs?.[0]?.artifacts?.message,&#xa;                data?.outputs?.[0]?.outputs?.[0]?.results?.message?.text,&#xa;                data?.outputs?.[0]?.outputs?.[0]?.messages?.[0]?.message&#xa;            ];&#xa;            const foundCode = possiblePaths.find(path =&gt; path);&#xa;            if (foundCode) return cleanCode(foundCode);&#xa;            throw new Error(&quot;Код не найден в ответе API&quot;);&#xa;        } catch (error) {&#xa;            console.error(&quot;Ошибка извлечения кода:&quot;, error);&#xa;            throw new Error(&quot;Не удалось извлечь код из структуры ответа&quot;);&#xa;        }&#xa;    }&#xa;&#xa;&#xa;    // Функция для вызова ОСНОВНОГО API поиска&#xa;    async function callSearchApi(question) {&#xa;        // Используем значение из поля ввода, если оно есть, иначе из конфига&#xa;        const apiKey = apiKeyInput.value.trim() || CONFIG.SEARCH_API_KEY;&#xa;        const endpoint = apiEndpointInput.value.trim() || CONFIG.SEARCH_API_ENDPOINT;&#xa;&#xa;&#xa;        if (!apiKey) throw new Error(&quot;API ключ для поиска не указан ни в поле, ни в config.js&quot;);&#xa;&#xa;&#xa;        const startTime = performance.now();&#xa;        try {&#xa;            const response = await fetch(endpoint, {&#xa;                method: &#39;POST&#39;,&#xa;                headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;x-api-key&#39;: apiKey },&#xa;                body: JSON.stringify({&#xa;                    &quot;input_value&quot;: question,&#xa;                    &quot;output_type&quot;: &quot;chat&quot;, &quot;input_type&quot;: &quot;chat&quot;,&#xa;                    &quot;tweaks&quot;: { /* ... ваши параметры ... */ }&#xa;                })&#xa;            });&#xa;            const responseTime = Math.round(performance.now() - startTime);&#xa;            if (!response.ok) {&#xa;                const errorText = await response.text();&#xa;                throw new Error(`Ошибка API поиска: ${response.status} - ${errorText}`);&#xa;            }&#xa;            const data = await response.json();&#xa;            return { code: extractCodeFromResponse(data), time: responseTime, rawResponse: data };&#xa;        } catch (error) {&#xa;            return { error: error.message, time: Math.round(performance.now() - startTime) };&#xa;        }&#xa;    }&#xa;    &#xa;    // НОВАЯ функция для вызова API ВЕРИФИКАЦИИ&#xa;    async function callVerificationApi(question, code) {&#xa;        const apiKey = CONFIG.VERIFICATION_API_KEY;&#xa;        const endpoint = CONFIG.VERIFICATION_API_ENDPOINT;&#xa;        &#xa;        if (!endpoint || !CONFIG.PROMPT_TEMPLATE) {&#xa;            return { result: &quot;N/A&quot;, detail: &quot;API верификации не настроен в config.js&quot; };&#xa;        }&#xa;        &#xa;        // Подставляем данные в шаблон промпта&#xa;        const finalPrompt = CONFIG.PROMPT_TEMPLATE&#xa;            .replace(&#39;{{QUESTION}}&#39;, question)&#xa;            .replace(&#39;{{CODE}}&#39;, code);&#xa;&#xa;&#xa;        try {&#xa;            const response = await fetch(endpoint, {&#xa;                method: &#39;POST&#39;,&#xa;                headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Authorization&#39;: `Bearer ${apiKey}` }, // или &#39;x-api-key&#39; в зависимости от вашего API&#xa;                body: JSON.stringify({ &quot;prompt&quot;: finalPrompt }) // &lt;-- Адаптируйте тело запроса под ваш API&#xa;            });&#xa;            &#xa;            if (!response.ok) return { result: &quot;Ошибка&quot;, detail: `Статус ${response.status}` };&#xa;            &#xa;            const data = await response.json();&#xa;            // Предполагаем, что API возвращает что-то вроде {&quot;answer&quot;: &quot;Да&quot;}&#xa;            // Адаптируйте эту строку под реальный ответ вашего API&#xa;            return { result: data.answer || JSON.stringify(data) };&#xa;&#xa;&#xa;        } catch (error) {&#xa;            return { result: &quot;Ошибка&quot;, detail: error.message };&#xa;        }&#xa;    }&#xa;&#xa;&#xa;&#xa;&#xa;    runTest.addEventListener(&#39;click&#39;, async () =&gt; {&#xa;        const data = inputData.value.trim();&#xa;        if (!data) return showError(&quot;Введите данные для тестирования&quot;);&#xa;        &#xa;        resetState();&#xa;        const testCases = parseInputData(data);&#xa;        if (!testCases) return;&#xa;&#xa;&#xa;        progressContainer.classList.remove(&#39;hidden&#39;);&#xa;&#xa;&#xa;        for (let i = 0; i &lt; testCases.length; i++) {&#xa;            progressBar.style.width = `${((i + 1) / testCases.length) * 100}%`;&#xa;            const testCase = testCases[i];&#xa;            const row = createInitialRow(testCase);&#xa;&#xa;&#xa;            // --- Этап 1: Поиск кода ---&#xa;            const searchResult = await callSearchApi(testCase.question);&#xa;            updateRowAfterSearch(row, testCase, searchResult);&#xa;&#xa;&#xa;            if (searchResult.code) {&#xa;                // --- Этап 2: Верификация кода ---&#xa;                const verificationResult = await callVerificationApi(testCase.question, searchResult.code);&#xa;                updateRowAfterVerification(row, verificationResult);&#xa;            }&#xa;            row.scrollIntoView({ behavior: &#39;smooth&#39;, block: &#39;nearest&#39; });&#xa;        }&#xa;        &#xa;        setTimeout(() =&gt; progressContainer.classList.add(&#39;hidden&#39;), 500);&#xa;        showSummary();&#xa;    });&#xa;&#xa;&#xa;    function createInitialRow(testCase) {&#xa;        const row = document.createElement(&#39;tr&#39;);&#xa;        row.innerHTML = `&#xa;            &lt;td&gt;${testCase.question}&lt;/td&gt;&#xa;            &lt;td&gt;${testCase.expected}&lt;/td&gt;&#xa;            &lt;td class=&quot;received-code&quot;&gt;...&lt;/td&gt;&#xa;            &lt;td class=&quot;status-cell&quot;&gt;&lt;span class=&quot;status processing&quot;&gt;Обработка&lt;/span&gt;&lt;/td&gt;&#xa;            &lt;td class=&quot;verification-cell&quot;&gt;...&lt;/td&gt;&#xa;            &lt;td class=&quot;time-cell&quot;&gt;...&lt;/td&gt;&#xa;        `;&#xa;        resultsBody.appendChild(row);&#xa;        return row;&#xa;    }&#xa;&#xa;&#xa;    function updateRowAfterSearch(row, testCase, result) {&#xa;        const isMatch = !result.error &amp;&amp; result.code === testCase.expected;&#xa;        if (result.error) {&#xa;            errorCount++;&#xa;            row.querySelector(&#39;.received-code&#39;).innerHTML = `&lt;span class=&quot;error&quot;&gt;${result.error}&lt;/span&gt;`;&#xa;            row.querySelector(&#39;.status-cell&#39;).innerHTML = `&lt;span class=&quot;status error-status&quot;&gt;Ошибка&lt;/span&gt;`;&#xa;        } else {&#xa;            if (isMatch) correctCount++; else incorrectCount++;&#xa;            row.querySelector(&#39;.received-code&#39;).textContent = result.code || &quot;&lt;пустой ответ&gt;&quot;;&#xa;            row.querySelector(&#39;.status-cell&#39;).innerHTML = `&lt;span class=&quot;status ${isMatch ? &#39;correct&#39; : &#39;incorrect&#39;}&quot;&gt;${isMatch ? &#39;Совпадает&#39; : &#39;Не совпадает&#39;}&lt;/span&gt;`;&#xa;            if (!isMatch) addRawResponseDetail(row, result.rawResponse);&#xa;        }&#xa;        row.querySelector(&#39;.time-cell&#39;).textContent = `${result.time}мс`;&#xa;    }&#xa;    &#xa;    function updateRowAfterVerification(row, result) {&#xa;        const cell = row.querySelector(&#39;.verification-cell&#39;);&#xa;        // Здесь можно добавить логику для раскрашивания статуса верификации&#xa;        cell.textContent = result.result;&#xa;        if (result.detail) cell.title = result.detail;&#xa;    }&#xa;&#xa;&#xa;    function addRawResponseDetail(row, rawResponse) {&#xa;        const detailRow = document.createElement(&#39;tr&#39;);&#xa;        detailRow.className = &#39;response-detail&#39;;&#xa;        detailRow.innerHTML = `&lt;td colspan=&quot;6&quot;&gt;&lt;div class=&quot;json-view&quot;&gt;${JSON.stringify(rawResponse, null, 2)}&lt;/div&gt;&lt;/td&gt;`;&#xa;        row.insertAdjacentElement(&#39;afterend&#39;, detailRow);&#xa;    }&#xa;&#xa;&#xa;    function parseInputData(data) {&#xa;        const lines = data.split(&#39;\n&#39;).filter(line =&gt; line.trim() !== &#39;&#39;);&#xa;        return lines.map(line =&gt; {&#xa;            const parts = line.split(&#39;\t&#39;);&#xa;            if (parts.length &lt; 2) {&#xa;                showError(`Ошибка формата в строке: &quot;${line}&quot;. Используйте табуляцию.`);&#xa;                return null;&#xa;            }&#xa;            return { question: parts[0].trim(), expected: cleanCode(parts[1].trim()) };&#xa;        }).filter(Boolean);&#xa;    }&#xa;    &#xa;    function resetState() {&#xa;        correctCount = incorrectCount = errorCount = 0;&#xa;        resultsBody.innerHTML = &#39;&#39;;&#xa;        summaryElement.classList.add(&#39;hidden&#39;);&#xa;        errorMessage.classList.add(&#39;hidden&#39;);&#xa;    }&#xa;&#xa;&#xa;    clearResults.addEventListener(&#39;click&#39;, () =&gt; {&#xa;        resetState();&#xa;        inputData.value = &#39;&#39;;&#xa;    });&#xa;&#xa;&#xa;    function showError(message) {&#xa;        errorMessage.textContent = message;&#xa;        errorMessage.classList.remove(&#39;hidden&#39;);&#xa;        setTimeout(() =&gt; errorMessage.classList.add(&#39;hidden&#39;), 5000);&#xa;    }&#xa;&#xa;&#xa;    function showSummary() {&#xa;        const total = correctCount + incorrectCount + errorCount;&#xa;        const accuracy = total &gt; 0 ? Math.round((correctCount / (total - errorCount)) * 100) : 0;&#xa;        summaryElement.innerHTML = `&#xa;            Итоги тестирования: &#xa;            &lt;span style=&quot;color: #28a745&quot;&gt;${correctCount} ✓&lt;/span&gt; | &#xa;            &lt;span style=&quot;color: #dc3545&quot;&gt;${incorrectCount} ✗&lt;/span&gt; | &#xa;            &lt;span style=&quot;color: #ffc107&quot;&gt;${errorCount} ⚠&lt;/span&gt;&#xa;            | Точность (без ошибок): &lt;strong&gt;${accuracy}%&lt;/strong&gt;&#xa;        `;&#xa;        summaryElement.classList.remove(&#39;hidden&#39;);&#xa;    }&#xa;});" id="KhpofreyqJjnModskH-O-9">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="750" y="690" width="560" height="3780" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
