<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36 SberBrowser/28.0.0.0" version="27.2.0">
  <diagram name="Страница — 1" id="WULPb32uHRo-QUS4CWuH">
    <mxGraphModel dx="1372" dy="743" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="3300" pageHeight="4681" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <UserObject label="import httpx&#xa;from constants import BASE_TEST_ENDPOINT, BASE_TEST_HEADER&#xa;&#xa;&#xa;&#xa;&#xa;async def test_health(async_client: httpx.AsyncClient):&#xa;    response: httpx.Response = await async_client.get(&quot;/health&quot;)&#xa;    assert response.status_code == 200&#xa;    assert response.json() == {&quot;status&quot;: &quot;running&quot;}&#xa;&#xa;&#xa;&#xa;&#xa;async def test_errors(async_client: httpx.AsyncClient):&#xa;    # GigaChat dependency failure&#xa;    test_req_body: dict = {&#xa;        &quot;question&quot;: &quot;Какой год основания Москвы?&quot;,&#xa;        &quot;generation_params&quot;: {&#xa;            &quot;max_tokens&quot;: 1024,&#xa;            &quot;model&quot;: &quot;BibaChat:Pro Max New&quot;,&#xa;            &quot;repetition_penalty&quot;: 1,&#xa;            &quot;temperature&quot;: 1,&#xa;            &quot;top_p&quot;: 0.5,&#xa;        },&#xa;    }&#xa;&#xa;&#xa;    response: httpx.Response = await async_client.post(&#xa;        BASE_TEST_ENDPOINT.format(&quot;predict&quot;),&#xa;        json=test_req_body,&#xa;        headers=BASE_TEST_HEADER,&#xa;    )&#xa;    assert response.status_code == 404&#xa;&#xa;&#xa;&#xa;&#xa;async def test_invoke(async_client: httpx.AsyncClient):&#xa;    test_req_body: dict = {&#xa;        &quot;question&quot;: &quot;Какой год основания Москвы?&quot;,&#xa;        &quot;generation_params&quot;: {&#xa;            &quot;max_tokens&quot;: 1024,&#xa;            &quot;model&quot;: &quot;GigaChat&quot;,&#xa;            &quot;repetition_penalty&quot;: 1,&#xa;            &quot;temperature&quot;: 1,&#xa;            &quot;top_p&quot;: 0.5,&#xa;        },&#xa;    }&#xa;&#xa;&#xa;    response: httpx.Response = await async_client.post(&#xa;        BASE_TEST_ENDPOINT.format(&quot;test_invoke&quot;),&#xa;        json=test_req_body,&#xa;        headers=BASE_TEST_HEADER,&#xa;    )&#xa;    assert response.status_code == 200&#xa;&#xa;&#xa;&#xa;&#xa;async def test_embeddings(async_client: httpx.AsyncClient):&#xa;    test_req_body: dict = {&#xa;        &quot;query&quot;: &quot;Привет!&quot;,&#xa;    }&#xa;&#xa;&#xa;    response: httpx.Response = await async_client.post(&#xa;        BASE_TEST_ENDPOINT.format(&quot;test_embeddings&quot;),&#xa;        json=test_req_body,&#xa;        headers=BASE_TEST_HEADER,&#xa;    )&#xa;    assert response.status_code == 200&#xa;    body_dict = response.json()&#xa;    assert body_dict.get(&quot;embeddings&quot;, None) is not None&#xa;    assert len(body_dict[&quot;embeddings&quot;]) &gt; 0" link="import httpx&#xa;from constants import BASE_TEST_ENDPOINT, BASE_TEST_HEADER&#xa;&#xa;&#xa;&#xa;&#xa;async def test_health(async_client: httpx.AsyncClient):&#xa;    response: httpx.Response = await async_client.get(&quot;/health&quot;)&#xa;    assert response.status_code == 200&#xa;    assert response.json() == {&quot;status&quot;: &quot;running&quot;}&#xa;&#xa;&#xa;&#xa;&#xa;async def test_errors(async_client: httpx.AsyncClient):&#xa;    # GigaChat dependency failure&#xa;    test_req_body: dict = {&#xa;        &quot;question&quot;: &quot;Какой год основания Москвы?&quot;,&#xa;        &quot;generation_params&quot;: {&#xa;            &quot;max_tokens&quot;: 1024,&#xa;            &quot;model&quot;: &quot;BibaChat:Pro Max New&quot;,&#xa;            &quot;repetition_penalty&quot;: 1,&#xa;            &quot;temperature&quot;: 1,&#xa;            &quot;top_p&quot;: 0.5,&#xa;        },&#xa;    }&#xa;&#xa;&#xa;    response: httpx.Response = await async_client.post(&#xa;        BASE_TEST_ENDPOINT.format(&quot;predict&quot;),&#xa;        json=test_req_body,&#xa;        headers=BASE_TEST_HEADER,&#xa;    )&#xa;    assert response.status_code == 404&#xa;&#xa;&#xa;&#xa;&#xa;async def test_invoke(async_client: httpx.AsyncClient):&#xa;    test_req_body: dict = {&#xa;        &quot;question&quot;: &quot;Какой год основания Москвы?&quot;,&#xa;        &quot;generation_params&quot;: {&#xa;            &quot;max_tokens&quot;: 1024,&#xa;            &quot;model&quot;: &quot;GigaChat&quot;,&#xa;            &quot;repetition_penalty&quot;: 1,&#xa;            &quot;temperature&quot;: 1,&#xa;            &quot;top_p&quot;: 0.5,&#xa;        },&#xa;    }&#xa;&#xa;&#xa;    response: httpx.Response = await async_client.post(&#xa;        BASE_TEST_ENDPOINT.format(&quot;test_invoke&quot;),&#xa;        json=test_req_body,&#xa;        headers=BASE_TEST_HEADER,&#xa;    )&#xa;    assert response.status_code == 200&#xa;&#xa;&#xa;&#xa;&#xa;async def test_embeddings(async_client: httpx.AsyncClient):&#xa;    test_req_body: dict = {&#xa;        &quot;query&quot;: &quot;Привет!&quot;,&#xa;    }&#xa;&#xa;&#xa;    response: httpx.Response = await async_client.post(&#xa;        BASE_TEST_ENDPOINT.format(&quot;test_embeddings&quot;),&#xa;        json=test_req_body,&#xa;        headers=BASE_TEST_HEADER,&#xa;    )&#xa;    assert response.status_code == 200&#xa;    body_dict = response.json()&#xa;    assert body_dict.get(&quot;embeddings&quot;, None) is not None&#xa;    assert len(body_dict[&quot;embeddings&quot;]) &gt; 0" id="SYt-TXJ_Hw24SwqiqHZK-28">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="50" y="70" width="420" height="1120" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="import uuid&#xa;from datetime import datetime&#xa;&#xa;&#xa;BASE_TEST_HEADER = {&#xa;    &quot;System-Id&quot;: str(uuid.uuid4()),&#xa;    &quot;Request-Id&quot;: str(uuid.uuid4()),&#xa;    &quot;Request-Time&quot;: str(datetime.now()),&#xa;}&#xa;BASE_TEST_ENDPOINT = &quot;/api/v1/{}&quot;" link="import uuid&#xa;from datetime import datetime&#xa;&#xa;&#xa;BASE_TEST_HEADER = {&#xa;    &quot;System-Id&quot;: str(uuid.uuid4()),&#xa;    &quot;Request-Id&quot;: str(uuid.uuid4()),&#xa;    &quot;Request-Time&quot;: str(datetime.now()),&#xa;}&#xa;BASE_TEST_ENDPOINT = &quot;/api/v1/{}&quot;" id="SYt-TXJ_Hw24SwqiqHZK-29">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="1">
            <mxGeometry x="550" y="80" width="240" height="170" as="geometry" />
          </mxCell>
        </UserObject>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
